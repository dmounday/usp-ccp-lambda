// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usp-msg-1-1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_usp_2dmsg_2d1_2d1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_usp_2dmsg_2d1_2d1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_usp_2dmsg_2d1_2d1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_usp_2dmsg_2d1_2d1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[75]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usp_2dmsg_2d1_2d1_2eproto;
namespace usp {
class Add;
class AddDefaultTypeInternal;
extern AddDefaultTypeInternal _Add_default_instance_;
class AddResp;
class AddRespDefaultTypeInternal;
extern AddRespDefaultTypeInternal _AddResp_default_instance_;
class AddResp_CreatedObjectResult;
class AddResp_CreatedObjectResultDefaultTypeInternal;
extern AddResp_CreatedObjectResultDefaultTypeInternal _AddResp_CreatedObjectResult_default_instance_;
class AddResp_CreatedObjectResult_OperationStatus;
class AddResp_CreatedObjectResult_OperationStatusDefaultTypeInternal;
extern AddResp_CreatedObjectResult_OperationStatusDefaultTypeInternal _AddResp_CreatedObjectResult_OperationStatus_default_instance_;
class AddResp_CreatedObjectResult_OperationStatus_OperationFailure;
class AddResp_CreatedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal;
extern AddResp_CreatedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal _AddResp_CreatedObjectResult_OperationStatus_OperationFailure_default_instance_;
class AddResp_CreatedObjectResult_OperationStatus_OperationSuccess;
class AddResp_CreatedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal;
extern AddResp_CreatedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal _AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_default_instance_;
class AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse;
class AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUseDefaultTypeInternal;
extern AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUseDefaultTypeInternal _AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse_default_instance_;
class AddResp_ParameterError;
class AddResp_ParameterErrorDefaultTypeInternal;
extern AddResp_ParameterErrorDefaultTypeInternal _AddResp_ParameterError_default_instance_;
class Add_CreateObject;
class Add_CreateObjectDefaultTypeInternal;
extern Add_CreateObjectDefaultTypeInternal _Add_CreateObject_default_instance_;
class Add_CreateParamSetting;
class Add_CreateParamSettingDefaultTypeInternal;
extern Add_CreateParamSettingDefaultTypeInternal _Add_CreateParamSetting_default_instance_;
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Delete;
class DeleteDefaultTypeInternal;
extern DeleteDefaultTypeInternal _Delete_default_instance_;
class DeleteResp;
class DeleteRespDefaultTypeInternal;
extern DeleteRespDefaultTypeInternal _DeleteResp_default_instance_;
class DeleteResp_DeletedObjectResult;
class DeleteResp_DeletedObjectResultDefaultTypeInternal;
extern DeleteResp_DeletedObjectResultDefaultTypeInternal _DeleteResp_DeletedObjectResult_default_instance_;
class DeleteResp_DeletedObjectResult_OperationStatus;
class DeleteResp_DeletedObjectResult_OperationStatusDefaultTypeInternal;
extern DeleteResp_DeletedObjectResult_OperationStatusDefaultTypeInternal _DeleteResp_DeletedObjectResult_OperationStatus_default_instance_;
class DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure;
class DeleteResp_DeletedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal;
extern DeleteResp_DeletedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal _DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure_default_instance_;
class DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess;
class DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal;
extern DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal _DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess_default_instance_;
class DeleteResp_UnaffectedPathError;
class DeleteResp_UnaffectedPathErrorDefaultTypeInternal;
extern DeleteResp_UnaffectedPathErrorDefaultTypeInternal _DeleteResp_UnaffectedPathError_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Error_ParamError;
class Error_ParamErrorDefaultTypeInternal;
extern Error_ParamErrorDefaultTypeInternal _Error_ParamError_default_instance_;
class Get;
class GetDefaultTypeInternal;
extern GetDefaultTypeInternal _Get_default_instance_;
class GetInstances;
class GetInstancesDefaultTypeInternal;
extern GetInstancesDefaultTypeInternal _GetInstances_default_instance_;
class GetInstancesResp;
class GetInstancesRespDefaultTypeInternal;
extern GetInstancesRespDefaultTypeInternal _GetInstancesResp_default_instance_;
class GetInstancesResp_CurrInstance;
class GetInstancesResp_CurrInstanceDefaultTypeInternal;
extern GetInstancesResp_CurrInstanceDefaultTypeInternal _GetInstancesResp_CurrInstance_default_instance_;
class GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse;
class GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUseDefaultTypeInternal;
extern GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUseDefaultTypeInternal _GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse_default_instance_;
class GetInstancesResp_RequestedPathResult;
class GetInstancesResp_RequestedPathResultDefaultTypeInternal;
extern GetInstancesResp_RequestedPathResultDefaultTypeInternal _GetInstancesResp_RequestedPathResult_default_instance_;
class GetResp;
class GetRespDefaultTypeInternal;
extern GetRespDefaultTypeInternal _GetResp_default_instance_;
class GetResp_RequestedPathResult;
class GetResp_RequestedPathResultDefaultTypeInternal;
extern GetResp_RequestedPathResultDefaultTypeInternal _GetResp_RequestedPathResult_default_instance_;
class GetResp_ResolvedPathResult;
class GetResp_ResolvedPathResultDefaultTypeInternal;
extern GetResp_ResolvedPathResultDefaultTypeInternal _GetResp_ResolvedPathResult_default_instance_;
class GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse;
class GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUseDefaultTypeInternal;
extern GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUseDefaultTypeInternal _GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse_default_instance_;
class GetSupportedDM;
class GetSupportedDMDefaultTypeInternal;
extern GetSupportedDMDefaultTypeInternal _GetSupportedDM_default_instance_;
class GetSupportedDMResp;
class GetSupportedDMRespDefaultTypeInternal;
extern GetSupportedDMRespDefaultTypeInternal _GetSupportedDMResp_default_instance_;
class GetSupportedDMResp_RequestedObjectResult;
class GetSupportedDMResp_RequestedObjectResultDefaultTypeInternal;
extern GetSupportedDMResp_RequestedObjectResultDefaultTypeInternal _GetSupportedDMResp_RequestedObjectResult_default_instance_;
class GetSupportedDMResp_SupportedCommandResult;
class GetSupportedDMResp_SupportedCommandResultDefaultTypeInternal;
extern GetSupportedDMResp_SupportedCommandResultDefaultTypeInternal _GetSupportedDMResp_SupportedCommandResult_default_instance_;
class GetSupportedDMResp_SupportedEventResult;
class GetSupportedDMResp_SupportedEventResultDefaultTypeInternal;
extern GetSupportedDMResp_SupportedEventResultDefaultTypeInternal _GetSupportedDMResp_SupportedEventResult_default_instance_;
class GetSupportedDMResp_SupportedObjectResult;
class GetSupportedDMResp_SupportedObjectResultDefaultTypeInternal;
extern GetSupportedDMResp_SupportedObjectResultDefaultTypeInternal _GetSupportedDMResp_SupportedObjectResult_default_instance_;
class GetSupportedDMResp_SupportedParamResult;
class GetSupportedDMResp_SupportedParamResultDefaultTypeInternal;
extern GetSupportedDMResp_SupportedParamResultDefaultTypeInternal _GetSupportedDMResp_SupportedParamResult_default_instance_;
class GetSupportedProtocol;
class GetSupportedProtocolDefaultTypeInternal;
extern GetSupportedProtocolDefaultTypeInternal _GetSupportedProtocol_default_instance_;
class GetSupportedProtocolResp;
class GetSupportedProtocolRespDefaultTypeInternal;
extern GetSupportedProtocolRespDefaultTypeInternal _GetSupportedProtocolResp_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class Notify;
class NotifyDefaultTypeInternal;
extern NotifyDefaultTypeInternal _Notify_default_instance_;
class NotifyResp;
class NotifyRespDefaultTypeInternal;
extern NotifyRespDefaultTypeInternal _NotifyResp_default_instance_;
class Notify_Event;
class Notify_EventDefaultTypeInternal;
extern Notify_EventDefaultTypeInternal _Notify_Event_default_instance_;
class Notify_Event_ParamsEntry_DoNotUse;
class Notify_Event_ParamsEntry_DoNotUseDefaultTypeInternal;
extern Notify_Event_ParamsEntry_DoNotUseDefaultTypeInternal _Notify_Event_ParamsEntry_DoNotUse_default_instance_;
class Notify_ObjectCreation;
class Notify_ObjectCreationDefaultTypeInternal;
extern Notify_ObjectCreationDefaultTypeInternal _Notify_ObjectCreation_default_instance_;
class Notify_ObjectCreation_UniqueKeysEntry_DoNotUse;
class Notify_ObjectCreation_UniqueKeysEntry_DoNotUseDefaultTypeInternal;
extern Notify_ObjectCreation_UniqueKeysEntry_DoNotUseDefaultTypeInternal _Notify_ObjectCreation_UniqueKeysEntry_DoNotUse_default_instance_;
class Notify_ObjectDeletion;
class Notify_ObjectDeletionDefaultTypeInternal;
extern Notify_ObjectDeletionDefaultTypeInternal _Notify_ObjectDeletion_default_instance_;
class Notify_OnBoardRequest;
class Notify_OnBoardRequestDefaultTypeInternal;
extern Notify_OnBoardRequestDefaultTypeInternal _Notify_OnBoardRequest_default_instance_;
class Notify_OperationComplete;
class Notify_OperationCompleteDefaultTypeInternal;
extern Notify_OperationCompleteDefaultTypeInternal _Notify_OperationComplete_default_instance_;
class Notify_OperationComplete_CommandFailure;
class Notify_OperationComplete_CommandFailureDefaultTypeInternal;
extern Notify_OperationComplete_CommandFailureDefaultTypeInternal _Notify_OperationComplete_CommandFailure_default_instance_;
class Notify_OperationComplete_OutputArgs;
class Notify_OperationComplete_OutputArgsDefaultTypeInternal;
extern Notify_OperationComplete_OutputArgsDefaultTypeInternal _Notify_OperationComplete_OutputArgs_default_instance_;
class Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse;
class Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUseDefaultTypeInternal;
extern Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUseDefaultTypeInternal _Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse_default_instance_;
class Notify_ValueChange;
class Notify_ValueChangeDefaultTypeInternal;
extern Notify_ValueChangeDefaultTypeInternal _Notify_ValueChange_default_instance_;
class Operate;
class OperateDefaultTypeInternal;
extern OperateDefaultTypeInternal _Operate_default_instance_;
class OperateResp;
class OperateRespDefaultTypeInternal;
extern OperateRespDefaultTypeInternal _OperateResp_default_instance_;
class OperateResp_OperationResult;
class OperateResp_OperationResultDefaultTypeInternal;
extern OperateResp_OperationResultDefaultTypeInternal _OperateResp_OperationResult_default_instance_;
class OperateResp_OperationResult_CommandFailure;
class OperateResp_OperationResult_CommandFailureDefaultTypeInternal;
extern OperateResp_OperationResult_CommandFailureDefaultTypeInternal _OperateResp_OperationResult_CommandFailure_default_instance_;
class OperateResp_OperationResult_OutputArgs;
class OperateResp_OperationResult_OutputArgsDefaultTypeInternal;
extern OperateResp_OperationResult_OutputArgsDefaultTypeInternal _OperateResp_OperationResult_OutputArgs_default_instance_;
class OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse;
class OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUseDefaultTypeInternal;
extern OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUseDefaultTypeInternal _OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse_default_instance_;
class Operate_InputArgsEntry_DoNotUse;
class Operate_InputArgsEntry_DoNotUseDefaultTypeInternal;
extern Operate_InputArgsEntry_DoNotUseDefaultTypeInternal _Operate_InputArgsEntry_DoNotUse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Set;
class SetDefaultTypeInternal;
extern SetDefaultTypeInternal _Set_default_instance_;
class SetResp;
class SetRespDefaultTypeInternal;
extern SetRespDefaultTypeInternal _SetResp_default_instance_;
class SetResp_ParameterError;
class SetResp_ParameterErrorDefaultTypeInternal;
extern SetResp_ParameterErrorDefaultTypeInternal _SetResp_ParameterError_default_instance_;
class SetResp_UpdatedInstanceFailure;
class SetResp_UpdatedInstanceFailureDefaultTypeInternal;
extern SetResp_UpdatedInstanceFailureDefaultTypeInternal _SetResp_UpdatedInstanceFailure_default_instance_;
class SetResp_UpdatedInstanceResult;
class SetResp_UpdatedInstanceResultDefaultTypeInternal;
extern SetResp_UpdatedInstanceResultDefaultTypeInternal _SetResp_UpdatedInstanceResult_default_instance_;
class SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse;
class SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUseDefaultTypeInternal;
extern SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUseDefaultTypeInternal _SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse_default_instance_;
class SetResp_UpdatedObjectResult;
class SetResp_UpdatedObjectResultDefaultTypeInternal;
extern SetResp_UpdatedObjectResultDefaultTypeInternal _SetResp_UpdatedObjectResult_default_instance_;
class SetResp_UpdatedObjectResult_OperationStatus;
class SetResp_UpdatedObjectResult_OperationStatusDefaultTypeInternal;
extern SetResp_UpdatedObjectResult_OperationStatusDefaultTypeInternal _SetResp_UpdatedObjectResult_OperationStatus_default_instance_;
class SetResp_UpdatedObjectResult_OperationStatus_OperationFailure;
class SetResp_UpdatedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal;
extern SetResp_UpdatedObjectResult_OperationStatus_OperationFailureDefaultTypeInternal _SetResp_UpdatedObjectResult_OperationStatus_OperationFailure_default_instance_;
class SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess;
class SetResp_UpdatedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal;
extern SetResp_UpdatedObjectResult_OperationStatus_OperationSuccessDefaultTypeInternal _SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess_default_instance_;
class Set_UpdateObject;
class Set_UpdateObjectDefaultTypeInternal;
extern Set_UpdateObjectDefaultTypeInternal _Set_UpdateObject_default_instance_;
class Set_UpdateParamSetting;
class Set_UpdateParamSettingDefaultTypeInternal;
extern Set_UpdateParamSettingDefaultTypeInternal _Set_UpdateParamSetting_default_instance_;
}  // namespace usp
PROTOBUF_NAMESPACE_OPEN
template<> ::usp::Add* Arena::CreateMaybeMessage<::usp::Add>(Arena*);
template<> ::usp::AddResp* Arena::CreateMaybeMessage<::usp::AddResp>(Arena*);
template<> ::usp::AddResp_CreatedObjectResult* Arena::CreateMaybeMessage<::usp::AddResp_CreatedObjectResult>(Arena*);
template<> ::usp::AddResp_CreatedObjectResult_OperationStatus* Arena::CreateMaybeMessage<::usp::AddResp_CreatedObjectResult_OperationStatus>(Arena*);
template<> ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* Arena::CreateMaybeMessage<::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure>(Arena*);
template<> ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* Arena::CreateMaybeMessage<::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess>(Arena*);
template<> ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse>(Arena*);
template<> ::usp::AddResp_ParameterError* Arena::CreateMaybeMessage<::usp::AddResp_ParameterError>(Arena*);
template<> ::usp::Add_CreateObject* Arena::CreateMaybeMessage<::usp::Add_CreateObject>(Arena*);
template<> ::usp::Add_CreateParamSetting* Arena::CreateMaybeMessage<::usp::Add_CreateParamSetting>(Arena*);
template<> ::usp::Body* Arena::CreateMaybeMessage<::usp::Body>(Arena*);
template<> ::usp::Delete* Arena::CreateMaybeMessage<::usp::Delete>(Arena*);
template<> ::usp::DeleteResp* Arena::CreateMaybeMessage<::usp::DeleteResp>(Arena*);
template<> ::usp::DeleteResp_DeletedObjectResult* Arena::CreateMaybeMessage<::usp::DeleteResp_DeletedObjectResult>(Arena*);
template<> ::usp::DeleteResp_DeletedObjectResult_OperationStatus* Arena::CreateMaybeMessage<::usp::DeleteResp_DeletedObjectResult_OperationStatus>(Arena*);
template<> ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* Arena::CreateMaybeMessage<::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure>(Arena*);
template<> ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* Arena::CreateMaybeMessage<::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess>(Arena*);
template<> ::usp::DeleteResp_UnaffectedPathError* Arena::CreateMaybeMessage<::usp::DeleteResp_UnaffectedPathError>(Arena*);
template<> ::usp::Error* Arena::CreateMaybeMessage<::usp::Error>(Arena*);
template<> ::usp::Error_ParamError* Arena::CreateMaybeMessage<::usp::Error_ParamError>(Arena*);
template<> ::usp::Get* Arena::CreateMaybeMessage<::usp::Get>(Arena*);
template<> ::usp::GetInstances* Arena::CreateMaybeMessage<::usp::GetInstances>(Arena*);
template<> ::usp::GetInstancesResp* Arena::CreateMaybeMessage<::usp::GetInstancesResp>(Arena*);
template<> ::usp::GetInstancesResp_CurrInstance* Arena::CreateMaybeMessage<::usp::GetInstancesResp_CurrInstance>(Arena*);
template<> ::usp::GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse>(Arena*);
template<> ::usp::GetInstancesResp_RequestedPathResult* Arena::CreateMaybeMessage<::usp::GetInstancesResp_RequestedPathResult>(Arena*);
template<> ::usp::GetResp* Arena::CreateMaybeMessage<::usp::GetResp>(Arena*);
template<> ::usp::GetResp_RequestedPathResult* Arena::CreateMaybeMessage<::usp::GetResp_RequestedPathResult>(Arena*);
template<> ::usp::GetResp_ResolvedPathResult* Arena::CreateMaybeMessage<::usp::GetResp_ResolvedPathResult>(Arena*);
template<> ::usp::GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse>(Arena*);
template<> ::usp::GetSupportedDM* Arena::CreateMaybeMessage<::usp::GetSupportedDM>(Arena*);
template<> ::usp::GetSupportedDMResp* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp>(Arena*);
template<> ::usp::GetSupportedDMResp_RequestedObjectResult* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp_RequestedObjectResult>(Arena*);
template<> ::usp::GetSupportedDMResp_SupportedCommandResult* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp_SupportedCommandResult>(Arena*);
template<> ::usp::GetSupportedDMResp_SupportedEventResult* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp_SupportedEventResult>(Arena*);
template<> ::usp::GetSupportedDMResp_SupportedObjectResult* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp_SupportedObjectResult>(Arena*);
template<> ::usp::GetSupportedDMResp_SupportedParamResult* Arena::CreateMaybeMessage<::usp::GetSupportedDMResp_SupportedParamResult>(Arena*);
template<> ::usp::GetSupportedProtocol* Arena::CreateMaybeMessage<::usp::GetSupportedProtocol>(Arena*);
template<> ::usp::GetSupportedProtocolResp* Arena::CreateMaybeMessage<::usp::GetSupportedProtocolResp>(Arena*);
template<> ::usp::Header* Arena::CreateMaybeMessage<::usp::Header>(Arena*);
template<> ::usp::Msg* Arena::CreateMaybeMessage<::usp::Msg>(Arena*);
template<> ::usp::Notify* Arena::CreateMaybeMessage<::usp::Notify>(Arena*);
template<> ::usp::NotifyResp* Arena::CreateMaybeMessage<::usp::NotifyResp>(Arena*);
template<> ::usp::Notify_Event* Arena::CreateMaybeMessage<::usp::Notify_Event>(Arena*);
template<> ::usp::Notify_Event_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::Notify_Event_ParamsEntry_DoNotUse>(Arena*);
template<> ::usp::Notify_ObjectCreation* Arena::CreateMaybeMessage<::usp::Notify_ObjectCreation>(Arena*);
template<> ::usp::Notify_ObjectCreation_UniqueKeysEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::Notify_ObjectCreation_UniqueKeysEntry_DoNotUse>(Arena*);
template<> ::usp::Notify_ObjectDeletion* Arena::CreateMaybeMessage<::usp::Notify_ObjectDeletion>(Arena*);
template<> ::usp::Notify_OnBoardRequest* Arena::CreateMaybeMessage<::usp::Notify_OnBoardRequest>(Arena*);
template<> ::usp::Notify_OperationComplete* Arena::CreateMaybeMessage<::usp::Notify_OperationComplete>(Arena*);
template<> ::usp::Notify_OperationComplete_CommandFailure* Arena::CreateMaybeMessage<::usp::Notify_OperationComplete_CommandFailure>(Arena*);
template<> ::usp::Notify_OperationComplete_OutputArgs* Arena::CreateMaybeMessage<::usp::Notify_OperationComplete_OutputArgs>(Arena*);
template<> ::usp::Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse>(Arena*);
template<> ::usp::Notify_ValueChange* Arena::CreateMaybeMessage<::usp::Notify_ValueChange>(Arena*);
template<> ::usp::Operate* Arena::CreateMaybeMessage<::usp::Operate>(Arena*);
template<> ::usp::OperateResp* Arena::CreateMaybeMessage<::usp::OperateResp>(Arena*);
template<> ::usp::OperateResp_OperationResult* Arena::CreateMaybeMessage<::usp::OperateResp_OperationResult>(Arena*);
template<> ::usp::OperateResp_OperationResult_CommandFailure* Arena::CreateMaybeMessage<::usp::OperateResp_OperationResult_CommandFailure>(Arena*);
template<> ::usp::OperateResp_OperationResult_OutputArgs* Arena::CreateMaybeMessage<::usp::OperateResp_OperationResult_OutputArgs>(Arena*);
template<> ::usp::OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse>(Arena*);
template<> ::usp::Operate_InputArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::Operate_InputArgsEntry_DoNotUse>(Arena*);
template<> ::usp::Request* Arena::CreateMaybeMessage<::usp::Request>(Arena*);
template<> ::usp::Response* Arena::CreateMaybeMessage<::usp::Response>(Arena*);
template<> ::usp::Set* Arena::CreateMaybeMessage<::usp::Set>(Arena*);
template<> ::usp::SetResp* Arena::CreateMaybeMessage<::usp::SetResp>(Arena*);
template<> ::usp::SetResp_ParameterError* Arena::CreateMaybeMessage<::usp::SetResp_ParameterError>(Arena*);
template<> ::usp::SetResp_UpdatedInstanceFailure* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedInstanceFailure>(Arena*);
template<> ::usp::SetResp_UpdatedInstanceResult* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedInstanceResult>(Arena*);
template<> ::usp::SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse>(Arena*);
template<> ::usp::SetResp_UpdatedObjectResult* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedObjectResult>(Arena*);
template<> ::usp::SetResp_UpdatedObjectResult_OperationStatus* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedObjectResult_OperationStatus>(Arena*);
template<> ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure>(Arena*);
template<> ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* Arena::CreateMaybeMessage<::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess>(Arena*);
template<> ::usp::Set_UpdateObject* Arena::CreateMaybeMessage<::usp::Set_UpdateObject>(Arena*);
template<> ::usp::Set_UpdateParamSetting* Arena::CreateMaybeMessage<::usp::Set_UpdateParamSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace usp {

enum Header_MsgType : int {
  Header_MsgType_ERROR = 0,
  Header_MsgType_GET = 1,
  Header_MsgType_GET_RESP = 2,
  Header_MsgType_NOTIFY = 3,
  Header_MsgType_SET = 4,
  Header_MsgType_SET_RESP = 5,
  Header_MsgType_OPERATE = 6,
  Header_MsgType_OPERATE_RESP = 7,
  Header_MsgType_ADD = 8,
  Header_MsgType_ADD_RESP = 9,
  Header_MsgType_DELETE = 10,
  Header_MsgType_DELETE_RESP = 11,
  Header_MsgType_GET_SUPPORTED_DM = 12,
  Header_MsgType_GET_SUPPORTED_DM_RESP = 13,
  Header_MsgType_GET_INSTANCES = 14,
  Header_MsgType_GET_INSTANCES_RESP = 15,
  Header_MsgType_NOTIFY_RESP = 16,
  Header_MsgType_GET_SUPPORTED_PROTO = 17,
  Header_MsgType_GET_SUPPORTED_PROTO_RESP = 18,
  Header_MsgType_Header_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Header_MsgType_Header_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Header_MsgType_IsValid(int value);
constexpr Header_MsgType Header_MsgType_MsgType_MIN = Header_MsgType_ERROR;
constexpr Header_MsgType Header_MsgType_MsgType_MAX = Header_MsgType_GET_SUPPORTED_PROTO_RESP;
constexpr int Header_MsgType_MsgType_ARRAYSIZE = Header_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_MsgType_descriptor();
template<typename T>
inline const std::string& Header_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_MsgType_descriptor(), enum_t_value);
}
inline bool Header_MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Header_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_MsgType>(
    Header_MsgType_descriptor(), name, value);
}
enum GetSupportedDMResp_ParamAccessType : int {
  GetSupportedDMResp_ParamAccessType_PARAM_READ_ONLY = 0,
  GetSupportedDMResp_ParamAccessType_PARAM_READ_WRITE = 1,
  GetSupportedDMResp_ParamAccessType_PARAM_WRITE_ONLY = 2,
  GetSupportedDMResp_ParamAccessType_GetSupportedDMResp_ParamAccessType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetSupportedDMResp_ParamAccessType_GetSupportedDMResp_ParamAccessType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetSupportedDMResp_ParamAccessType_IsValid(int value);
constexpr GetSupportedDMResp_ParamAccessType GetSupportedDMResp_ParamAccessType_ParamAccessType_MIN = GetSupportedDMResp_ParamAccessType_PARAM_READ_ONLY;
constexpr GetSupportedDMResp_ParamAccessType GetSupportedDMResp_ParamAccessType_ParamAccessType_MAX = GetSupportedDMResp_ParamAccessType_PARAM_WRITE_ONLY;
constexpr int GetSupportedDMResp_ParamAccessType_ParamAccessType_ARRAYSIZE = GetSupportedDMResp_ParamAccessType_ParamAccessType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetSupportedDMResp_ParamAccessType_descriptor();
template<typename T>
inline const std::string& GetSupportedDMResp_ParamAccessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetSupportedDMResp_ParamAccessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetSupportedDMResp_ParamAccessType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetSupportedDMResp_ParamAccessType_descriptor(), enum_t_value);
}
inline bool GetSupportedDMResp_ParamAccessType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetSupportedDMResp_ParamAccessType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetSupportedDMResp_ParamAccessType>(
    GetSupportedDMResp_ParamAccessType_descriptor(), name, value);
}
enum GetSupportedDMResp_ObjAccessType : int {
  GetSupportedDMResp_ObjAccessType_OBJ_READ_ONLY = 0,
  GetSupportedDMResp_ObjAccessType_OBJ_ADD_DELETE = 1,
  GetSupportedDMResp_ObjAccessType_OBJ_ADD_ONLY = 2,
  GetSupportedDMResp_ObjAccessType_OBJ_DELETE_ONLY = 3,
  GetSupportedDMResp_ObjAccessType_GetSupportedDMResp_ObjAccessType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetSupportedDMResp_ObjAccessType_GetSupportedDMResp_ObjAccessType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetSupportedDMResp_ObjAccessType_IsValid(int value);
constexpr GetSupportedDMResp_ObjAccessType GetSupportedDMResp_ObjAccessType_ObjAccessType_MIN = GetSupportedDMResp_ObjAccessType_OBJ_READ_ONLY;
constexpr GetSupportedDMResp_ObjAccessType GetSupportedDMResp_ObjAccessType_ObjAccessType_MAX = GetSupportedDMResp_ObjAccessType_OBJ_DELETE_ONLY;
constexpr int GetSupportedDMResp_ObjAccessType_ObjAccessType_ARRAYSIZE = GetSupportedDMResp_ObjAccessType_ObjAccessType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetSupportedDMResp_ObjAccessType_descriptor();
template<typename T>
inline const std::string& GetSupportedDMResp_ObjAccessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetSupportedDMResp_ObjAccessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetSupportedDMResp_ObjAccessType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetSupportedDMResp_ObjAccessType_descriptor(), enum_t_value);
}
inline bool GetSupportedDMResp_ObjAccessType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetSupportedDMResp_ObjAccessType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetSupportedDMResp_ObjAccessType>(
    GetSupportedDMResp_ObjAccessType_descriptor(), name, value);
}
// ===================================================================

class Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  virtual ~Msg();

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .usp.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::usp::Header& header() const;
  ::usp::Header* release_header();
  ::usp::Header* mutable_header();
  void set_allocated_header(::usp::Header* header);
  private:
  const ::usp::Header& _internal_header() const;
  ::usp::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::usp::Header* header);
  ::usp::Header* unsafe_arena_release_header();

  // .usp.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::usp::Body& body() const;
  ::usp::Body* release_body();
  ::usp::Body* mutable_body();
  void set_allocated_body(::usp::Body* body);
  private:
  const ::usp::Body& _internal_body() const;
  ::usp::Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::usp::Body* body);
  ::usp::Body* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:usp.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::usp::Header* header_;
  ::usp::Body* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Header_MsgType MsgType;
  static constexpr MsgType ERROR =
    Header_MsgType_ERROR;
  static constexpr MsgType GET =
    Header_MsgType_GET;
  static constexpr MsgType GET_RESP =
    Header_MsgType_GET_RESP;
  static constexpr MsgType NOTIFY =
    Header_MsgType_NOTIFY;
  static constexpr MsgType SET =
    Header_MsgType_SET;
  static constexpr MsgType SET_RESP =
    Header_MsgType_SET_RESP;
  static constexpr MsgType OPERATE =
    Header_MsgType_OPERATE;
  static constexpr MsgType OPERATE_RESP =
    Header_MsgType_OPERATE_RESP;
  static constexpr MsgType ADD =
    Header_MsgType_ADD;
  static constexpr MsgType ADD_RESP =
    Header_MsgType_ADD_RESP;
  static constexpr MsgType DELETE =
    Header_MsgType_DELETE;
  static constexpr MsgType DELETE_RESP =
    Header_MsgType_DELETE_RESP;
  static constexpr MsgType GET_SUPPORTED_DM =
    Header_MsgType_GET_SUPPORTED_DM;
  static constexpr MsgType GET_SUPPORTED_DM_RESP =
    Header_MsgType_GET_SUPPORTED_DM_RESP;
  static constexpr MsgType GET_INSTANCES =
    Header_MsgType_GET_INSTANCES;
  static constexpr MsgType GET_INSTANCES_RESP =
    Header_MsgType_GET_INSTANCES_RESP;
  static constexpr MsgType NOTIFY_RESP =
    Header_MsgType_NOTIFY_RESP;
  static constexpr MsgType GET_SUPPORTED_PROTO =
    Header_MsgType_GET_SUPPORTED_PROTO;
  static constexpr MsgType GET_SUPPORTED_PROTO_RESP =
    Header_MsgType_GET_SUPPORTED_PROTO_RESP;
  static inline bool MsgType_IsValid(int value) {
    return Header_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    Header_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    Header_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    Header_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return Header_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return Header_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgType* value) {
    return Header_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
  };
  // string msg_id = 1;
  void clear_msg_id();
  const std::string& msg_id() const;
  void set_msg_id(const std::string& value);
  void set_msg_id(std::string&& value);
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  std::string* mutable_msg_id();
  std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // .usp.Header.MsgType msg_type = 2;
  void clear_msg_type();
  ::usp::Header_MsgType msg_type() const;
  void set_msg_type(::usp::Header_MsgType value);
  private:
  ::usp::Header_MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::usp::Header_MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Body PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Body) */ {
 public:
  inline Body() : Body(nullptr) {}
  virtual ~Body();

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Body& default_instance();

  enum MsgBodyCase {
    kRequest = 1,
    kResponse = 2,
    kError = 3,
    MSG_BODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(nullptr);
  }

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Body";
  }
  protected:
  explicit Body(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // .usp.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::usp::Request& request() const;
  ::usp::Request* release_request();
  ::usp::Request* mutable_request();
  void set_allocated_request(::usp::Request* request);
  private:
  const ::usp::Request& _internal_request() const;
  ::usp::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::usp::Request* request);
  ::usp::Request* unsafe_arena_release_request();

  // .usp.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::usp::Response& response() const;
  ::usp::Response* release_response();
  ::usp::Response* mutable_response();
  void set_allocated_response(::usp::Response* response);
  private:
  const ::usp::Response& _internal_response() const;
  ::usp::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::usp::Response* response);
  ::usp::Response* unsafe_arena_release_response();

  // .usp.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::usp::Error& error() const;
  ::usp::Error* release_error();
  ::usp::Error* mutable_error();
  void set_allocated_error(::usp::Error* error);
  private:
  const ::usp::Error& _internal_error() const;
  ::usp::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::usp::Error* error);
  ::usp::Error* unsafe_arena_release_error();

  void clear_msg_body();
  MsgBodyCase msg_body_case() const;
  // @@protoc_insertion_point(class_scope:usp.Body)
 private:
  class _Internal;
  void set_has_request();
  void set_has_response();
  void set_has_error();

  inline bool has_msg_body() const;
  inline void clear_has_msg_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgBodyUnion {
    MsgBodyUnion() {}
    ::usp::Request* request_;
    ::usp::Response* response_;
    ::usp::Error* error_;
  } msg_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum ReqTypeCase {
    kGet = 1,
    kGetSupportedDm = 2,
    kGetInstances = 3,
    kSet = 4,
    kAdd = 5,
    kDelete = 6,
    kOperate = 7,
    kNotify = 8,
    kGetSupportedProtocol = 9,
    REQ_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetFieldNumber = 1,
    kGetSupportedDmFieldNumber = 2,
    kGetInstancesFieldNumber = 3,
    kSetFieldNumber = 4,
    kAddFieldNumber = 5,
    kDeleteFieldNumber = 6,
    kOperateFieldNumber = 7,
    kNotifyFieldNumber = 8,
    kGetSupportedProtocolFieldNumber = 9,
  };
  // .usp.Get get = 1;
  bool has_get() const;
  private:
  bool _internal_has_get() const;
  public:
  void clear_get();
  const ::usp::Get& get() const;
  ::usp::Get* release_get();
  ::usp::Get* mutable_get();
  void set_allocated_get(::usp::Get* get);
  private:
  const ::usp::Get& _internal_get() const;
  ::usp::Get* _internal_mutable_get();
  public:
  void unsafe_arena_set_allocated_get(
      ::usp::Get* get);
  ::usp::Get* unsafe_arena_release_get();

  // .usp.GetSupportedDM get_supported_dm = 2;
  bool has_get_supported_dm() const;
  private:
  bool _internal_has_get_supported_dm() const;
  public:
  void clear_get_supported_dm();
  const ::usp::GetSupportedDM& get_supported_dm() const;
  ::usp::GetSupportedDM* release_get_supported_dm();
  ::usp::GetSupportedDM* mutable_get_supported_dm();
  void set_allocated_get_supported_dm(::usp::GetSupportedDM* get_supported_dm);
  private:
  const ::usp::GetSupportedDM& _internal_get_supported_dm() const;
  ::usp::GetSupportedDM* _internal_mutable_get_supported_dm();
  public:
  void unsafe_arena_set_allocated_get_supported_dm(
      ::usp::GetSupportedDM* get_supported_dm);
  ::usp::GetSupportedDM* unsafe_arena_release_get_supported_dm();

  // .usp.GetInstances get_instances = 3;
  bool has_get_instances() const;
  private:
  bool _internal_has_get_instances() const;
  public:
  void clear_get_instances();
  const ::usp::GetInstances& get_instances() const;
  ::usp::GetInstances* release_get_instances();
  ::usp::GetInstances* mutable_get_instances();
  void set_allocated_get_instances(::usp::GetInstances* get_instances);
  private:
  const ::usp::GetInstances& _internal_get_instances() const;
  ::usp::GetInstances* _internal_mutable_get_instances();
  public:
  void unsafe_arena_set_allocated_get_instances(
      ::usp::GetInstances* get_instances);
  ::usp::GetInstances* unsafe_arena_release_get_instances();

  // .usp.Set set = 4;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::usp::Set& set() const;
  ::usp::Set* release_set();
  ::usp::Set* mutable_set();
  void set_allocated_set(::usp::Set* set);
  private:
  const ::usp::Set& _internal_set() const;
  ::usp::Set* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::usp::Set* set);
  ::usp::Set* unsafe_arena_release_set();

  // .usp.Add add = 5;
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  const ::usp::Add& add() const;
  ::usp::Add* release_add();
  ::usp::Add* mutable_add();
  void set_allocated_add(::usp::Add* add);
  private:
  const ::usp::Add& _internal_add() const;
  ::usp::Add* _internal_mutable_add();
  public:
  void unsafe_arena_set_allocated_add(
      ::usp::Add* add);
  ::usp::Add* unsafe_arena_release_add();

  // .usp.Delete delete = 6;
  bool has_delete_() const;
  private:
  bool _internal_has_delete_() const;
  public:
  void clear_delete_();
  const ::usp::Delete& delete_() const;
  ::usp::Delete* release_delete_();
  ::usp::Delete* mutable_delete_();
  void set_allocated_delete_(::usp::Delete* delete_);
  private:
  const ::usp::Delete& _internal_delete_() const;
  ::usp::Delete* _internal_mutable_delete_();
  public:
  void unsafe_arena_set_allocated_delete_(
      ::usp::Delete* delete_);
  ::usp::Delete* unsafe_arena_release_delete_();

  // .usp.Operate operate = 7;
  bool has_operate() const;
  private:
  bool _internal_has_operate() const;
  public:
  void clear_operate();
  const ::usp::Operate& operate() const;
  ::usp::Operate* release_operate();
  ::usp::Operate* mutable_operate();
  void set_allocated_operate(::usp::Operate* operate);
  private:
  const ::usp::Operate& _internal_operate() const;
  ::usp::Operate* _internal_mutable_operate();
  public:
  void unsafe_arena_set_allocated_operate(
      ::usp::Operate* operate);
  ::usp::Operate* unsafe_arena_release_operate();

  // .usp.Notify notify = 8;
  bool has_notify() const;
  private:
  bool _internal_has_notify() const;
  public:
  void clear_notify();
  const ::usp::Notify& notify() const;
  ::usp::Notify* release_notify();
  ::usp::Notify* mutable_notify();
  void set_allocated_notify(::usp::Notify* notify);
  private:
  const ::usp::Notify& _internal_notify() const;
  ::usp::Notify* _internal_mutable_notify();
  public:
  void unsafe_arena_set_allocated_notify(
      ::usp::Notify* notify);
  ::usp::Notify* unsafe_arena_release_notify();

  // .usp.GetSupportedProtocol get_supported_protocol = 9;
  bool has_get_supported_protocol() const;
  private:
  bool _internal_has_get_supported_protocol() const;
  public:
  void clear_get_supported_protocol();
  const ::usp::GetSupportedProtocol& get_supported_protocol() const;
  ::usp::GetSupportedProtocol* release_get_supported_protocol();
  ::usp::GetSupportedProtocol* mutable_get_supported_protocol();
  void set_allocated_get_supported_protocol(::usp::GetSupportedProtocol* get_supported_protocol);
  private:
  const ::usp::GetSupportedProtocol& _internal_get_supported_protocol() const;
  ::usp::GetSupportedProtocol* _internal_mutable_get_supported_protocol();
  public:
  void unsafe_arena_set_allocated_get_supported_protocol(
      ::usp::GetSupportedProtocol* get_supported_protocol);
  ::usp::GetSupportedProtocol* unsafe_arena_release_get_supported_protocol();

  void clear_req_type();
  ReqTypeCase req_type_case() const;
  // @@protoc_insertion_point(class_scope:usp.Request)
 private:
  class _Internal;
  void set_has_get();
  void set_has_get_supported_dm();
  void set_has_get_instances();
  void set_has_set();
  void set_has_add();
  void set_has_delete_();
  void set_has_operate();
  void set_has_notify();
  void set_has_get_supported_protocol();

  inline bool has_req_type() const;
  inline void clear_has_req_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ReqTypeUnion {
    ReqTypeUnion() {}
    ::usp::Get* get_;
    ::usp::GetSupportedDM* get_supported_dm_;
    ::usp::GetInstances* get_instances_;
    ::usp::Set* set_;
    ::usp::Add* add_;
    ::usp::Delete* delete__;
    ::usp::Operate* operate_;
    ::usp::Notify* notify_;
    ::usp::GetSupportedProtocol* get_supported_protocol_;
  } req_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum RespTypeCase {
    kGetResp = 1,
    kGetSupportedDmResp = 2,
    kGetInstancesResp = 3,
    kSetResp = 4,
    kAddResp = 5,
    kDeleteResp = 6,
    kOperateResp = 7,
    kNotifyResp = 8,
    kGetSupportedProtocolResp = 9,
    RESP_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetRespFieldNumber = 1,
    kGetSupportedDmRespFieldNumber = 2,
    kGetInstancesRespFieldNumber = 3,
    kSetRespFieldNumber = 4,
    kAddRespFieldNumber = 5,
    kDeleteRespFieldNumber = 6,
    kOperateRespFieldNumber = 7,
    kNotifyRespFieldNumber = 8,
    kGetSupportedProtocolRespFieldNumber = 9,
  };
  // .usp.GetResp get_resp = 1;
  bool has_get_resp() const;
  private:
  bool _internal_has_get_resp() const;
  public:
  void clear_get_resp();
  const ::usp::GetResp& get_resp() const;
  ::usp::GetResp* release_get_resp();
  ::usp::GetResp* mutable_get_resp();
  void set_allocated_get_resp(::usp::GetResp* get_resp);
  private:
  const ::usp::GetResp& _internal_get_resp() const;
  ::usp::GetResp* _internal_mutable_get_resp();
  public:
  void unsafe_arena_set_allocated_get_resp(
      ::usp::GetResp* get_resp);
  ::usp::GetResp* unsafe_arena_release_get_resp();

  // .usp.GetSupportedDMResp get_supported_dm_resp = 2;
  bool has_get_supported_dm_resp() const;
  private:
  bool _internal_has_get_supported_dm_resp() const;
  public:
  void clear_get_supported_dm_resp();
  const ::usp::GetSupportedDMResp& get_supported_dm_resp() const;
  ::usp::GetSupportedDMResp* release_get_supported_dm_resp();
  ::usp::GetSupportedDMResp* mutable_get_supported_dm_resp();
  void set_allocated_get_supported_dm_resp(::usp::GetSupportedDMResp* get_supported_dm_resp);
  private:
  const ::usp::GetSupportedDMResp& _internal_get_supported_dm_resp() const;
  ::usp::GetSupportedDMResp* _internal_mutable_get_supported_dm_resp();
  public:
  void unsafe_arena_set_allocated_get_supported_dm_resp(
      ::usp::GetSupportedDMResp* get_supported_dm_resp);
  ::usp::GetSupportedDMResp* unsafe_arena_release_get_supported_dm_resp();

  // .usp.GetInstancesResp get_instances_resp = 3;
  bool has_get_instances_resp() const;
  private:
  bool _internal_has_get_instances_resp() const;
  public:
  void clear_get_instances_resp();
  const ::usp::GetInstancesResp& get_instances_resp() const;
  ::usp::GetInstancesResp* release_get_instances_resp();
  ::usp::GetInstancesResp* mutable_get_instances_resp();
  void set_allocated_get_instances_resp(::usp::GetInstancesResp* get_instances_resp);
  private:
  const ::usp::GetInstancesResp& _internal_get_instances_resp() const;
  ::usp::GetInstancesResp* _internal_mutable_get_instances_resp();
  public:
  void unsafe_arena_set_allocated_get_instances_resp(
      ::usp::GetInstancesResp* get_instances_resp);
  ::usp::GetInstancesResp* unsafe_arena_release_get_instances_resp();

  // .usp.SetResp set_resp = 4;
  bool has_set_resp() const;
  private:
  bool _internal_has_set_resp() const;
  public:
  void clear_set_resp();
  const ::usp::SetResp& set_resp() const;
  ::usp::SetResp* release_set_resp();
  ::usp::SetResp* mutable_set_resp();
  void set_allocated_set_resp(::usp::SetResp* set_resp);
  private:
  const ::usp::SetResp& _internal_set_resp() const;
  ::usp::SetResp* _internal_mutable_set_resp();
  public:
  void unsafe_arena_set_allocated_set_resp(
      ::usp::SetResp* set_resp);
  ::usp::SetResp* unsafe_arena_release_set_resp();

  // .usp.AddResp add_resp = 5;
  bool has_add_resp() const;
  private:
  bool _internal_has_add_resp() const;
  public:
  void clear_add_resp();
  const ::usp::AddResp& add_resp() const;
  ::usp::AddResp* release_add_resp();
  ::usp::AddResp* mutable_add_resp();
  void set_allocated_add_resp(::usp::AddResp* add_resp);
  private:
  const ::usp::AddResp& _internal_add_resp() const;
  ::usp::AddResp* _internal_mutable_add_resp();
  public:
  void unsafe_arena_set_allocated_add_resp(
      ::usp::AddResp* add_resp);
  ::usp::AddResp* unsafe_arena_release_add_resp();

  // .usp.DeleteResp delete_resp = 6;
  bool has_delete_resp() const;
  private:
  bool _internal_has_delete_resp() const;
  public:
  void clear_delete_resp();
  const ::usp::DeleteResp& delete_resp() const;
  ::usp::DeleteResp* release_delete_resp();
  ::usp::DeleteResp* mutable_delete_resp();
  void set_allocated_delete_resp(::usp::DeleteResp* delete_resp);
  private:
  const ::usp::DeleteResp& _internal_delete_resp() const;
  ::usp::DeleteResp* _internal_mutable_delete_resp();
  public:
  void unsafe_arena_set_allocated_delete_resp(
      ::usp::DeleteResp* delete_resp);
  ::usp::DeleteResp* unsafe_arena_release_delete_resp();

  // .usp.OperateResp operate_resp = 7;
  bool has_operate_resp() const;
  private:
  bool _internal_has_operate_resp() const;
  public:
  void clear_operate_resp();
  const ::usp::OperateResp& operate_resp() const;
  ::usp::OperateResp* release_operate_resp();
  ::usp::OperateResp* mutable_operate_resp();
  void set_allocated_operate_resp(::usp::OperateResp* operate_resp);
  private:
  const ::usp::OperateResp& _internal_operate_resp() const;
  ::usp::OperateResp* _internal_mutable_operate_resp();
  public:
  void unsafe_arena_set_allocated_operate_resp(
      ::usp::OperateResp* operate_resp);
  ::usp::OperateResp* unsafe_arena_release_operate_resp();

  // .usp.NotifyResp notify_resp = 8;
  bool has_notify_resp() const;
  private:
  bool _internal_has_notify_resp() const;
  public:
  void clear_notify_resp();
  const ::usp::NotifyResp& notify_resp() const;
  ::usp::NotifyResp* release_notify_resp();
  ::usp::NotifyResp* mutable_notify_resp();
  void set_allocated_notify_resp(::usp::NotifyResp* notify_resp);
  private:
  const ::usp::NotifyResp& _internal_notify_resp() const;
  ::usp::NotifyResp* _internal_mutable_notify_resp();
  public:
  void unsafe_arena_set_allocated_notify_resp(
      ::usp::NotifyResp* notify_resp);
  ::usp::NotifyResp* unsafe_arena_release_notify_resp();

  // .usp.GetSupportedProtocolResp get_supported_protocol_resp = 9;
  bool has_get_supported_protocol_resp() const;
  private:
  bool _internal_has_get_supported_protocol_resp() const;
  public:
  void clear_get_supported_protocol_resp();
  const ::usp::GetSupportedProtocolResp& get_supported_protocol_resp() const;
  ::usp::GetSupportedProtocolResp* release_get_supported_protocol_resp();
  ::usp::GetSupportedProtocolResp* mutable_get_supported_protocol_resp();
  void set_allocated_get_supported_protocol_resp(::usp::GetSupportedProtocolResp* get_supported_protocol_resp);
  private:
  const ::usp::GetSupportedProtocolResp& _internal_get_supported_protocol_resp() const;
  ::usp::GetSupportedProtocolResp* _internal_mutable_get_supported_protocol_resp();
  public:
  void unsafe_arena_set_allocated_get_supported_protocol_resp(
      ::usp::GetSupportedProtocolResp* get_supported_protocol_resp);
  ::usp::GetSupportedProtocolResp* unsafe_arena_release_get_supported_protocol_resp();

  void clear_resp_type();
  RespTypeCase resp_type_case() const;
  // @@protoc_insertion_point(class_scope:usp.Response)
 private:
  class _Internal;
  void set_has_get_resp();
  void set_has_get_supported_dm_resp();
  void set_has_get_instances_resp();
  void set_has_set_resp();
  void set_has_add_resp();
  void set_has_delete_resp();
  void set_has_operate_resp();
  void set_has_notify_resp();
  void set_has_get_supported_protocol_resp();

  inline bool has_resp_type() const;
  inline void clear_has_resp_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RespTypeUnion {
    RespTypeUnion() {}
    ::usp::GetResp* get_resp_;
    ::usp::GetSupportedDMResp* get_supported_dm_resp_;
    ::usp::GetInstancesResp* get_instances_resp_;
    ::usp::SetResp* set_resp_;
    ::usp::AddResp* add_resp_;
    ::usp::DeleteResp* delete_resp_;
    ::usp::OperateResp* operate_resp_;
    ::usp::NotifyResp* notify_resp_;
    ::usp::GetSupportedProtocolResp* get_supported_protocol_resp_;
  } resp_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Error_ParamError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Error.ParamError) */ {
 public:
  inline Error_ParamError() : Error_ParamError(nullptr) {}
  virtual ~Error_ParamError();

  Error_ParamError(const Error_ParamError& from);
  Error_ParamError(Error_ParamError&& from) noexcept
    : Error_ParamError() {
    *this = ::std::move(from);
  }

  inline Error_ParamError& operator=(const Error_ParamError& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_ParamError& operator=(Error_ParamError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error_ParamError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error_ParamError* internal_default_instance() {
    return reinterpret_cast<const Error_ParamError*>(
               &_Error_ParamError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Error_ParamError& a, Error_ParamError& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_ParamError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_ParamError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_ParamError* New() const final {
    return CreateMaybeMessage<Error_ParamError>(nullptr);
  }

  Error_ParamError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_ParamError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_ParamError& from);
  void MergeFrom(const Error_ParamError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_ParamError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Error.ParamError";
  }
  protected:
  explicit Error_ParamError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamPathFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // string param_path = 1;
  void clear_param_path();
  const std::string& param_path() const;
  void set_param_path(const std::string& value);
  void set_param_path(std::string&& value);
  void set_param_path(const char* value);
  void set_param_path(const char* value, size_t size);
  std::string* mutable_param_path();
  std::string* release_param_path();
  void set_allocated_param_path(std::string* param_path);
  private:
  const std::string& _internal_param_path() const;
  void _internal_set_param_path(const std::string& value);
  std::string* _internal_mutable_param_path();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Error.ParamError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Error_ParamError ParamError;

  // accessors -------------------------------------------------------

  enum : int {
    kParamErrsFieldNumber = 3,
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated .usp.Error.ParamError param_errs = 3;
  int param_errs_size() const;
  private:
  int _internal_param_errs_size() const;
  public:
  void clear_param_errs();
  ::usp::Error_ParamError* mutable_param_errs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Error_ParamError >*
      mutable_param_errs();
  private:
  const ::usp::Error_ParamError& _internal_param_errs(int index) const;
  ::usp::Error_ParamError* _internal_add_param_errs();
  public:
  const ::usp::Error_ParamError& param_errs(int index) const;
  ::usp::Error_ParamError* add_param_errs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Error_ParamError >&
      param_errs() const;

  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Error_ParamError > param_errs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Get PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Get) */ {
 public:
  inline Get() : Get(nullptr) {}
  virtual ~Get();

  Get(const Get& from);
  Get(Get&& from) noexcept
    : Get() {
    *this = ::std::move(from);
  }

  inline Get& operator=(const Get& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get& operator=(Get&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Get& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get* internal_default_instance() {
    return reinterpret_cast<const Get*>(
               &_Get_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Get& a, Get& b) {
    a.Swap(&b);
  }
  inline void Swap(Get* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Get* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Get* New() const final {
    return CreateMaybeMessage<Get>(nullptr);
  }

  Get* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Get>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Get& from);
  void MergeFrom(const Get& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Get";
  }
  protected:
  explicit Get(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamPathsFieldNumber = 1,
  };
  // repeated string param_paths = 1;
  int param_paths_size() const;
  private:
  int _internal_param_paths_size() const;
  public:
  void clear_param_paths();
  const std::string& param_paths(int index) const;
  std::string* mutable_param_paths(int index);
  void set_param_paths(int index, const std::string& value);
  void set_param_paths(int index, std::string&& value);
  void set_param_paths(int index, const char* value);
  void set_param_paths(int index, const char* value, size_t size);
  std::string* add_param_paths();
  void add_param_paths(const std::string& value);
  void add_param_paths(std::string&& value);
  void add_param_paths(const char* value);
  void add_param_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param_paths();
  private:
  const std::string& _internal_param_paths(int index) const;
  std::string* _internal_add_param_paths();
  public:

  // @@protoc_insertion_point(class_scope:usp.Get)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetResp_RequestedPathResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetResp.RequestedPathResult) */ {
 public:
  inline GetResp_RequestedPathResult() : GetResp_RequestedPathResult(nullptr) {}
  virtual ~GetResp_RequestedPathResult();

  GetResp_RequestedPathResult(const GetResp_RequestedPathResult& from);
  GetResp_RequestedPathResult(GetResp_RequestedPathResult&& from) noexcept
    : GetResp_RequestedPathResult() {
    *this = ::std::move(from);
  }

  inline GetResp_RequestedPathResult& operator=(const GetResp_RequestedPathResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResp_RequestedPathResult& operator=(GetResp_RequestedPathResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResp_RequestedPathResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResp_RequestedPathResult* internal_default_instance() {
    return reinterpret_cast<const GetResp_RequestedPathResult*>(
               &_GetResp_RequestedPathResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetResp_RequestedPathResult& a, GetResp_RequestedPathResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResp_RequestedPathResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResp_RequestedPathResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResp_RequestedPathResult* New() const final {
    return CreateMaybeMessage<GetResp_RequestedPathResult>(nullptr);
  }

  GetResp_RequestedPathResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResp_RequestedPathResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResp_RequestedPathResult& from);
  void MergeFrom(const GetResp_RequestedPathResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResp_RequestedPathResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetResp.RequestedPathResult";
  }
  protected:
  explicit GetResp_RequestedPathResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolvedPathResultsFieldNumber = 4,
    kRequestedPathFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // repeated .usp.GetResp.ResolvedPathResult resolved_path_results = 4;
  int resolved_path_results_size() const;
  private:
  int _internal_resolved_path_results_size() const;
  public:
  void clear_resolved_path_results();
  ::usp::GetResp_ResolvedPathResult* mutable_resolved_path_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_ResolvedPathResult >*
      mutable_resolved_path_results();
  private:
  const ::usp::GetResp_ResolvedPathResult& _internal_resolved_path_results(int index) const;
  ::usp::GetResp_ResolvedPathResult* _internal_add_resolved_path_results();
  public:
  const ::usp::GetResp_ResolvedPathResult& resolved_path_results(int index) const;
  ::usp::GetResp_ResolvedPathResult* add_resolved_path_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_ResolvedPathResult >&
      resolved_path_results() const;

  // string requested_path = 1;
  void clear_requested_path();
  const std::string& requested_path() const;
  void set_requested_path(const std::string& value);
  void set_requested_path(std::string&& value);
  void set_requested_path(const char* value);
  void set_requested_path(const char* value, size_t size);
  std::string* mutable_requested_path();
  std::string* release_requested_path();
  void set_allocated_requested_path(std::string* requested_path);
  private:
  const std::string& _internal_requested_path() const;
  void _internal_set_requested_path(const std::string& value);
  std::string* _internal_mutable_requested_path();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetResp.RequestedPathResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_ResolvedPathResult > resolved_path_results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse();
  explicit GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse& other);
  static const GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse*>(&_GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.GetResp.ResolvedPathResult.ResultParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.GetResp.ResolvedPathResult.ResultParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class GetResp_ResolvedPathResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetResp.ResolvedPathResult) */ {
 public:
  inline GetResp_ResolvedPathResult() : GetResp_ResolvedPathResult(nullptr) {}
  virtual ~GetResp_ResolvedPathResult();

  GetResp_ResolvedPathResult(const GetResp_ResolvedPathResult& from);
  GetResp_ResolvedPathResult(GetResp_ResolvedPathResult&& from) noexcept
    : GetResp_ResolvedPathResult() {
    *this = ::std::move(from);
  }

  inline GetResp_ResolvedPathResult& operator=(const GetResp_ResolvedPathResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResp_ResolvedPathResult& operator=(GetResp_ResolvedPathResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResp_ResolvedPathResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResp_ResolvedPathResult* internal_default_instance() {
    return reinterpret_cast<const GetResp_ResolvedPathResult*>(
               &_GetResp_ResolvedPathResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetResp_ResolvedPathResult& a, GetResp_ResolvedPathResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResp_ResolvedPathResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResp_ResolvedPathResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResp_ResolvedPathResult* New() const final {
    return CreateMaybeMessage<GetResp_ResolvedPathResult>(nullptr);
  }

  GetResp_ResolvedPathResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResp_ResolvedPathResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResp_ResolvedPathResult& from);
  void MergeFrom(const GetResp_ResolvedPathResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResp_ResolvedPathResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetResp.ResolvedPathResult";
  }
  protected:
  explicit GetResp_ResolvedPathResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultParamsFieldNumber = 2,
    kResolvedPathFieldNumber = 1,
  };
  // map<string, string> result_params = 2;
  int result_params_size() const;
  private:
  int _internal_result_params_size() const;
  public:
  void clear_result_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_result_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_result_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      result_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_result_params();

  // string resolved_path = 1;
  void clear_resolved_path();
  const std::string& resolved_path() const;
  void set_resolved_path(const std::string& value);
  void set_resolved_path(std::string&& value);
  void set_resolved_path(const char* value);
  void set_resolved_path(const char* value, size_t size);
  std::string* mutable_resolved_path();
  std::string* release_resolved_path();
  void set_allocated_resolved_path(std::string* resolved_path);
  private:
  const std::string& _internal_resolved_path() const;
  void _internal_set_resolved_path(const std::string& value);
  std::string* _internal_mutable_resolved_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetResp.ResolvedPathResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetResp_ResolvedPathResult_ResultParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > result_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolved_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetResp) */ {
 public:
  inline GetResp() : GetResp(nullptr) {}
  virtual ~GetResp();

  GetResp(const GetResp& from);
  GetResp(GetResp&& from) noexcept
    : GetResp() {
    *this = ::std::move(from);
  }

  inline GetResp& operator=(const GetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResp& operator=(GetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResp* internal_default_instance() {
    return reinterpret_cast<const GetResp*>(
               &_GetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetResp& a, GetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResp* New() const final {
    return CreateMaybeMessage<GetResp>(nullptr);
  }

  GetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResp& from);
  void MergeFrom(const GetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetResp";
  }
  protected:
  explicit GetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetResp_RequestedPathResult RequestedPathResult;
  typedef GetResp_ResolvedPathResult ResolvedPathResult;

  // accessors -------------------------------------------------------

  enum : int {
    kReqPathResultsFieldNumber = 1,
  };
  // repeated .usp.GetResp.RequestedPathResult req_path_results = 1;
  int req_path_results_size() const;
  private:
  int _internal_req_path_results_size() const;
  public:
  void clear_req_path_results();
  ::usp::GetResp_RequestedPathResult* mutable_req_path_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_RequestedPathResult >*
      mutable_req_path_results();
  private:
  const ::usp::GetResp_RequestedPathResult& _internal_req_path_results(int index) const;
  ::usp::GetResp_RequestedPathResult* _internal_add_req_path_results();
  public:
  const ::usp::GetResp_RequestedPathResult& req_path_results(int index) const;
  ::usp::GetResp_RequestedPathResult* add_req_path_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_RequestedPathResult >&
      req_path_results() const;

  // @@protoc_insertion_point(class_scope:usp.GetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_RequestedPathResult > req_path_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDM) */ {
 public:
  inline GetSupportedDM() : GetSupportedDM(nullptr) {}
  virtual ~GetSupportedDM();

  GetSupportedDM(const GetSupportedDM& from);
  GetSupportedDM(GetSupportedDM&& from) noexcept
    : GetSupportedDM() {
    *this = ::std::move(from);
  }

  inline GetSupportedDM& operator=(const GetSupportedDM& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDM& operator=(GetSupportedDM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDM* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDM*>(
               &_GetSupportedDM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSupportedDM& a, GetSupportedDM& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDM* New() const final {
    return CreateMaybeMessage<GetSupportedDM>(nullptr);
  }

  GetSupportedDM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDM& from);
  void MergeFrom(const GetSupportedDM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDM";
  }
  protected:
  explicit GetSupportedDM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPathsFieldNumber = 1,
    kFirstLevelOnlyFieldNumber = 2,
    kReturnCommandsFieldNumber = 3,
    kReturnEventsFieldNumber = 4,
    kReturnParamsFieldNumber = 5,
  };
  // repeated string obj_paths = 1;
  int obj_paths_size() const;
  private:
  int _internal_obj_paths_size() const;
  public:
  void clear_obj_paths();
  const std::string& obj_paths(int index) const;
  std::string* mutable_obj_paths(int index);
  void set_obj_paths(int index, const std::string& value);
  void set_obj_paths(int index, std::string&& value);
  void set_obj_paths(int index, const char* value);
  void set_obj_paths(int index, const char* value, size_t size);
  std::string* add_obj_paths();
  void add_obj_paths(const std::string& value);
  void add_obj_paths(std::string&& value);
  void add_obj_paths(const char* value);
  void add_obj_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obj_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obj_paths();
  private:
  const std::string& _internal_obj_paths(int index) const;
  std::string* _internal_add_obj_paths();
  public:

  // bool first_level_only = 2;
  void clear_first_level_only();
  bool first_level_only() const;
  void set_first_level_only(bool value);
  private:
  bool _internal_first_level_only() const;
  void _internal_set_first_level_only(bool value);
  public:

  // bool return_commands = 3;
  void clear_return_commands();
  bool return_commands() const;
  void set_return_commands(bool value);
  private:
  bool _internal_return_commands() const;
  void _internal_set_return_commands(bool value);
  public:

  // bool return_events = 4;
  void clear_return_events();
  bool return_events() const;
  void set_return_events(bool value);
  private:
  bool _internal_return_events() const;
  void _internal_set_return_events(bool value);
  public:

  // bool return_params = 5;
  void clear_return_params();
  bool return_params() const;
  void set_return_params(bool value);
  private:
  bool _internal_return_params() const;
  void _internal_set_return_params(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obj_paths_;
  bool first_level_only_;
  bool return_commands_;
  bool return_events_;
  bool return_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp_RequestedObjectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp.RequestedObjectResult) */ {
 public:
  inline GetSupportedDMResp_RequestedObjectResult() : GetSupportedDMResp_RequestedObjectResult(nullptr) {}
  virtual ~GetSupportedDMResp_RequestedObjectResult();

  GetSupportedDMResp_RequestedObjectResult(const GetSupportedDMResp_RequestedObjectResult& from);
  GetSupportedDMResp_RequestedObjectResult(GetSupportedDMResp_RequestedObjectResult&& from) noexcept
    : GetSupportedDMResp_RequestedObjectResult() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp_RequestedObjectResult& operator=(const GetSupportedDMResp_RequestedObjectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp_RequestedObjectResult& operator=(GetSupportedDMResp_RequestedObjectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp_RequestedObjectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp_RequestedObjectResult* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp_RequestedObjectResult*>(
               &_GetSupportedDMResp_RequestedObjectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetSupportedDMResp_RequestedObjectResult& a, GetSupportedDMResp_RequestedObjectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp_RequestedObjectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp_RequestedObjectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp_RequestedObjectResult* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp_RequestedObjectResult>(nullptr);
  }

  GetSupportedDMResp_RequestedObjectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp_RequestedObjectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp_RequestedObjectResult& from);
  void MergeFrom(const GetSupportedDMResp_RequestedObjectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp_RequestedObjectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp.RequestedObjectResult";
  }
  protected:
  explicit GetSupportedDMResp_RequestedObjectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedObjsFieldNumber = 5,
    kReqObjPathFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kDataModelInstUriFieldNumber = 4,
    kErrCodeFieldNumber = 2,
  };
  // repeated .usp.GetSupportedDMResp.SupportedObjectResult supported_objs = 5;
  int supported_objs_size() const;
  private:
  int _internal_supported_objs_size() const;
  public:
  void clear_supported_objs();
  ::usp::GetSupportedDMResp_SupportedObjectResult* mutable_supported_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedObjectResult >*
      mutable_supported_objs();
  private:
  const ::usp::GetSupportedDMResp_SupportedObjectResult& _internal_supported_objs(int index) const;
  ::usp::GetSupportedDMResp_SupportedObjectResult* _internal_add_supported_objs();
  public:
  const ::usp::GetSupportedDMResp_SupportedObjectResult& supported_objs(int index) const;
  ::usp::GetSupportedDMResp_SupportedObjectResult* add_supported_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedObjectResult >&
      supported_objs() const;

  // string req_obj_path = 1;
  void clear_req_obj_path();
  const std::string& req_obj_path() const;
  void set_req_obj_path(const std::string& value);
  void set_req_obj_path(std::string&& value);
  void set_req_obj_path(const char* value);
  void set_req_obj_path(const char* value, size_t size);
  std::string* mutable_req_obj_path();
  std::string* release_req_obj_path();
  void set_allocated_req_obj_path(std::string* req_obj_path);
  private:
  const std::string& _internal_req_obj_path() const;
  void _internal_set_req_obj_path(const std::string& value);
  std::string* _internal_mutable_req_obj_path();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // string data_model_inst_uri = 4;
  void clear_data_model_inst_uri();
  const std::string& data_model_inst_uri() const;
  void set_data_model_inst_uri(const std::string& value);
  void set_data_model_inst_uri(std::string&& value);
  void set_data_model_inst_uri(const char* value);
  void set_data_model_inst_uri(const char* value, size_t size);
  std::string* mutable_data_model_inst_uri();
  std::string* release_data_model_inst_uri();
  void set_allocated_data_model_inst_uri(std::string* data_model_inst_uri);
  private:
  const std::string& _internal_data_model_inst_uri() const;
  void _internal_set_data_model_inst_uri(const std::string& value);
  std::string* _internal_mutable_data_model_inst_uri();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp.RequestedObjectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedObjectResult > supported_objs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_obj_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_model_inst_uri_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp_SupportedObjectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp.SupportedObjectResult) */ {
 public:
  inline GetSupportedDMResp_SupportedObjectResult() : GetSupportedDMResp_SupportedObjectResult(nullptr) {}
  virtual ~GetSupportedDMResp_SupportedObjectResult();

  GetSupportedDMResp_SupportedObjectResult(const GetSupportedDMResp_SupportedObjectResult& from);
  GetSupportedDMResp_SupportedObjectResult(GetSupportedDMResp_SupportedObjectResult&& from) noexcept
    : GetSupportedDMResp_SupportedObjectResult() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp_SupportedObjectResult& operator=(const GetSupportedDMResp_SupportedObjectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp_SupportedObjectResult& operator=(GetSupportedDMResp_SupportedObjectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp_SupportedObjectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp_SupportedObjectResult* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp_SupportedObjectResult*>(
               &_GetSupportedDMResp_SupportedObjectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetSupportedDMResp_SupportedObjectResult& a, GetSupportedDMResp_SupportedObjectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp_SupportedObjectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp_SupportedObjectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp_SupportedObjectResult* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedObjectResult>(nullptr);
  }

  GetSupportedDMResp_SupportedObjectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedObjectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp_SupportedObjectResult& from);
  void MergeFrom(const GetSupportedDMResp_SupportedObjectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp_SupportedObjectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp.SupportedObjectResult";
  }
  protected:
  explicit GetSupportedDMResp_SupportedObjectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedCommandsFieldNumber = 4,
    kSupportedEventsFieldNumber = 5,
    kSupportedParamsFieldNumber = 6,
    kSupportedObjPathFieldNumber = 1,
    kAccessFieldNumber = 2,
    kIsMultiInstanceFieldNumber = 3,
  };
  // repeated .usp.GetSupportedDMResp.SupportedCommandResult supported_commands = 4;
  int supported_commands_size() const;
  private:
  int _internal_supported_commands_size() const;
  public:
  void clear_supported_commands();
  ::usp::GetSupportedDMResp_SupportedCommandResult* mutable_supported_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedCommandResult >*
      mutable_supported_commands();
  private:
  const ::usp::GetSupportedDMResp_SupportedCommandResult& _internal_supported_commands(int index) const;
  ::usp::GetSupportedDMResp_SupportedCommandResult* _internal_add_supported_commands();
  public:
  const ::usp::GetSupportedDMResp_SupportedCommandResult& supported_commands(int index) const;
  ::usp::GetSupportedDMResp_SupportedCommandResult* add_supported_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedCommandResult >&
      supported_commands() const;

  // repeated .usp.GetSupportedDMResp.SupportedEventResult supported_events = 5;
  int supported_events_size() const;
  private:
  int _internal_supported_events_size() const;
  public:
  void clear_supported_events();
  ::usp::GetSupportedDMResp_SupportedEventResult* mutable_supported_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedEventResult >*
      mutable_supported_events();
  private:
  const ::usp::GetSupportedDMResp_SupportedEventResult& _internal_supported_events(int index) const;
  ::usp::GetSupportedDMResp_SupportedEventResult* _internal_add_supported_events();
  public:
  const ::usp::GetSupportedDMResp_SupportedEventResult& supported_events(int index) const;
  ::usp::GetSupportedDMResp_SupportedEventResult* add_supported_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedEventResult >&
      supported_events() const;

  // repeated .usp.GetSupportedDMResp.SupportedParamResult supported_params = 6;
  int supported_params_size() const;
  private:
  int _internal_supported_params_size() const;
  public:
  void clear_supported_params();
  ::usp::GetSupportedDMResp_SupportedParamResult* mutable_supported_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedParamResult >*
      mutable_supported_params();
  private:
  const ::usp::GetSupportedDMResp_SupportedParamResult& _internal_supported_params(int index) const;
  ::usp::GetSupportedDMResp_SupportedParamResult* _internal_add_supported_params();
  public:
  const ::usp::GetSupportedDMResp_SupportedParamResult& supported_params(int index) const;
  ::usp::GetSupportedDMResp_SupportedParamResult* add_supported_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedParamResult >&
      supported_params() const;

  // string supported_obj_path = 1;
  void clear_supported_obj_path();
  const std::string& supported_obj_path() const;
  void set_supported_obj_path(const std::string& value);
  void set_supported_obj_path(std::string&& value);
  void set_supported_obj_path(const char* value);
  void set_supported_obj_path(const char* value, size_t size);
  std::string* mutable_supported_obj_path();
  std::string* release_supported_obj_path();
  void set_allocated_supported_obj_path(std::string* supported_obj_path);
  private:
  const std::string& _internal_supported_obj_path() const;
  void _internal_set_supported_obj_path(const std::string& value);
  std::string* _internal_mutable_supported_obj_path();
  public:

  // .usp.GetSupportedDMResp.ObjAccessType access = 2;
  void clear_access();
  ::usp::GetSupportedDMResp_ObjAccessType access() const;
  void set_access(::usp::GetSupportedDMResp_ObjAccessType value);
  private:
  ::usp::GetSupportedDMResp_ObjAccessType _internal_access() const;
  void _internal_set_access(::usp::GetSupportedDMResp_ObjAccessType value);
  public:

  // bool is_multi_instance = 3;
  void clear_is_multi_instance();
  bool is_multi_instance() const;
  void set_is_multi_instance(bool value);
  private:
  bool _internal_is_multi_instance() const;
  void _internal_set_is_multi_instance(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp.SupportedObjectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedCommandResult > supported_commands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedEventResult > supported_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedParamResult > supported_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supported_obj_path_;
  int access_;
  bool is_multi_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp_SupportedParamResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp.SupportedParamResult) */ {
 public:
  inline GetSupportedDMResp_SupportedParamResult() : GetSupportedDMResp_SupportedParamResult(nullptr) {}
  virtual ~GetSupportedDMResp_SupportedParamResult();

  GetSupportedDMResp_SupportedParamResult(const GetSupportedDMResp_SupportedParamResult& from);
  GetSupportedDMResp_SupportedParamResult(GetSupportedDMResp_SupportedParamResult&& from) noexcept
    : GetSupportedDMResp_SupportedParamResult() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp_SupportedParamResult& operator=(const GetSupportedDMResp_SupportedParamResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp_SupportedParamResult& operator=(GetSupportedDMResp_SupportedParamResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp_SupportedParamResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp_SupportedParamResult* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp_SupportedParamResult*>(
               &_GetSupportedDMResp_SupportedParamResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetSupportedDMResp_SupportedParamResult& a, GetSupportedDMResp_SupportedParamResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp_SupportedParamResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp_SupportedParamResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp_SupportedParamResult* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedParamResult>(nullptr);
  }

  GetSupportedDMResp_SupportedParamResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedParamResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp_SupportedParamResult& from);
  void MergeFrom(const GetSupportedDMResp_SupportedParamResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp_SupportedParamResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp.SupportedParamResult";
  }
  protected:
  explicit GetSupportedDMResp_SupportedParamResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kAccessFieldNumber = 2,
  };
  // string param_name = 1;
  void clear_param_name();
  const std::string& param_name() const;
  void set_param_name(const std::string& value);
  void set_param_name(std::string&& value);
  void set_param_name(const char* value);
  void set_param_name(const char* value, size_t size);
  std::string* mutable_param_name();
  std::string* release_param_name();
  void set_allocated_param_name(std::string* param_name);
  private:
  const std::string& _internal_param_name() const;
  void _internal_set_param_name(const std::string& value);
  std::string* _internal_mutable_param_name();
  public:

  // .usp.GetSupportedDMResp.ParamAccessType access = 2;
  void clear_access();
  ::usp::GetSupportedDMResp_ParamAccessType access() const;
  void set_access(::usp::GetSupportedDMResp_ParamAccessType value);
  private:
  ::usp::GetSupportedDMResp_ParamAccessType _internal_access() const;
  void _internal_set_access(::usp::GetSupportedDMResp_ParamAccessType value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp.SupportedParamResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_name_;
  int access_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp_SupportedCommandResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp.SupportedCommandResult) */ {
 public:
  inline GetSupportedDMResp_SupportedCommandResult() : GetSupportedDMResp_SupportedCommandResult(nullptr) {}
  virtual ~GetSupportedDMResp_SupportedCommandResult();

  GetSupportedDMResp_SupportedCommandResult(const GetSupportedDMResp_SupportedCommandResult& from);
  GetSupportedDMResp_SupportedCommandResult(GetSupportedDMResp_SupportedCommandResult&& from) noexcept
    : GetSupportedDMResp_SupportedCommandResult() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp_SupportedCommandResult& operator=(const GetSupportedDMResp_SupportedCommandResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp_SupportedCommandResult& operator=(GetSupportedDMResp_SupportedCommandResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp_SupportedCommandResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp_SupportedCommandResult* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp_SupportedCommandResult*>(
               &_GetSupportedDMResp_SupportedCommandResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetSupportedDMResp_SupportedCommandResult& a, GetSupportedDMResp_SupportedCommandResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp_SupportedCommandResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp_SupportedCommandResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp_SupportedCommandResult* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedCommandResult>(nullptr);
  }

  GetSupportedDMResp_SupportedCommandResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedCommandResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp_SupportedCommandResult& from);
  void MergeFrom(const GetSupportedDMResp_SupportedCommandResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp_SupportedCommandResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp.SupportedCommandResult";
  }
  protected:
  explicit GetSupportedDMResp_SupportedCommandResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputArgNamesFieldNumber = 2,
    kOutputArgNamesFieldNumber = 3,
    kCommandNameFieldNumber = 1,
  };
  // repeated string input_arg_names = 2;
  int input_arg_names_size() const;
  private:
  int _internal_input_arg_names_size() const;
  public:
  void clear_input_arg_names();
  const std::string& input_arg_names(int index) const;
  std::string* mutable_input_arg_names(int index);
  void set_input_arg_names(int index, const std::string& value);
  void set_input_arg_names(int index, std::string&& value);
  void set_input_arg_names(int index, const char* value);
  void set_input_arg_names(int index, const char* value, size_t size);
  std::string* add_input_arg_names();
  void add_input_arg_names(const std::string& value);
  void add_input_arg_names(std::string&& value);
  void add_input_arg_names(const char* value);
  void add_input_arg_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_arg_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_arg_names();
  private:
  const std::string& _internal_input_arg_names(int index) const;
  std::string* _internal_add_input_arg_names();
  public:

  // repeated string output_arg_names = 3;
  int output_arg_names_size() const;
  private:
  int _internal_output_arg_names_size() const;
  public:
  void clear_output_arg_names();
  const std::string& output_arg_names(int index) const;
  std::string* mutable_output_arg_names(int index);
  void set_output_arg_names(int index, const std::string& value);
  void set_output_arg_names(int index, std::string&& value);
  void set_output_arg_names(int index, const char* value);
  void set_output_arg_names(int index, const char* value, size_t size);
  std::string* add_output_arg_names();
  void add_output_arg_names(const std::string& value);
  void add_output_arg_names(std::string&& value);
  void add_output_arg_names(const char* value);
  void add_output_arg_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_arg_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_arg_names();
  private:
  const std::string& _internal_output_arg_names(int index) const;
  std::string* _internal_add_output_arg_names();
  public:

  // string command_name = 1;
  void clear_command_name();
  const std::string& command_name() const;
  void set_command_name(const std::string& value);
  void set_command_name(std::string&& value);
  void set_command_name(const char* value);
  void set_command_name(const char* value, size_t size);
  std::string* mutable_command_name();
  std::string* release_command_name();
  void set_allocated_command_name(std::string* command_name);
  private:
  const std::string& _internal_command_name() const;
  void _internal_set_command_name(const std::string& value);
  std::string* _internal_mutable_command_name();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp.SupportedCommandResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_arg_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_arg_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp_SupportedEventResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp.SupportedEventResult) */ {
 public:
  inline GetSupportedDMResp_SupportedEventResult() : GetSupportedDMResp_SupportedEventResult(nullptr) {}
  virtual ~GetSupportedDMResp_SupportedEventResult();

  GetSupportedDMResp_SupportedEventResult(const GetSupportedDMResp_SupportedEventResult& from);
  GetSupportedDMResp_SupportedEventResult(GetSupportedDMResp_SupportedEventResult&& from) noexcept
    : GetSupportedDMResp_SupportedEventResult() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp_SupportedEventResult& operator=(const GetSupportedDMResp_SupportedEventResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp_SupportedEventResult& operator=(GetSupportedDMResp_SupportedEventResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp_SupportedEventResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp_SupportedEventResult* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp_SupportedEventResult*>(
               &_GetSupportedDMResp_SupportedEventResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetSupportedDMResp_SupportedEventResult& a, GetSupportedDMResp_SupportedEventResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp_SupportedEventResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp_SupportedEventResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp_SupportedEventResult* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedEventResult>(nullptr);
  }

  GetSupportedDMResp_SupportedEventResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp_SupportedEventResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp_SupportedEventResult& from);
  void MergeFrom(const GetSupportedDMResp_SupportedEventResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp_SupportedEventResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp.SupportedEventResult";
  }
  protected:
  explicit GetSupportedDMResp_SupportedEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgNamesFieldNumber = 2,
    kEventNameFieldNumber = 1,
  };
  // repeated string arg_names = 2;
  int arg_names_size() const;
  private:
  int _internal_arg_names_size() const;
  public:
  void clear_arg_names();
  const std::string& arg_names(int index) const;
  std::string* mutable_arg_names(int index);
  void set_arg_names(int index, const std::string& value);
  void set_arg_names(int index, std::string&& value);
  void set_arg_names(int index, const char* value);
  void set_arg_names(int index, const char* value, size_t size);
  std::string* add_arg_names();
  void add_arg_names(const std::string& value);
  void add_arg_names(std::string&& value);
  void add_arg_names(const char* value);
  void add_arg_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arg_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arg_names();
  private:
  const std::string& _internal_arg_names(int index) const;
  std::string* _internal_add_arg_names();
  public:

  // string event_name = 1;
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp.SupportedEventResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arg_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedDMResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedDMResp) */ {
 public:
  inline GetSupportedDMResp() : GetSupportedDMResp(nullptr) {}
  virtual ~GetSupportedDMResp();

  GetSupportedDMResp(const GetSupportedDMResp& from);
  GetSupportedDMResp(GetSupportedDMResp&& from) noexcept
    : GetSupportedDMResp() {
    *this = ::std::move(from);
  }

  inline GetSupportedDMResp& operator=(const GetSupportedDMResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedDMResp& operator=(GetSupportedDMResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedDMResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedDMResp* internal_default_instance() {
    return reinterpret_cast<const GetSupportedDMResp*>(
               &_GetSupportedDMResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetSupportedDMResp& a, GetSupportedDMResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedDMResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedDMResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedDMResp* New() const final {
    return CreateMaybeMessage<GetSupportedDMResp>(nullptr);
  }

  GetSupportedDMResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedDMResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedDMResp& from);
  void MergeFrom(const GetSupportedDMResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedDMResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedDMResp";
  }
  protected:
  explicit GetSupportedDMResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSupportedDMResp_RequestedObjectResult RequestedObjectResult;
  typedef GetSupportedDMResp_SupportedObjectResult SupportedObjectResult;
  typedef GetSupportedDMResp_SupportedParamResult SupportedParamResult;
  typedef GetSupportedDMResp_SupportedCommandResult SupportedCommandResult;
  typedef GetSupportedDMResp_SupportedEventResult SupportedEventResult;

  typedef GetSupportedDMResp_ParamAccessType ParamAccessType;
  static constexpr ParamAccessType PARAM_READ_ONLY =
    GetSupportedDMResp_ParamAccessType_PARAM_READ_ONLY;
  static constexpr ParamAccessType PARAM_READ_WRITE =
    GetSupportedDMResp_ParamAccessType_PARAM_READ_WRITE;
  static constexpr ParamAccessType PARAM_WRITE_ONLY =
    GetSupportedDMResp_ParamAccessType_PARAM_WRITE_ONLY;
  static inline bool ParamAccessType_IsValid(int value) {
    return GetSupportedDMResp_ParamAccessType_IsValid(value);
  }
  static constexpr ParamAccessType ParamAccessType_MIN =
    GetSupportedDMResp_ParamAccessType_ParamAccessType_MIN;
  static constexpr ParamAccessType ParamAccessType_MAX =
    GetSupportedDMResp_ParamAccessType_ParamAccessType_MAX;
  static constexpr int ParamAccessType_ARRAYSIZE =
    GetSupportedDMResp_ParamAccessType_ParamAccessType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamAccessType_descriptor() {
    return GetSupportedDMResp_ParamAccessType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamAccessType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamAccessType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamAccessType_Name.");
    return GetSupportedDMResp_ParamAccessType_Name(enum_t_value);
  }
  static inline bool ParamAccessType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ParamAccessType* value) {
    return GetSupportedDMResp_ParamAccessType_Parse(name, value);
  }

  typedef GetSupportedDMResp_ObjAccessType ObjAccessType;
  static constexpr ObjAccessType OBJ_READ_ONLY =
    GetSupportedDMResp_ObjAccessType_OBJ_READ_ONLY;
  static constexpr ObjAccessType OBJ_ADD_DELETE =
    GetSupportedDMResp_ObjAccessType_OBJ_ADD_DELETE;
  static constexpr ObjAccessType OBJ_ADD_ONLY =
    GetSupportedDMResp_ObjAccessType_OBJ_ADD_ONLY;
  static constexpr ObjAccessType OBJ_DELETE_ONLY =
    GetSupportedDMResp_ObjAccessType_OBJ_DELETE_ONLY;
  static inline bool ObjAccessType_IsValid(int value) {
    return GetSupportedDMResp_ObjAccessType_IsValid(value);
  }
  static constexpr ObjAccessType ObjAccessType_MIN =
    GetSupportedDMResp_ObjAccessType_ObjAccessType_MIN;
  static constexpr ObjAccessType ObjAccessType_MAX =
    GetSupportedDMResp_ObjAccessType_ObjAccessType_MAX;
  static constexpr int ObjAccessType_ARRAYSIZE =
    GetSupportedDMResp_ObjAccessType_ObjAccessType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjAccessType_descriptor() {
    return GetSupportedDMResp_ObjAccessType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjAccessType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjAccessType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjAccessType_Name.");
    return GetSupportedDMResp_ObjAccessType_Name(enum_t_value);
  }
  static inline bool ObjAccessType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjAccessType* value) {
    return GetSupportedDMResp_ObjAccessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReqObjResultsFieldNumber = 1,
  };
  // repeated .usp.GetSupportedDMResp.RequestedObjectResult req_obj_results = 1;
  int req_obj_results_size() const;
  private:
  int _internal_req_obj_results_size() const;
  public:
  void clear_req_obj_results();
  ::usp::GetSupportedDMResp_RequestedObjectResult* mutable_req_obj_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_RequestedObjectResult >*
      mutable_req_obj_results();
  private:
  const ::usp::GetSupportedDMResp_RequestedObjectResult& _internal_req_obj_results(int index) const;
  ::usp::GetSupportedDMResp_RequestedObjectResult* _internal_add_req_obj_results();
  public:
  const ::usp::GetSupportedDMResp_RequestedObjectResult& req_obj_results(int index) const;
  ::usp::GetSupportedDMResp_RequestedObjectResult* add_req_obj_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_RequestedObjectResult >&
      req_obj_results() const;

  // @@protoc_insertion_point(class_scope:usp.GetSupportedDMResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_RequestedObjectResult > req_obj_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetInstances PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetInstances) */ {
 public:
  inline GetInstances() : GetInstances(nullptr) {}
  virtual ~GetInstances();

  GetInstances(const GetInstances& from);
  GetInstances(GetInstances&& from) noexcept
    : GetInstances() {
    *this = ::std::move(from);
  }

  inline GetInstances& operator=(const GetInstances& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstances& operator=(GetInstances&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstances* internal_default_instance() {
    return reinterpret_cast<const GetInstances*>(
               &_GetInstances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetInstances& a, GetInstances& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstances* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInstances* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstances* New() const final {
    return CreateMaybeMessage<GetInstances>(nullptr);
  }

  GetInstances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstances>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstances& from);
  void MergeFrom(const GetInstances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstances* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetInstances";
  }
  protected:
  explicit GetInstances(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPathsFieldNumber = 1,
    kFirstLevelOnlyFieldNumber = 2,
  };
  // repeated string obj_paths = 1;
  int obj_paths_size() const;
  private:
  int _internal_obj_paths_size() const;
  public:
  void clear_obj_paths();
  const std::string& obj_paths(int index) const;
  std::string* mutable_obj_paths(int index);
  void set_obj_paths(int index, const std::string& value);
  void set_obj_paths(int index, std::string&& value);
  void set_obj_paths(int index, const char* value);
  void set_obj_paths(int index, const char* value, size_t size);
  std::string* add_obj_paths();
  void add_obj_paths(const std::string& value);
  void add_obj_paths(std::string&& value);
  void add_obj_paths(const char* value);
  void add_obj_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obj_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obj_paths();
  private:
  const std::string& _internal_obj_paths(int index) const;
  std::string* _internal_add_obj_paths();
  public:

  // bool first_level_only = 2;
  void clear_first_level_only();
  bool first_level_only() const;
  void set_first_level_only(bool value);
  private:
  bool _internal_first_level_only() const;
  void _internal_set_first_level_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetInstances)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obj_paths_;
  bool first_level_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetInstancesResp_RequestedPathResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetInstancesResp.RequestedPathResult) */ {
 public:
  inline GetInstancesResp_RequestedPathResult() : GetInstancesResp_RequestedPathResult(nullptr) {}
  virtual ~GetInstancesResp_RequestedPathResult();

  GetInstancesResp_RequestedPathResult(const GetInstancesResp_RequestedPathResult& from);
  GetInstancesResp_RequestedPathResult(GetInstancesResp_RequestedPathResult&& from) noexcept
    : GetInstancesResp_RequestedPathResult() {
    *this = ::std::move(from);
  }

  inline GetInstancesResp_RequestedPathResult& operator=(const GetInstancesResp_RequestedPathResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstancesResp_RequestedPathResult& operator=(GetInstancesResp_RequestedPathResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstancesResp_RequestedPathResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstancesResp_RequestedPathResult* internal_default_instance() {
    return reinterpret_cast<const GetInstancesResp_RequestedPathResult*>(
               &_GetInstancesResp_RequestedPathResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetInstancesResp_RequestedPathResult& a, GetInstancesResp_RequestedPathResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstancesResp_RequestedPathResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInstancesResp_RequestedPathResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstancesResp_RequestedPathResult* New() const final {
    return CreateMaybeMessage<GetInstancesResp_RequestedPathResult>(nullptr);
  }

  GetInstancesResp_RequestedPathResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstancesResp_RequestedPathResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstancesResp_RequestedPathResult& from);
  void MergeFrom(const GetInstancesResp_RequestedPathResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstancesResp_RequestedPathResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetInstancesResp.RequestedPathResult";
  }
  protected:
  explicit GetInstancesResp_RequestedPathResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrInstsFieldNumber = 4,
    kRequestedPathFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // repeated .usp.GetInstancesResp.CurrInstance curr_insts = 4;
  int curr_insts_size() const;
  private:
  int _internal_curr_insts_size() const;
  public:
  void clear_curr_insts();
  ::usp::GetInstancesResp_CurrInstance* mutable_curr_insts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_CurrInstance >*
      mutable_curr_insts();
  private:
  const ::usp::GetInstancesResp_CurrInstance& _internal_curr_insts(int index) const;
  ::usp::GetInstancesResp_CurrInstance* _internal_add_curr_insts();
  public:
  const ::usp::GetInstancesResp_CurrInstance& curr_insts(int index) const;
  ::usp::GetInstancesResp_CurrInstance* add_curr_insts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_CurrInstance >&
      curr_insts() const;

  // string requested_path = 1;
  void clear_requested_path();
  const std::string& requested_path() const;
  void set_requested_path(const std::string& value);
  void set_requested_path(std::string&& value);
  void set_requested_path(const char* value);
  void set_requested_path(const char* value, size_t size);
  std::string* mutable_requested_path();
  std::string* release_requested_path();
  void set_allocated_requested_path(std::string* requested_path);
  private:
  const std::string& _internal_requested_path() const;
  void _internal_set_requested_path(const std::string& value);
  std::string* _internal_mutable_requested_path();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.GetInstancesResp.RequestedPathResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_CurrInstance > curr_insts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse();
  explicit GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse& other);
  static const GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse*>(&_GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.GetInstancesResp.CurrInstance.UniqueKeysEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.GetInstancesResp.CurrInstance.UniqueKeysEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class GetInstancesResp_CurrInstance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetInstancesResp.CurrInstance) */ {
 public:
  inline GetInstancesResp_CurrInstance() : GetInstancesResp_CurrInstance(nullptr) {}
  virtual ~GetInstancesResp_CurrInstance();

  GetInstancesResp_CurrInstance(const GetInstancesResp_CurrInstance& from);
  GetInstancesResp_CurrInstance(GetInstancesResp_CurrInstance&& from) noexcept
    : GetInstancesResp_CurrInstance() {
    *this = ::std::move(from);
  }

  inline GetInstancesResp_CurrInstance& operator=(const GetInstancesResp_CurrInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstancesResp_CurrInstance& operator=(GetInstancesResp_CurrInstance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstancesResp_CurrInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstancesResp_CurrInstance* internal_default_instance() {
    return reinterpret_cast<const GetInstancesResp_CurrInstance*>(
               &_GetInstancesResp_CurrInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetInstancesResp_CurrInstance& a, GetInstancesResp_CurrInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstancesResp_CurrInstance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInstancesResp_CurrInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstancesResp_CurrInstance* New() const final {
    return CreateMaybeMessage<GetInstancesResp_CurrInstance>(nullptr);
  }

  GetInstancesResp_CurrInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstancesResp_CurrInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstancesResp_CurrInstance& from);
  void MergeFrom(const GetInstancesResp_CurrInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstancesResp_CurrInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetInstancesResp.CurrInstance";
  }
  protected:
  explicit GetInstancesResp_CurrInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUniqueKeysFieldNumber = 2,
    kInstantiatedObjPathFieldNumber = 1,
  };
  // map<string, string> unique_keys = 2;
  int unique_keys_size() const;
  private:
  int _internal_unique_keys_size() const;
  public:
  void clear_unique_keys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_unique_keys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_unique_keys();

  // string instantiated_obj_path = 1;
  void clear_instantiated_obj_path();
  const std::string& instantiated_obj_path() const;
  void set_instantiated_obj_path(const std::string& value);
  void set_instantiated_obj_path(std::string&& value);
  void set_instantiated_obj_path(const char* value);
  void set_instantiated_obj_path(const char* value, size_t size);
  std::string* mutable_instantiated_obj_path();
  std::string* release_instantiated_obj_path();
  void set_allocated_instantiated_obj_path(std::string* instantiated_obj_path);
  private:
  const std::string& _internal_instantiated_obj_path() const;
  void _internal_set_instantiated_obj_path(const std::string& value);
  std::string* _internal_mutable_instantiated_obj_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetInstancesResp.CurrInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetInstancesResp_CurrInstance_UniqueKeysEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > unique_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instantiated_obj_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetInstancesResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetInstancesResp) */ {
 public:
  inline GetInstancesResp() : GetInstancesResp(nullptr) {}
  virtual ~GetInstancesResp();

  GetInstancesResp(const GetInstancesResp& from);
  GetInstancesResp(GetInstancesResp&& from) noexcept
    : GetInstancesResp() {
    *this = ::std::move(from);
  }

  inline GetInstancesResp& operator=(const GetInstancesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstancesResp& operator=(GetInstancesResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstancesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstancesResp* internal_default_instance() {
    return reinterpret_cast<const GetInstancesResp*>(
               &_GetInstancesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetInstancesResp& a, GetInstancesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstancesResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInstancesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstancesResp* New() const final {
    return CreateMaybeMessage<GetInstancesResp>(nullptr);
  }

  GetInstancesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstancesResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstancesResp& from);
  void MergeFrom(const GetInstancesResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstancesResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetInstancesResp";
  }
  protected:
  explicit GetInstancesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetInstancesResp_RequestedPathResult RequestedPathResult;
  typedef GetInstancesResp_CurrInstance CurrInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kReqPathResultsFieldNumber = 1,
  };
  // repeated .usp.GetInstancesResp.RequestedPathResult req_path_results = 1;
  int req_path_results_size() const;
  private:
  int _internal_req_path_results_size() const;
  public:
  void clear_req_path_results();
  ::usp::GetInstancesResp_RequestedPathResult* mutable_req_path_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_RequestedPathResult >*
      mutable_req_path_results();
  private:
  const ::usp::GetInstancesResp_RequestedPathResult& _internal_req_path_results(int index) const;
  ::usp::GetInstancesResp_RequestedPathResult* _internal_add_req_path_results();
  public:
  const ::usp::GetInstancesResp_RequestedPathResult& req_path_results(int index) const;
  ::usp::GetInstancesResp_RequestedPathResult* add_req_path_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_RequestedPathResult >&
      req_path_results() const;

  // @@protoc_insertion_point(class_scope:usp.GetInstancesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_RequestedPathResult > req_path_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedProtocol) */ {
 public:
  inline GetSupportedProtocol() : GetSupportedProtocol(nullptr) {}
  virtual ~GetSupportedProtocol();

  GetSupportedProtocol(const GetSupportedProtocol& from);
  GetSupportedProtocol(GetSupportedProtocol&& from) noexcept
    : GetSupportedProtocol() {
    *this = ::std::move(from);
  }

  inline GetSupportedProtocol& operator=(const GetSupportedProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedProtocol& operator=(GetSupportedProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedProtocol* internal_default_instance() {
    return reinterpret_cast<const GetSupportedProtocol*>(
               &_GetSupportedProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetSupportedProtocol& a, GetSupportedProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedProtocol* New() const final {
    return CreateMaybeMessage<GetSupportedProtocol>(nullptr);
  }

  GetSupportedProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedProtocol& from);
  void MergeFrom(const GetSupportedProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedProtocol";
  }
  protected:
  explicit GetSupportedProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerSupportedProtocolVersionsFieldNumber = 1,
  };
  // string controller_supported_protocol_versions = 1;
  void clear_controller_supported_protocol_versions();
  const std::string& controller_supported_protocol_versions() const;
  void set_controller_supported_protocol_versions(const std::string& value);
  void set_controller_supported_protocol_versions(std::string&& value);
  void set_controller_supported_protocol_versions(const char* value);
  void set_controller_supported_protocol_versions(const char* value, size_t size);
  std::string* mutable_controller_supported_protocol_versions();
  std::string* release_controller_supported_protocol_versions();
  void set_allocated_controller_supported_protocol_versions(std::string* controller_supported_protocol_versions);
  private:
  const std::string& _internal_controller_supported_protocol_versions() const;
  void _internal_set_controller_supported_protocol_versions(const std::string& value);
  std::string* _internal_mutable_controller_supported_protocol_versions();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_supported_protocol_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedProtocolResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.GetSupportedProtocolResp) */ {
 public:
  inline GetSupportedProtocolResp() : GetSupportedProtocolResp(nullptr) {}
  virtual ~GetSupportedProtocolResp();

  GetSupportedProtocolResp(const GetSupportedProtocolResp& from);
  GetSupportedProtocolResp(GetSupportedProtocolResp&& from) noexcept
    : GetSupportedProtocolResp() {
    *this = ::std::move(from);
  }

  inline GetSupportedProtocolResp& operator=(const GetSupportedProtocolResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedProtocolResp& operator=(GetSupportedProtocolResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedProtocolResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportedProtocolResp* internal_default_instance() {
    return reinterpret_cast<const GetSupportedProtocolResp*>(
               &_GetSupportedProtocolResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetSupportedProtocolResp& a, GetSupportedProtocolResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedProtocolResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedProtocolResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedProtocolResp* New() const final {
    return CreateMaybeMessage<GetSupportedProtocolResp>(nullptr);
  }

  GetSupportedProtocolResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedProtocolResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedProtocolResp& from);
  void MergeFrom(const GetSupportedProtocolResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedProtocolResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.GetSupportedProtocolResp";
  }
  protected:
  explicit GetSupportedProtocolResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentSupportedProtocolVersionsFieldNumber = 1,
  };
  // string agent_supported_protocol_versions = 1;
  void clear_agent_supported_protocol_versions();
  const std::string& agent_supported_protocol_versions() const;
  void set_agent_supported_protocol_versions(const std::string& value);
  void set_agent_supported_protocol_versions(std::string&& value);
  void set_agent_supported_protocol_versions(const char* value);
  void set_agent_supported_protocol_versions(const char* value, size_t size);
  std::string* mutable_agent_supported_protocol_versions();
  std::string* release_agent_supported_protocol_versions();
  void set_allocated_agent_supported_protocol_versions(std::string* agent_supported_protocol_versions);
  private:
  const std::string& _internal_agent_supported_protocol_versions() const;
  void _internal_set_agent_supported_protocol_versions(const std::string& value);
  std::string* _internal_mutable_agent_supported_protocol_versions();
  public:

  // @@protoc_insertion_point(class_scope:usp.GetSupportedProtocolResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_supported_protocol_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Add_CreateObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Add.CreateObject) */ {
 public:
  inline Add_CreateObject() : Add_CreateObject(nullptr) {}
  virtual ~Add_CreateObject();

  Add_CreateObject(const Add_CreateObject& from);
  Add_CreateObject(Add_CreateObject&& from) noexcept
    : Add_CreateObject() {
    *this = ::std::move(from);
  }

  inline Add_CreateObject& operator=(const Add_CreateObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline Add_CreateObject& operator=(Add_CreateObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Add_CreateObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Add_CreateObject* internal_default_instance() {
    return reinterpret_cast<const Add_CreateObject*>(
               &_Add_CreateObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Add_CreateObject& a, Add_CreateObject& b) {
    a.Swap(&b);
  }
  inline void Swap(Add_CreateObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Add_CreateObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Add_CreateObject* New() const final {
    return CreateMaybeMessage<Add_CreateObject>(nullptr);
  }

  Add_CreateObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Add_CreateObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Add_CreateObject& from);
  void MergeFrom(const Add_CreateObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Add_CreateObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Add.CreateObject";
  }
  protected:
  explicit Add_CreateObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamSettingsFieldNumber = 2,
    kObjPathFieldNumber = 1,
  };
  // repeated .usp.Add.CreateParamSetting param_settings = 2;
  int param_settings_size() const;
  private:
  int _internal_param_settings_size() const;
  public:
  void clear_param_settings();
  ::usp::Add_CreateParamSetting* mutable_param_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateParamSetting >*
      mutable_param_settings();
  private:
  const ::usp::Add_CreateParamSetting& _internal_param_settings(int index) const;
  ::usp::Add_CreateParamSetting* _internal_add_param_settings();
  public:
  const ::usp::Add_CreateParamSetting& param_settings(int index) const;
  ::usp::Add_CreateParamSetting* add_param_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateParamSetting >&
      param_settings() const;

  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.Add.CreateObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateParamSetting > param_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Add_CreateParamSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Add.CreateParamSetting) */ {
 public:
  inline Add_CreateParamSetting() : Add_CreateParamSetting(nullptr) {}
  virtual ~Add_CreateParamSetting();

  Add_CreateParamSetting(const Add_CreateParamSetting& from);
  Add_CreateParamSetting(Add_CreateParamSetting&& from) noexcept
    : Add_CreateParamSetting() {
    *this = ::std::move(from);
  }

  inline Add_CreateParamSetting& operator=(const Add_CreateParamSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Add_CreateParamSetting& operator=(Add_CreateParamSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Add_CreateParamSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Add_CreateParamSetting* internal_default_instance() {
    return reinterpret_cast<const Add_CreateParamSetting*>(
               &_Add_CreateParamSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Add_CreateParamSetting& a, Add_CreateParamSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(Add_CreateParamSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Add_CreateParamSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Add_CreateParamSetting* New() const final {
    return CreateMaybeMessage<Add_CreateParamSetting>(nullptr);
  }

  Add_CreateParamSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Add_CreateParamSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Add_CreateParamSetting& from);
  void MergeFrom(const Add_CreateParamSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Add_CreateParamSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Add.CreateParamSetting";
  }
  protected:
  explicit Add_CreateParamSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kValueFieldNumber = 2,
    kRequiredFieldNumber = 3,
  };
  // string param = 1;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool required = 3;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Add.CreateParamSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Add PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Add) */ {
 public:
  inline Add() : Add(nullptr) {}
  virtual ~Add();

  Add(const Add& from);
  Add(Add&& from) noexcept
    : Add() {
    *this = ::std::move(from);
  }

  inline Add& operator=(const Add& from) {
    CopyFrom(from);
    return *this;
  }
  inline Add& operator=(Add&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Add* internal_default_instance() {
    return reinterpret_cast<const Add*>(
               &_Add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Add& a, Add& b) {
    a.Swap(&b);
  }
  inline void Swap(Add* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Add* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Add* New() const final {
    return CreateMaybeMessage<Add>(nullptr);
  }

  Add* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Add>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Add& from);
  void MergeFrom(const Add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Add* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Add";
  }
  protected:
  explicit Add(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Add_CreateObject CreateObject;
  typedef Add_CreateParamSetting CreateParamSetting;

  // accessors -------------------------------------------------------

  enum : int {
    kCreateObjsFieldNumber = 2,
    kAllowPartialFieldNumber = 1,
  };
  // repeated .usp.Add.CreateObject create_objs = 2;
  int create_objs_size() const;
  private:
  int _internal_create_objs_size() const;
  public:
  void clear_create_objs();
  ::usp::Add_CreateObject* mutable_create_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateObject >*
      mutable_create_objs();
  private:
  const ::usp::Add_CreateObject& _internal_create_objs(int index) const;
  ::usp::Add_CreateObject* _internal_add_create_objs();
  public:
  const ::usp::Add_CreateObject& create_objs(int index) const;
  ::usp::Add_CreateObject* add_create_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateObject >&
      create_objs() const;

  // bool allow_partial = 1;
  void clear_allow_partial();
  bool allow_partial() const;
  void set_allow_partial(bool value);
  private:
  bool _internal_allow_partial() const;
  void _internal_set_allow_partial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Add)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateObject > create_objs_;
  bool allow_partial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp_CreatedObjectResult_OperationStatus_OperationFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure) */ {
 public:
  inline AddResp_CreatedObjectResult_OperationStatus_OperationFailure() : AddResp_CreatedObjectResult_OperationStatus_OperationFailure(nullptr) {}
  virtual ~AddResp_CreatedObjectResult_OperationStatus_OperationFailure();

  AddResp_CreatedObjectResult_OperationStatus_OperationFailure(const AddResp_CreatedObjectResult_OperationStatus_OperationFailure& from);
  AddResp_CreatedObjectResult_OperationStatus_OperationFailure(AddResp_CreatedObjectResult_OperationStatus_OperationFailure&& from) noexcept
    : AddResp_CreatedObjectResult_OperationStatus_OperationFailure() {
    *this = ::std::move(from);
  }

  inline AddResp_CreatedObjectResult_OperationStatus_OperationFailure& operator=(const AddResp_CreatedObjectResult_OperationStatus_OperationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp_CreatedObjectResult_OperationStatus_OperationFailure& operator=(AddResp_CreatedObjectResult_OperationStatus_OperationFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp_CreatedObjectResult_OperationStatus_OperationFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp_CreatedObjectResult_OperationStatus_OperationFailure* internal_default_instance() {
    return reinterpret_cast<const AddResp_CreatedObjectResult_OperationStatus_OperationFailure*>(
               &_AddResp_CreatedObjectResult_OperationStatus_OperationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AddResp_CreatedObjectResult_OperationStatus_OperationFailure& a, AddResp_CreatedObjectResult_OperationStatus_OperationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp_CreatedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp_CreatedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp_CreatedObjectResult_OperationStatus_OperationFailure* New() const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus_OperationFailure>(nullptr);
  }

  AddResp_CreatedObjectResult_OperationStatus_OperationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus_OperationFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp_CreatedObjectResult_OperationStatus_OperationFailure& from);
  void MergeFrom(const AddResp_CreatedObjectResult_OperationStatus_OperationFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp_CreatedObjectResult_OperationStatus_OperationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure";
  }
  protected:
  explicit AddResp_CreatedObjectResult_OperationStatus_OperationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse();
  explicit AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse& other);
  static const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse*>(&_AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.UniqueKeysEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.UniqueKeysEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[30];
  }

  public:
};

// -------------------------------------------------------------------

class AddResp_CreatedObjectResult_OperationStatus_OperationSuccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess) */ {
 public:
  inline AddResp_CreatedObjectResult_OperationStatus_OperationSuccess() : AddResp_CreatedObjectResult_OperationStatus_OperationSuccess(nullptr) {}
  virtual ~AddResp_CreatedObjectResult_OperationStatus_OperationSuccess();

  AddResp_CreatedObjectResult_OperationStatus_OperationSuccess(const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& from);
  AddResp_CreatedObjectResult_OperationStatus_OperationSuccess(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess&& from) noexcept
    : AddResp_CreatedObjectResult_OperationStatus_OperationSuccess() {
    *this = ::std::move(from);
  }

  inline AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& operator=(const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& operator=(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* internal_default_instance() {
    return reinterpret_cast<const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess*>(
               &_AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& a, AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* New() const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus_OperationSuccess>(nullptr);
  }

  AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus_OperationSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& from);
  void MergeFrom(const AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess";
  }
  protected:
  explicit AddResp_CreatedObjectResult_OperationStatus_OperationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamErrsFieldNumber = 2,
    kUniqueKeysFieldNumber = 3,
    kInstantiatedPathFieldNumber = 1,
  };
  // repeated .usp.AddResp.ParameterError param_errs = 2;
  int param_errs_size() const;
  private:
  int _internal_param_errs_size() const;
  public:
  void clear_param_errs();
  ::usp::AddResp_ParameterError* mutable_param_errs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_ParameterError >*
      mutable_param_errs();
  private:
  const ::usp::AddResp_ParameterError& _internal_param_errs(int index) const;
  ::usp::AddResp_ParameterError* _internal_add_param_errs();
  public:
  const ::usp::AddResp_ParameterError& param_errs(int index) const;
  ::usp::AddResp_ParameterError* add_param_errs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_ParameterError >&
      param_errs() const;

  // map<string, string> unique_keys = 3;
  int unique_keys_size() const;
  private:
  int _internal_unique_keys_size() const;
  public:
  void clear_unique_keys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_unique_keys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_unique_keys();

  // string instantiated_path = 1;
  void clear_instantiated_path();
  const std::string& instantiated_path() const;
  void set_instantiated_path(const std::string& value);
  void set_instantiated_path(std::string&& value);
  void set_instantiated_path(const char* value);
  void set_instantiated_path(const char* value, size_t size);
  std::string* mutable_instantiated_path();
  std::string* release_instantiated_path();
  void set_allocated_instantiated_path(std::string* instantiated_path);
  private:
  const std::string& _internal_instantiated_path() const;
  void _internal_set_instantiated_path(const std::string& value);
  std::string* _internal_mutable_instantiated_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_ParameterError > param_errs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_UniqueKeysEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > unique_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instantiated_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp_CreatedObjectResult_OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp.CreatedObjectResult.OperationStatus) */ {
 public:
  inline AddResp_CreatedObjectResult_OperationStatus() : AddResp_CreatedObjectResult_OperationStatus(nullptr) {}
  virtual ~AddResp_CreatedObjectResult_OperationStatus();

  AddResp_CreatedObjectResult_OperationStatus(const AddResp_CreatedObjectResult_OperationStatus& from);
  AddResp_CreatedObjectResult_OperationStatus(AddResp_CreatedObjectResult_OperationStatus&& from) noexcept
    : AddResp_CreatedObjectResult_OperationStatus() {
    *this = ::std::move(from);
  }

  inline AddResp_CreatedObjectResult_OperationStatus& operator=(const AddResp_CreatedObjectResult_OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp_CreatedObjectResult_OperationStatus& operator=(AddResp_CreatedObjectResult_OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp_CreatedObjectResult_OperationStatus& default_instance();

  enum OperStatusCase {
    kOperFailure = 1,
    kOperSuccess = 2,
    OPER_STATUS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp_CreatedObjectResult_OperationStatus* internal_default_instance() {
    return reinterpret_cast<const AddResp_CreatedObjectResult_OperationStatus*>(
               &_AddResp_CreatedObjectResult_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AddResp_CreatedObjectResult_OperationStatus& a, AddResp_CreatedObjectResult_OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp_CreatedObjectResult_OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp_CreatedObjectResult_OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp_CreatedObjectResult_OperationStatus* New() const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus>(nullptr);
  }

  AddResp_CreatedObjectResult_OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult_OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp_CreatedObjectResult_OperationStatus& from);
  void MergeFrom(const AddResp_CreatedObjectResult_OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp_CreatedObjectResult_OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp.CreatedObjectResult.OperationStatus";
  }
  protected:
  explicit AddResp_CreatedObjectResult_OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddResp_CreatedObjectResult_OperationStatus_OperationFailure OperationFailure;
  typedef AddResp_CreatedObjectResult_OperationStatus_OperationSuccess OperationSuccess;

  // accessors -------------------------------------------------------

  enum : int {
    kOperFailureFieldNumber = 1,
    kOperSuccessFieldNumber = 2,
  };
  // .usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
  bool has_oper_failure() const;
  private:
  bool _internal_has_oper_failure() const;
  public:
  void clear_oper_failure();
  const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure& oper_failure() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* release_oper_failure();
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* mutable_oper_failure();
  void set_allocated_oper_failure(::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* oper_failure);
  private:
  const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure& _internal_oper_failure() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* _internal_mutable_oper_failure();
  public:
  void unsafe_arena_set_allocated_oper_failure(
      ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* oper_failure);
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* unsafe_arena_release_oper_failure();

  // .usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
  bool has_oper_success() const;
  private:
  bool _internal_has_oper_success() const;
  public:
  void clear_oper_success();
  const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& oper_success() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* release_oper_success();
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* mutable_oper_success();
  void set_allocated_oper_success(::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* oper_success);
  private:
  const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& _internal_oper_success() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* _internal_mutable_oper_success();
  public:
  void unsafe_arena_set_allocated_oper_success(
      ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* oper_success);
  ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* unsafe_arena_release_oper_success();

  void clear_oper_status();
  OperStatusCase oper_status_case() const;
  // @@protoc_insertion_point(class_scope:usp.AddResp.CreatedObjectResult.OperationStatus)
 private:
  class _Internal;
  void set_has_oper_failure();
  void set_has_oper_success();

  inline bool has_oper_status() const;
  inline void clear_has_oper_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperStatusUnion {
    OperStatusUnion() {}
    ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* oper_failure_;
    ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* oper_success_;
  } oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp_CreatedObjectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp.CreatedObjectResult) */ {
 public:
  inline AddResp_CreatedObjectResult() : AddResp_CreatedObjectResult(nullptr) {}
  virtual ~AddResp_CreatedObjectResult();

  AddResp_CreatedObjectResult(const AddResp_CreatedObjectResult& from);
  AddResp_CreatedObjectResult(AddResp_CreatedObjectResult&& from) noexcept
    : AddResp_CreatedObjectResult() {
    *this = ::std::move(from);
  }

  inline AddResp_CreatedObjectResult& operator=(const AddResp_CreatedObjectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp_CreatedObjectResult& operator=(AddResp_CreatedObjectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp_CreatedObjectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp_CreatedObjectResult* internal_default_instance() {
    return reinterpret_cast<const AddResp_CreatedObjectResult*>(
               &_AddResp_CreatedObjectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AddResp_CreatedObjectResult& a, AddResp_CreatedObjectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp_CreatedObjectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp_CreatedObjectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp_CreatedObjectResult* New() const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult>(nullptr);
  }

  AddResp_CreatedObjectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp_CreatedObjectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp_CreatedObjectResult& from);
  void MergeFrom(const AddResp_CreatedObjectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp_CreatedObjectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp.CreatedObjectResult";
  }
  protected:
  explicit AddResp_CreatedObjectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddResp_CreatedObjectResult_OperationStatus OperationStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestedPathFieldNumber = 1,
    kOperStatusFieldNumber = 2,
  };
  // string requested_path = 1;
  void clear_requested_path();
  const std::string& requested_path() const;
  void set_requested_path(const std::string& value);
  void set_requested_path(std::string&& value);
  void set_requested_path(const char* value);
  void set_requested_path(const char* value, size_t size);
  std::string* mutable_requested_path();
  std::string* release_requested_path();
  void set_allocated_requested_path(std::string* requested_path);
  private:
  const std::string& _internal_requested_path() const;
  void _internal_set_requested_path(const std::string& value);
  std::string* _internal_mutable_requested_path();
  public:

  // .usp.AddResp.CreatedObjectResult.OperationStatus oper_status = 2;
  bool has_oper_status() const;
  private:
  bool _internal_has_oper_status() const;
  public:
  void clear_oper_status();
  const ::usp::AddResp_CreatedObjectResult_OperationStatus& oper_status() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus* release_oper_status();
  ::usp::AddResp_CreatedObjectResult_OperationStatus* mutable_oper_status();
  void set_allocated_oper_status(::usp::AddResp_CreatedObjectResult_OperationStatus* oper_status);
  private:
  const ::usp::AddResp_CreatedObjectResult_OperationStatus& _internal_oper_status() const;
  ::usp::AddResp_CreatedObjectResult_OperationStatus* _internal_mutable_oper_status();
  public:
  void unsafe_arena_set_allocated_oper_status(
      ::usp::AddResp_CreatedObjectResult_OperationStatus* oper_status);
  ::usp::AddResp_CreatedObjectResult_OperationStatus* unsafe_arena_release_oper_status();

  // @@protoc_insertion_point(class_scope:usp.AddResp.CreatedObjectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_path_;
  ::usp::AddResp_CreatedObjectResult_OperationStatus* oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp_ParameterError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp.ParameterError) */ {
 public:
  inline AddResp_ParameterError() : AddResp_ParameterError(nullptr) {}
  virtual ~AddResp_ParameterError();

  AddResp_ParameterError(const AddResp_ParameterError& from);
  AddResp_ParameterError(AddResp_ParameterError&& from) noexcept
    : AddResp_ParameterError() {
    *this = ::std::move(from);
  }

  inline AddResp_ParameterError& operator=(const AddResp_ParameterError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp_ParameterError& operator=(AddResp_ParameterError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp_ParameterError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp_ParameterError* internal_default_instance() {
    return reinterpret_cast<const AddResp_ParameterError*>(
               &_AddResp_ParameterError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AddResp_ParameterError& a, AddResp_ParameterError& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp_ParameterError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp_ParameterError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp_ParameterError* New() const final {
    return CreateMaybeMessage<AddResp_ParameterError>(nullptr);
  }

  AddResp_ParameterError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp_ParameterError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp_ParameterError& from);
  void MergeFrom(const AddResp_ParameterError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp_ParameterError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp.ParameterError";
  }
  protected:
  explicit AddResp_ParameterError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // string param = 1;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.AddResp.ParameterError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class AddResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.AddResp) */ {
 public:
  inline AddResp() : AddResp(nullptr) {}
  virtual ~AddResp();

  AddResp(const AddResp& from);
  AddResp(AddResp&& from) noexcept
    : AddResp() {
    *this = ::std::move(from);
  }

  inline AddResp& operator=(const AddResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResp& operator=(AddResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResp* internal_default_instance() {
    return reinterpret_cast<const AddResp*>(
               &_AddResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AddResp& a, AddResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResp* New() const final {
    return CreateMaybeMessage<AddResp>(nullptr);
  }

  AddResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResp& from);
  void MergeFrom(const AddResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.AddResp";
  }
  protected:
  explicit AddResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddResp_CreatedObjectResult CreatedObjectResult;
  typedef AddResp_ParameterError ParameterError;

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedObjResultsFieldNumber = 1,
  };
  // repeated .usp.AddResp.CreatedObjectResult created_obj_results = 1;
  int created_obj_results_size() const;
  private:
  int _internal_created_obj_results_size() const;
  public:
  void clear_created_obj_results();
  ::usp::AddResp_CreatedObjectResult* mutable_created_obj_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_CreatedObjectResult >*
      mutable_created_obj_results();
  private:
  const ::usp::AddResp_CreatedObjectResult& _internal_created_obj_results(int index) const;
  ::usp::AddResp_CreatedObjectResult* _internal_add_created_obj_results();
  public:
  const ::usp::AddResp_CreatedObjectResult& created_obj_results(int index) const;
  ::usp::AddResp_CreatedObjectResult* add_created_obj_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_CreatedObjectResult >&
      created_obj_results() const;

  // @@protoc_insertion_point(class_scope:usp.AddResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_CreatedObjectResult > created_obj_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Delete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Delete) */ {
 public:
  inline Delete() : Delete(nullptr) {}
  virtual ~Delete();

  Delete(const Delete& from);
  Delete(Delete&& from) noexcept
    : Delete() {
    *this = ::std::move(from);
  }

  inline Delete& operator=(const Delete& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delete& operator=(Delete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delete* internal_default_instance() {
    return reinterpret_cast<const Delete*>(
               &_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Delete& a, Delete& b) {
    a.Swap(&b);
  }
  inline void Swap(Delete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delete* New() const final {
    return CreateMaybeMessage<Delete>(nullptr);
  }

  Delete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delete& from);
  void MergeFrom(const Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Delete";
  }
  protected:
  explicit Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPathsFieldNumber = 2,
    kAllowPartialFieldNumber = 1,
  };
  // repeated string obj_paths = 2;
  int obj_paths_size() const;
  private:
  int _internal_obj_paths_size() const;
  public:
  void clear_obj_paths();
  const std::string& obj_paths(int index) const;
  std::string* mutable_obj_paths(int index);
  void set_obj_paths(int index, const std::string& value);
  void set_obj_paths(int index, std::string&& value);
  void set_obj_paths(int index, const char* value);
  void set_obj_paths(int index, const char* value, size_t size);
  std::string* add_obj_paths();
  void add_obj_paths(const std::string& value);
  void add_obj_paths(std::string&& value);
  void add_obj_paths(const char* value);
  void add_obj_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obj_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obj_paths();
  private:
  const std::string& _internal_obj_paths(int index) const;
  std::string* _internal_add_obj_paths();
  public:

  // bool allow_partial = 1;
  void clear_allow_partial();
  bool allow_partial() const;
  void set_allow_partial(bool value);
  private:
  bool _internal_allow_partial() const;
  void _internal_set_allow_partial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Delete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obj_paths_;
  bool allow_partial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure) */ {
 public:
  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure() : DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure(nullptr) {}
  virtual ~DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure();

  DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure(const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& from);
  DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure&& from) noexcept
    : DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure() {
    *this = ::std::move(from);
  }

  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& operator=(const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& operator=(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure*>(
               &_DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& a, DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* New() const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure>(nullptr);
  }

  DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& from);
  void MergeFrom(const DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure";
  }
  protected:
  explicit DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess) */ {
 public:
  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess() : DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess(nullptr) {}
  virtual ~DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess();

  DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess(const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& from);
  DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess&& from) noexcept
    : DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess() {
    *this = ::std::move(from);
  }

  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& operator=(const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& operator=(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess*>(
               &_DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& a, DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* New() const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess>(nullptr);
  }

  DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& from);
  void MergeFrom(const DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess";
  }
  protected:
  explicit DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffectedPathsFieldNumber = 1,
    kUnaffectedPathErrsFieldNumber = 2,
  };
  // repeated string affected_paths = 1;
  int affected_paths_size() const;
  private:
  int _internal_affected_paths_size() const;
  public:
  void clear_affected_paths();
  const std::string& affected_paths(int index) const;
  std::string* mutable_affected_paths(int index);
  void set_affected_paths(int index, const std::string& value);
  void set_affected_paths(int index, std::string&& value);
  void set_affected_paths(int index, const char* value);
  void set_affected_paths(int index, const char* value, size_t size);
  std::string* add_affected_paths();
  void add_affected_paths(const std::string& value);
  void add_affected_paths(std::string&& value);
  void add_affected_paths(const char* value);
  void add_affected_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& affected_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_affected_paths();
  private:
  const std::string& _internal_affected_paths(int index) const;
  std::string* _internal_add_affected_paths();
  public:

  // repeated .usp.DeleteResp.UnaffectedPathError unaffected_path_errs = 2;
  int unaffected_path_errs_size() const;
  private:
  int _internal_unaffected_path_errs_size() const;
  public:
  void clear_unaffected_path_errs();
  ::usp::DeleteResp_UnaffectedPathError* mutable_unaffected_path_errs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_UnaffectedPathError >*
      mutable_unaffected_path_errs();
  private:
  const ::usp::DeleteResp_UnaffectedPathError& _internal_unaffected_path_errs(int index) const;
  ::usp::DeleteResp_UnaffectedPathError* _internal_add_unaffected_path_errs();
  public:
  const ::usp::DeleteResp_UnaffectedPathError& unaffected_path_errs(int index) const;
  ::usp::DeleteResp_UnaffectedPathError* add_unaffected_path_errs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_UnaffectedPathError >&
      unaffected_path_errs() const;

  // @@protoc_insertion_point(class_scope:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> affected_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_UnaffectedPathError > unaffected_path_errs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_DeletedObjectResult_OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp.DeletedObjectResult.OperationStatus) */ {
 public:
  inline DeleteResp_DeletedObjectResult_OperationStatus() : DeleteResp_DeletedObjectResult_OperationStatus(nullptr) {}
  virtual ~DeleteResp_DeletedObjectResult_OperationStatus();

  DeleteResp_DeletedObjectResult_OperationStatus(const DeleteResp_DeletedObjectResult_OperationStatus& from);
  DeleteResp_DeletedObjectResult_OperationStatus(DeleteResp_DeletedObjectResult_OperationStatus&& from) noexcept
    : DeleteResp_DeletedObjectResult_OperationStatus() {
    *this = ::std::move(from);
  }

  inline DeleteResp_DeletedObjectResult_OperationStatus& operator=(const DeleteResp_DeletedObjectResult_OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_DeletedObjectResult_OperationStatus& operator=(DeleteResp_DeletedObjectResult_OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_DeletedObjectResult_OperationStatus& default_instance();

  enum OperStatusCase {
    kOperFailure = 1,
    kOperSuccess = 2,
    OPER_STATUS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_DeletedObjectResult_OperationStatus* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_DeletedObjectResult_OperationStatus*>(
               &_DeleteResp_DeletedObjectResult_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DeleteResp_DeletedObjectResult_OperationStatus& a, DeleteResp_DeletedObjectResult_OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_DeletedObjectResult_OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_DeletedObjectResult_OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_DeletedObjectResult_OperationStatus* New() const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus>(nullptr);
  }

  DeleteResp_DeletedObjectResult_OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult_OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_DeletedObjectResult_OperationStatus& from);
  void MergeFrom(const DeleteResp_DeletedObjectResult_OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_DeletedObjectResult_OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp.DeletedObjectResult.OperationStatus";
  }
  protected:
  explicit DeleteResp_DeletedObjectResult_OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure OperationFailure;
  typedef DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess OperationSuccess;

  // accessors -------------------------------------------------------

  enum : int {
    kOperFailureFieldNumber = 1,
    kOperSuccessFieldNumber = 2,
  };
  // .usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
  bool has_oper_failure() const;
  private:
  bool _internal_has_oper_failure() const;
  public:
  void clear_oper_failure();
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& oper_failure() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* release_oper_failure();
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* mutable_oper_failure();
  void set_allocated_oper_failure(::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* oper_failure);
  private:
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& _internal_oper_failure() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* _internal_mutable_oper_failure();
  public:
  void unsafe_arena_set_allocated_oper_failure(
      ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* oper_failure);
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* unsafe_arena_release_oper_failure();

  // .usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
  bool has_oper_success() const;
  private:
  bool _internal_has_oper_success() const;
  public:
  void clear_oper_success();
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& oper_success() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* release_oper_success();
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* mutable_oper_success();
  void set_allocated_oper_success(::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* oper_success);
  private:
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& _internal_oper_success() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* _internal_mutable_oper_success();
  public:
  void unsafe_arena_set_allocated_oper_success(
      ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* oper_success);
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* unsafe_arena_release_oper_success();

  void clear_oper_status();
  OperStatusCase oper_status_case() const;
  // @@protoc_insertion_point(class_scope:usp.DeleteResp.DeletedObjectResult.OperationStatus)
 private:
  class _Internal;
  void set_has_oper_failure();
  void set_has_oper_success();

  inline bool has_oper_status() const;
  inline void clear_has_oper_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperStatusUnion {
    OperStatusUnion() {}
    ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* oper_failure_;
    ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* oper_success_;
  } oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_DeletedObjectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp.DeletedObjectResult) */ {
 public:
  inline DeleteResp_DeletedObjectResult() : DeleteResp_DeletedObjectResult(nullptr) {}
  virtual ~DeleteResp_DeletedObjectResult();

  DeleteResp_DeletedObjectResult(const DeleteResp_DeletedObjectResult& from);
  DeleteResp_DeletedObjectResult(DeleteResp_DeletedObjectResult&& from) noexcept
    : DeleteResp_DeletedObjectResult() {
    *this = ::std::move(from);
  }

  inline DeleteResp_DeletedObjectResult& operator=(const DeleteResp_DeletedObjectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_DeletedObjectResult& operator=(DeleteResp_DeletedObjectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_DeletedObjectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_DeletedObjectResult* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_DeletedObjectResult*>(
               &_DeleteResp_DeletedObjectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeleteResp_DeletedObjectResult& a, DeleteResp_DeletedObjectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_DeletedObjectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_DeletedObjectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_DeletedObjectResult* New() const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult>(nullptr);
  }

  DeleteResp_DeletedObjectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_DeletedObjectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_DeletedObjectResult& from);
  void MergeFrom(const DeleteResp_DeletedObjectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_DeletedObjectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp.DeletedObjectResult";
  }
  protected:
  explicit DeleteResp_DeletedObjectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteResp_DeletedObjectResult_OperationStatus OperationStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestedPathFieldNumber = 1,
    kOperStatusFieldNumber = 2,
  };
  // string requested_path = 1;
  void clear_requested_path();
  const std::string& requested_path() const;
  void set_requested_path(const std::string& value);
  void set_requested_path(std::string&& value);
  void set_requested_path(const char* value);
  void set_requested_path(const char* value, size_t size);
  std::string* mutable_requested_path();
  std::string* release_requested_path();
  void set_allocated_requested_path(std::string* requested_path);
  private:
  const std::string& _internal_requested_path() const;
  void _internal_set_requested_path(const std::string& value);
  std::string* _internal_mutable_requested_path();
  public:

  // .usp.DeleteResp.DeletedObjectResult.OperationStatus oper_status = 2;
  bool has_oper_status() const;
  private:
  bool _internal_has_oper_status() const;
  public:
  void clear_oper_status();
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus& oper_status() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* release_oper_status();
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* mutable_oper_status();
  void set_allocated_oper_status(::usp::DeleteResp_DeletedObjectResult_OperationStatus* oper_status);
  private:
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus& _internal_oper_status() const;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* _internal_mutable_oper_status();
  public:
  void unsafe_arena_set_allocated_oper_status(
      ::usp::DeleteResp_DeletedObjectResult_OperationStatus* oper_status);
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* unsafe_arena_release_oper_status();

  // @@protoc_insertion_point(class_scope:usp.DeleteResp.DeletedObjectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_path_;
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_UnaffectedPathError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp.UnaffectedPathError) */ {
 public:
  inline DeleteResp_UnaffectedPathError() : DeleteResp_UnaffectedPathError(nullptr) {}
  virtual ~DeleteResp_UnaffectedPathError();

  DeleteResp_UnaffectedPathError(const DeleteResp_UnaffectedPathError& from);
  DeleteResp_UnaffectedPathError(DeleteResp_UnaffectedPathError&& from) noexcept
    : DeleteResp_UnaffectedPathError() {
    *this = ::std::move(from);
  }

  inline DeleteResp_UnaffectedPathError& operator=(const DeleteResp_UnaffectedPathError& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_UnaffectedPathError& operator=(DeleteResp_UnaffectedPathError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_UnaffectedPathError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_UnaffectedPathError* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_UnaffectedPathError*>(
               &_DeleteResp_UnaffectedPathError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DeleteResp_UnaffectedPathError& a, DeleteResp_UnaffectedPathError& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_UnaffectedPathError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_UnaffectedPathError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_UnaffectedPathError* New() const final {
    return CreateMaybeMessage<DeleteResp_UnaffectedPathError>(nullptr);
  }

  DeleteResp_UnaffectedPathError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_UnaffectedPathError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_UnaffectedPathError& from);
  void MergeFrom(const DeleteResp_UnaffectedPathError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_UnaffectedPathError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp.UnaffectedPathError";
  }
  protected:
  explicit DeleteResp_UnaffectedPathError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnaffectedPathFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // string unaffected_path = 1;
  void clear_unaffected_path();
  const std::string& unaffected_path() const;
  void set_unaffected_path(const std::string& value);
  void set_unaffected_path(std::string&& value);
  void set_unaffected_path(const char* value);
  void set_unaffected_path(const char* value, size_t size);
  std::string* mutable_unaffected_path();
  std::string* release_unaffected_path();
  void set_allocated_unaffected_path(std::string* unaffected_path);
  private:
  const std::string& _internal_unaffected_path() const;
  void _internal_set_unaffected_path(const std::string& value);
  std::string* _internal_mutable_unaffected_path();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.DeleteResp.UnaffectedPathError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unaffected_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.DeleteResp) */ {
 public:
  inline DeleteResp() : DeleteResp(nullptr) {}
  virtual ~DeleteResp();

  DeleteResp(const DeleteResp& from);
  DeleteResp(DeleteResp&& from) noexcept
    : DeleteResp() {
    *this = ::std::move(from);
  }

  inline DeleteResp& operator=(const DeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp& operator=(DeleteResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp* internal_default_instance() {
    return reinterpret_cast<const DeleteResp*>(
               &_DeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeleteResp& a, DeleteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp* New() const final {
    return CreateMaybeMessage<DeleteResp>(nullptr);
  }

  DeleteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp& from);
  void MergeFrom(const DeleteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.DeleteResp";
  }
  protected:
  explicit DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteResp_DeletedObjectResult DeletedObjectResult;
  typedef DeleteResp_UnaffectedPathError UnaffectedPathError;

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedObjResultsFieldNumber = 1,
  };
  // repeated .usp.DeleteResp.DeletedObjectResult deleted_obj_results = 1;
  int deleted_obj_results_size() const;
  private:
  int _internal_deleted_obj_results_size() const;
  public:
  void clear_deleted_obj_results();
  ::usp::DeleteResp_DeletedObjectResult* mutable_deleted_obj_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_DeletedObjectResult >*
      mutable_deleted_obj_results();
  private:
  const ::usp::DeleteResp_DeletedObjectResult& _internal_deleted_obj_results(int index) const;
  ::usp::DeleteResp_DeletedObjectResult* _internal_add_deleted_obj_results();
  public:
  const ::usp::DeleteResp_DeletedObjectResult& deleted_obj_results(int index) const;
  ::usp::DeleteResp_DeletedObjectResult* add_deleted_obj_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_DeletedObjectResult >&
      deleted_obj_results() const;

  // @@protoc_insertion_point(class_scope:usp.DeleteResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_DeletedObjectResult > deleted_obj_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Set_UpdateObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Set.UpdateObject) */ {
 public:
  inline Set_UpdateObject() : Set_UpdateObject(nullptr) {}
  virtual ~Set_UpdateObject();

  Set_UpdateObject(const Set_UpdateObject& from);
  Set_UpdateObject(Set_UpdateObject&& from) noexcept
    : Set_UpdateObject() {
    *this = ::std::move(from);
  }

  inline Set_UpdateObject& operator=(const Set_UpdateObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline Set_UpdateObject& operator=(Set_UpdateObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Set_UpdateObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Set_UpdateObject* internal_default_instance() {
    return reinterpret_cast<const Set_UpdateObject*>(
               &_Set_UpdateObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Set_UpdateObject& a, Set_UpdateObject& b) {
    a.Swap(&b);
  }
  inline void Swap(Set_UpdateObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Set_UpdateObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Set_UpdateObject* New() const final {
    return CreateMaybeMessage<Set_UpdateObject>(nullptr);
  }

  Set_UpdateObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Set_UpdateObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Set_UpdateObject& from);
  void MergeFrom(const Set_UpdateObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Set_UpdateObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Set.UpdateObject";
  }
  protected:
  explicit Set_UpdateObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamSettingsFieldNumber = 2,
    kObjPathFieldNumber = 1,
  };
  // repeated .usp.Set.UpdateParamSetting param_settings = 2;
  int param_settings_size() const;
  private:
  int _internal_param_settings_size() const;
  public:
  void clear_param_settings();
  ::usp::Set_UpdateParamSetting* mutable_param_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateParamSetting >*
      mutable_param_settings();
  private:
  const ::usp::Set_UpdateParamSetting& _internal_param_settings(int index) const;
  ::usp::Set_UpdateParamSetting* _internal_add_param_settings();
  public:
  const ::usp::Set_UpdateParamSetting& param_settings(int index) const;
  ::usp::Set_UpdateParamSetting* add_param_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateParamSetting >&
      param_settings() const;

  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.Set.UpdateObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateParamSetting > param_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Set_UpdateParamSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Set.UpdateParamSetting) */ {
 public:
  inline Set_UpdateParamSetting() : Set_UpdateParamSetting(nullptr) {}
  virtual ~Set_UpdateParamSetting();

  Set_UpdateParamSetting(const Set_UpdateParamSetting& from);
  Set_UpdateParamSetting(Set_UpdateParamSetting&& from) noexcept
    : Set_UpdateParamSetting() {
    *this = ::std::move(from);
  }

  inline Set_UpdateParamSetting& operator=(const Set_UpdateParamSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Set_UpdateParamSetting& operator=(Set_UpdateParamSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Set_UpdateParamSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Set_UpdateParamSetting* internal_default_instance() {
    return reinterpret_cast<const Set_UpdateParamSetting*>(
               &_Set_UpdateParamSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Set_UpdateParamSetting& a, Set_UpdateParamSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(Set_UpdateParamSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Set_UpdateParamSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Set_UpdateParamSetting* New() const final {
    return CreateMaybeMessage<Set_UpdateParamSetting>(nullptr);
  }

  Set_UpdateParamSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Set_UpdateParamSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Set_UpdateParamSetting& from);
  void MergeFrom(const Set_UpdateParamSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Set_UpdateParamSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Set.UpdateParamSetting";
  }
  protected:
  explicit Set_UpdateParamSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kValueFieldNumber = 2,
    kRequiredFieldNumber = 3,
  };
  // string param = 1;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool required = 3;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Set.UpdateParamSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Set PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Set) */ {
 public:
  inline Set() : Set(nullptr) {}
  virtual ~Set();

  Set(const Set& from);
  Set(Set&& from) noexcept
    : Set() {
    *this = ::std::move(from);
  }

  inline Set& operator=(const Set& from) {
    CopyFrom(from);
    return *this;
  }
  inline Set& operator=(Set&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Set& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Set* internal_default_instance() {
    return reinterpret_cast<const Set*>(
               &_Set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Set& a, Set& b) {
    a.Swap(&b);
  }
  inline void Swap(Set* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Set* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Set* New() const final {
    return CreateMaybeMessage<Set>(nullptr);
  }

  Set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Set>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Set& from);
  void MergeFrom(const Set& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Set* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Set";
  }
  protected:
  explicit Set(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Set_UpdateObject UpdateObject;
  typedef Set_UpdateParamSetting UpdateParamSetting;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateObjsFieldNumber = 2,
    kAllowPartialFieldNumber = 1,
  };
  // repeated .usp.Set.UpdateObject update_objs = 2;
  int update_objs_size() const;
  private:
  int _internal_update_objs_size() const;
  public:
  void clear_update_objs();
  ::usp::Set_UpdateObject* mutable_update_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateObject >*
      mutable_update_objs();
  private:
  const ::usp::Set_UpdateObject& _internal_update_objs(int index) const;
  ::usp::Set_UpdateObject* _internal_add_update_objs();
  public:
  const ::usp::Set_UpdateObject& update_objs(int index) const;
  ::usp::Set_UpdateObject* add_update_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateObject >&
      update_objs() const;

  // bool allow_partial = 1;
  void clear_allow_partial();
  bool allow_partial() const;
  void set_allow_partial(bool value);
  private:
  bool _internal_allow_partial() const;
  void _internal_set_allow_partial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Set)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateObject > update_objs_;
  bool allow_partial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedObjectResult_OperationStatus_OperationFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure) */ {
 public:
  inline SetResp_UpdatedObjectResult_OperationStatus_OperationFailure() : SetResp_UpdatedObjectResult_OperationStatus_OperationFailure(nullptr) {}
  virtual ~SetResp_UpdatedObjectResult_OperationStatus_OperationFailure();

  SetResp_UpdatedObjectResult_OperationStatus_OperationFailure(const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& from);
  SetResp_UpdatedObjectResult_OperationStatus_OperationFailure(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure&& from) noexcept
    : SetResp_UpdatedObjectResult_OperationStatus_OperationFailure() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& operator=(const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& operator=(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure*>(
               &_SetResp_UpdatedObjectResult_OperationStatus_OperationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& a, SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus_OperationFailure>(nullptr);
  }

  SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus_OperationFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& from);
  void MergeFrom(const SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure";
  }
  protected:
  explicit SetResp_UpdatedObjectResult_OperationStatus_OperationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedInstFailuresFieldNumber = 3,
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated .usp.SetResp.UpdatedInstanceFailure updated_inst_failures = 3;
  int updated_inst_failures_size() const;
  private:
  int _internal_updated_inst_failures_size() const;
  public:
  void clear_updated_inst_failures();
  ::usp::SetResp_UpdatedInstanceFailure* mutable_updated_inst_failures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceFailure >*
      mutable_updated_inst_failures();
  private:
  const ::usp::SetResp_UpdatedInstanceFailure& _internal_updated_inst_failures(int index) const;
  ::usp::SetResp_UpdatedInstanceFailure* _internal_add_updated_inst_failures();
  public:
  const ::usp::SetResp_UpdatedInstanceFailure& updated_inst_failures(int index) const;
  ::usp::SetResp_UpdatedInstanceFailure* add_updated_inst_failures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceFailure >&
      updated_inst_failures() const;

  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceFailure > updated_inst_failures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess) */ {
 public:
  inline SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess() : SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess(nullptr) {}
  virtual ~SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess();

  SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess(const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& from);
  SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess&& from) noexcept
    : SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& operator=(const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& operator=(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess*>(
               &_SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& a, SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess>(nullptr);
  }

  SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& from);
  void MergeFrom(const SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess";
  }
  protected:
  explicit SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedInstResultsFieldNumber = 1,
  };
  // repeated .usp.SetResp.UpdatedInstanceResult updated_inst_results = 1;
  int updated_inst_results_size() const;
  private:
  int _internal_updated_inst_results_size() const;
  public:
  void clear_updated_inst_results();
  ::usp::SetResp_UpdatedInstanceResult* mutable_updated_inst_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceResult >*
      mutable_updated_inst_results();
  private:
  const ::usp::SetResp_UpdatedInstanceResult& _internal_updated_inst_results(int index) const;
  ::usp::SetResp_UpdatedInstanceResult* _internal_add_updated_inst_results();
  public:
  const ::usp::SetResp_UpdatedInstanceResult& updated_inst_results(int index) const;
  ::usp::SetResp_UpdatedInstanceResult* add_updated_inst_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceResult >&
      updated_inst_results() const;

  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceResult > updated_inst_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedObjectResult_OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedObjectResult.OperationStatus) */ {
 public:
  inline SetResp_UpdatedObjectResult_OperationStatus() : SetResp_UpdatedObjectResult_OperationStatus(nullptr) {}
  virtual ~SetResp_UpdatedObjectResult_OperationStatus();

  SetResp_UpdatedObjectResult_OperationStatus(const SetResp_UpdatedObjectResult_OperationStatus& from);
  SetResp_UpdatedObjectResult_OperationStatus(SetResp_UpdatedObjectResult_OperationStatus&& from) noexcept
    : SetResp_UpdatedObjectResult_OperationStatus() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedObjectResult_OperationStatus& operator=(const SetResp_UpdatedObjectResult_OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedObjectResult_OperationStatus& operator=(SetResp_UpdatedObjectResult_OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedObjectResult_OperationStatus& default_instance();

  enum OperStatusCase {
    kOperFailure = 1,
    kOperSuccess = 2,
    OPER_STATUS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedObjectResult_OperationStatus* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedObjectResult_OperationStatus*>(
               &_SetResp_UpdatedObjectResult_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SetResp_UpdatedObjectResult_OperationStatus& a, SetResp_UpdatedObjectResult_OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedObjectResult_OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedObjectResult_OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedObjectResult_OperationStatus* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus>(nullptr);
  }

  SetResp_UpdatedObjectResult_OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult_OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedObjectResult_OperationStatus& from);
  void MergeFrom(const SetResp_UpdatedObjectResult_OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedObjectResult_OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedObjectResult.OperationStatus";
  }
  protected:
  explicit SetResp_UpdatedObjectResult_OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetResp_UpdatedObjectResult_OperationStatus_OperationFailure OperationFailure;
  typedef SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess OperationSuccess;

  // accessors -------------------------------------------------------

  enum : int {
    kOperFailureFieldNumber = 1,
    kOperSuccessFieldNumber = 2,
  };
  // .usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
  bool has_oper_failure() const;
  private:
  bool _internal_has_oper_failure() const;
  public:
  void clear_oper_failure();
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& oper_failure() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* release_oper_failure();
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* mutable_oper_failure();
  void set_allocated_oper_failure(::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* oper_failure);
  private:
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& _internal_oper_failure() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* _internal_mutable_oper_failure();
  public:
  void unsafe_arena_set_allocated_oper_failure(
      ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* oper_failure);
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* unsafe_arena_release_oper_failure();

  // .usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
  bool has_oper_success() const;
  private:
  bool _internal_has_oper_success() const;
  public:
  void clear_oper_success();
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& oper_success() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* release_oper_success();
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* mutable_oper_success();
  void set_allocated_oper_success(::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* oper_success);
  private:
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& _internal_oper_success() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* _internal_mutable_oper_success();
  public:
  void unsafe_arena_set_allocated_oper_success(
      ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* oper_success);
  ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* unsafe_arena_release_oper_success();

  void clear_oper_status();
  OperStatusCase oper_status_case() const;
  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedObjectResult.OperationStatus)
 private:
  class _Internal;
  void set_has_oper_failure();
  void set_has_oper_success();

  inline bool has_oper_status() const;
  inline void clear_has_oper_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperStatusUnion {
    OperStatusUnion() {}
    ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* oper_failure_;
    ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* oper_success_;
  } oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedObjectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedObjectResult) */ {
 public:
  inline SetResp_UpdatedObjectResult() : SetResp_UpdatedObjectResult(nullptr) {}
  virtual ~SetResp_UpdatedObjectResult();

  SetResp_UpdatedObjectResult(const SetResp_UpdatedObjectResult& from);
  SetResp_UpdatedObjectResult(SetResp_UpdatedObjectResult&& from) noexcept
    : SetResp_UpdatedObjectResult() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedObjectResult& operator=(const SetResp_UpdatedObjectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedObjectResult& operator=(SetResp_UpdatedObjectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedObjectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedObjectResult* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedObjectResult*>(
               &_SetResp_UpdatedObjectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SetResp_UpdatedObjectResult& a, SetResp_UpdatedObjectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedObjectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedObjectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedObjectResult* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult>(nullptr);
  }

  SetResp_UpdatedObjectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedObjectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedObjectResult& from);
  void MergeFrom(const SetResp_UpdatedObjectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedObjectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedObjectResult";
  }
  protected:
  explicit SetResp_UpdatedObjectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetResp_UpdatedObjectResult_OperationStatus OperationStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestedPathFieldNumber = 1,
    kOperStatusFieldNumber = 2,
  };
  // string requested_path = 1;
  void clear_requested_path();
  const std::string& requested_path() const;
  void set_requested_path(const std::string& value);
  void set_requested_path(std::string&& value);
  void set_requested_path(const char* value);
  void set_requested_path(const char* value, size_t size);
  std::string* mutable_requested_path();
  std::string* release_requested_path();
  void set_allocated_requested_path(std::string* requested_path);
  private:
  const std::string& _internal_requested_path() const;
  void _internal_set_requested_path(const std::string& value);
  std::string* _internal_mutable_requested_path();
  public:

  // .usp.SetResp.UpdatedObjectResult.OperationStatus oper_status = 2;
  bool has_oper_status() const;
  private:
  bool _internal_has_oper_status() const;
  public:
  void clear_oper_status();
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus& oper_status() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* release_oper_status();
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* mutable_oper_status();
  void set_allocated_oper_status(::usp::SetResp_UpdatedObjectResult_OperationStatus* oper_status);
  private:
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus& _internal_oper_status() const;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* _internal_mutable_oper_status();
  public:
  void unsafe_arena_set_allocated_oper_status(
      ::usp::SetResp_UpdatedObjectResult_OperationStatus* oper_status);
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* unsafe_arena_release_oper_status();

  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedObjectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_path_;
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedInstanceFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedInstanceFailure) */ {
 public:
  inline SetResp_UpdatedInstanceFailure() : SetResp_UpdatedInstanceFailure(nullptr) {}
  virtual ~SetResp_UpdatedInstanceFailure();

  SetResp_UpdatedInstanceFailure(const SetResp_UpdatedInstanceFailure& from);
  SetResp_UpdatedInstanceFailure(SetResp_UpdatedInstanceFailure&& from) noexcept
    : SetResp_UpdatedInstanceFailure() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedInstanceFailure& operator=(const SetResp_UpdatedInstanceFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedInstanceFailure& operator=(SetResp_UpdatedInstanceFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedInstanceFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedInstanceFailure* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedInstanceFailure*>(
               &_SetResp_UpdatedInstanceFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SetResp_UpdatedInstanceFailure& a, SetResp_UpdatedInstanceFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedInstanceFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedInstanceFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedInstanceFailure* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedInstanceFailure>(nullptr);
  }

  SetResp_UpdatedInstanceFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedInstanceFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedInstanceFailure& from);
  void MergeFrom(const SetResp_UpdatedInstanceFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedInstanceFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedInstanceFailure";
  }
  protected:
  explicit SetResp_UpdatedInstanceFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamErrsFieldNumber = 2,
    kAffectedPathFieldNumber = 1,
  };
  // repeated .usp.SetResp.ParameterError param_errs = 2;
  int param_errs_size() const;
  private:
  int _internal_param_errs_size() const;
  public:
  void clear_param_errs();
  ::usp::SetResp_ParameterError* mutable_param_errs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >*
      mutable_param_errs();
  private:
  const ::usp::SetResp_ParameterError& _internal_param_errs(int index) const;
  ::usp::SetResp_ParameterError* _internal_add_param_errs();
  public:
  const ::usp::SetResp_ParameterError& param_errs(int index) const;
  ::usp::SetResp_ParameterError* add_param_errs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >&
      param_errs() const;

  // string affected_path = 1;
  void clear_affected_path();
  const std::string& affected_path() const;
  void set_affected_path(const std::string& value);
  void set_affected_path(std::string&& value);
  void set_affected_path(const char* value);
  void set_affected_path(const char* value, size_t size);
  std::string* mutable_affected_path();
  std::string* release_affected_path();
  void set_allocated_affected_path(std::string* affected_path);
  private:
  const std::string& _internal_affected_path() const;
  void _internal_set_affected_path(const std::string& value);
  std::string* _internal_mutable_affected_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedInstanceFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError > param_errs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affected_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse();
  explicit SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse& other);
  static const SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse*>(&_SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.SetResp.UpdatedInstanceResult.UpdatedParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.SetResp.UpdatedInstanceResult.UpdatedParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[51];
  }

  public:
};

// -------------------------------------------------------------------

class SetResp_UpdatedInstanceResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.UpdatedInstanceResult) */ {
 public:
  inline SetResp_UpdatedInstanceResult() : SetResp_UpdatedInstanceResult(nullptr) {}
  virtual ~SetResp_UpdatedInstanceResult();

  SetResp_UpdatedInstanceResult(const SetResp_UpdatedInstanceResult& from);
  SetResp_UpdatedInstanceResult(SetResp_UpdatedInstanceResult&& from) noexcept
    : SetResp_UpdatedInstanceResult() {
    *this = ::std::move(from);
  }

  inline SetResp_UpdatedInstanceResult& operator=(const SetResp_UpdatedInstanceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_UpdatedInstanceResult& operator=(SetResp_UpdatedInstanceResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_UpdatedInstanceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_UpdatedInstanceResult* internal_default_instance() {
    return reinterpret_cast<const SetResp_UpdatedInstanceResult*>(
               &_SetResp_UpdatedInstanceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SetResp_UpdatedInstanceResult& a, SetResp_UpdatedInstanceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_UpdatedInstanceResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_UpdatedInstanceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_UpdatedInstanceResult* New() const final {
    return CreateMaybeMessage<SetResp_UpdatedInstanceResult>(nullptr);
  }

  SetResp_UpdatedInstanceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_UpdatedInstanceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_UpdatedInstanceResult& from);
  void MergeFrom(const SetResp_UpdatedInstanceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_UpdatedInstanceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.UpdatedInstanceResult";
  }
  protected:
  explicit SetResp_UpdatedInstanceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamErrsFieldNumber = 2,
    kUpdatedParamsFieldNumber = 3,
    kAffectedPathFieldNumber = 1,
  };
  // repeated .usp.SetResp.ParameterError param_errs = 2;
  int param_errs_size() const;
  private:
  int _internal_param_errs_size() const;
  public:
  void clear_param_errs();
  ::usp::SetResp_ParameterError* mutable_param_errs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >*
      mutable_param_errs();
  private:
  const ::usp::SetResp_ParameterError& _internal_param_errs(int index) const;
  ::usp::SetResp_ParameterError* _internal_add_param_errs();
  public:
  const ::usp::SetResp_ParameterError& param_errs(int index) const;
  ::usp::SetResp_ParameterError* add_param_errs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >&
      param_errs() const;

  // map<string, string> updated_params = 3;
  int updated_params_size() const;
  private:
  int _internal_updated_params_size() const;
  public:
  void clear_updated_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_updated_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_updated_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      updated_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_updated_params();

  // string affected_path = 1;
  void clear_affected_path();
  const std::string& affected_path() const;
  void set_affected_path(const std::string& value);
  void set_affected_path(std::string&& value);
  void set_affected_path(const char* value);
  void set_affected_path(const char* value, size_t size);
  std::string* mutable_affected_path();
  std::string* release_affected_path();
  void set_allocated_affected_path(std::string* affected_path);
  private:
  const std::string& _internal_affected_path() const;
  void _internal_set_affected_path(const std::string& value);
  std::string* _internal_mutable_affected_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.SetResp.UpdatedInstanceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError > param_errs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetResp_UpdatedInstanceResult_UpdatedParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > updated_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affected_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp_ParameterError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp.ParameterError) */ {
 public:
  inline SetResp_ParameterError() : SetResp_ParameterError(nullptr) {}
  virtual ~SetResp_ParameterError();

  SetResp_ParameterError(const SetResp_ParameterError& from);
  SetResp_ParameterError(SetResp_ParameterError&& from) noexcept
    : SetResp_ParameterError() {
    *this = ::std::move(from);
  }

  inline SetResp_ParameterError& operator=(const SetResp_ParameterError& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp_ParameterError& operator=(SetResp_ParameterError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp_ParameterError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp_ParameterError* internal_default_instance() {
    return reinterpret_cast<const SetResp_ParameterError*>(
               &_SetResp_ParameterError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SetResp_ParameterError& a, SetResp_ParameterError& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp_ParameterError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp_ParameterError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp_ParameterError* New() const final {
    return CreateMaybeMessage<SetResp_ParameterError>(nullptr);
  }

  SetResp_ParameterError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp_ParameterError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp_ParameterError& from);
  void MergeFrom(const SetResp_ParameterError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp_ParameterError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp.ParameterError";
  }
  protected:
  explicit SetResp_ParameterError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrCodeFieldNumber = 2,
  };
  // string param = 1;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.SetResp.ParameterError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.SetResp) */ {
 public:
  inline SetResp() : SetResp(nullptr) {}
  virtual ~SetResp();

  SetResp(const SetResp& from);
  SetResp(SetResp&& from) noexcept
    : SetResp() {
    *this = ::std::move(from);
  }

  inline SetResp& operator=(const SetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResp& operator=(SetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResp* internal_default_instance() {
    return reinterpret_cast<const SetResp*>(
               &_SetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SetResp& a, SetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResp* New() const final {
    return CreateMaybeMessage<SetResp>(nullptr);
  }

  SetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetResp& from);
  void MergeFrom(const SetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.SetResp";
  }
  protected:
  explicit SetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetResp_UpdatedObjectResult UpdatedObjectResult;
  typedef SetResp_UpdatedInstanceFailure UpdatedInstanceFailure;
  typedef SetResp_UpdatedInstanceResult UpdatedInstanceResult;
  typedef SetResp_ParameterError ParameterError;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedObjResultsFieldNumber = 1,
  };
  // repeated .usp.SetResp.UpdatedObjectResult updated_obj_results = 1;
  int updated_obj_results_size() const;
  private:
  int _internal_updated_obj_results_size() const;
  public:
  void clear_updated_obj_results();
  ::usp::SetResp_UpdatedObjectResult* mutable_updated_obj_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedObjectResult >*
      mutable_updated_obj_results();
  private:
  const ::usp::SetResp_UpdatedObjectResult& _internal_updated_obj_results(int index) const;
  ::usp::SetResp_UpdatedObjectResult* _internal_add_updated_obj_results();
  public:
  const ::usp::SetResp_UpdatedObjectResult& updated_obj_results(int index) const;
  ::usp::SetResp_UpdatedObjectResult* add_updated_obj_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedObjectResult >&
      updated_obj_results() const;

  // @@protoc_insertion_point(class_scope:usp.SetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedObjectResult > updated_obj_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Operate_InputArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operate_InputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operate_InputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Operate_InputArgsEntry_DoNotUse();
  explicit Operate_InputArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Operate_InputArgsEntry_DoNotUse& other);
  static const Operate_InputArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Operate_InputArgsEntry_DoNotUse*>(&_Operate_InputArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Operate.InputArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Operate.InputArgsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[55];
  }

  public:
};

// -------------------------------------------------------------------

class Operate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Operate) */ {
 public:
  inline Operate() : Operate(nullptr) {}
  virtual ~Operate();

  Operate(const Operate& from);
  Operate(Operate&& from) noexcept
    : Operate() {
    *this = ::std::move(from);
  }

  inline Operate& operator=(const Operate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operate& operator=(Operate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operate* internal_default_instance() {
    return reinterpret_cast<const Operate*>(
               &_Operate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Operate& a, Operate& b) {
    a.Swap(&b);
  }
  inline void Swap(Operate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operate* New() const final {
    return CreateMaybeMessage<Operate>(nullptr);
  }

  Operate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operate& from);
  void MergeFrom(const Operate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Operate";
  }
  protected:
  explicit Operate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputArgsFieldNumber = 4,
    kCommandFieldNumber = 1,
    kCommandKeyFieldNumber = 2,
    kSendRespFieldNumber = 3,
  };
  // map<string, string> input_args = 4;
  int input_args_size() const;
  private:
  int _internal_input_args_size() const;
  public:
  void clear_input_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_input_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_input_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      input_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_input_args();

  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string command_key = 2;
  void clear_command_key();
  const std::string& command_key() const;
  void set_command_key(const std::string& value);
  void set_command_key(std::string&& value);
  void set_command_key(const char* value);
  void set_command_key(const char* value, size_t size);
  std::string* mutable_command_key();
  std::string* release_command_key();
  void set_allocated_command_key(std::string* command_key);
  private:
  const std::string& _internal_command_key() const;
  void _internal_set_command_key(const std::string& value);
  std::string* _internal_mutable_command_key();
  public:

  // bool send_resp = 3;
  void clear_send_resp();
  bool send_resp() const;
  void set_send_resp(bool value);
  private:
  bool _internal_send_resp() const;
  void _internal_set_send_resp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Operate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Operate_InputArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > input_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_key_;
  bool send_resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse();
  explicit OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse& other);
  static const OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse*>(&_OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.OperateResp.OperationResult.OutputArgs.OutputArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.OperateResp.OperationResult.OutputArgs.OutputArgsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[57];
  }

  public:
};

// -------------------------------------------------------------------

class OperateResp_OperationResult_OutputArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.OperateResp.OperationResult.OutputArgs) */ {
 public:
  inline OperateResp_OperationResult_OutputArgs() : OperateResp_OperationResult_OutputArgs(nullptr) {}
  virtual ~OperateResp_OperationResult_OutputArgs();

  OperateResp_OperationResult_OutputArgs(const OperateResp_OperationResult_OutputArgs& from);
  OperateResp_OperationResult_OutputArgs(OperateResp_OperationResult_OutputArgs&& from) noexcept
    : OperateResp_OperationResult_OutputArgs() {
    *this = ::std::move(from);
  }

  inline OperateResp_OperationResult_OutputArgs& operator=(const OperateResp_OperationResult_OutputArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperateResp_OperationResult_OutputArgs& operator=(OperateResp_OperationResult_OutputArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperateResp_OperationResult_OutputArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperateResp_OperationResult_OutputArgs* internal_default_instance() {
    return reinterpret_cast<const OperateResp_OperationResult_OutputArgs*>(
               &_OperateResp_OperationResult_OutputArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(OperateResp_OperationResult_OutputArgs& a, OperateResp_OperationResult_OutputArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(OperateResp_OperationResult_OutputArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperateResp_OperationResult_OutputArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperateResp_OperationResult_OutputArgs* New() const final {
    return CreateMaybeMessage<OperateResp_OperationResult_OutputArgs>(nullptr);
  }

  OperateResp_OperationResult_OutputArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperateResp_OperationResult_OutputArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperateResp_OperationResult_OutputArgs& from);
  void MergeFrom(const OperateResp_OperationResult_OutputArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperateResp_OperationResult_OutputArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.OperateResp.OperationResult.OutputArgs";
  }
  protected:
  explicit OperateResp_OperationResult_OutputArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputArgsFieldNumber = 1,
  };
  // map<string, string> output_args = 1;
  int output_args_size() const;
  private:
  int _internal_output_args_size() const;
  public:
  void clear_output_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_output_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_output_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      output_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_output_args();

  // @@protoc_insertion_point(class_scope:usp.OperateResp.OperationResult.OutputArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OperateResp_OperationResult_OutputArgs_OutputArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > output_args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class OperateResp_OperationResult_CommandFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.OperateResp.OperationResult.CommandFailure) */ {
 public:
  inline OperateResp_OperationResult_CommandFailure() : OperateResp_OperationResult_CommandFailure(nullptr) {}
  virtual ~OperateResp_OperationResult_CommandFailure();

  OperateResp_OperationResult_CommandFailure(const OperateResp_OperationResult_CommandFailure& from);
  OperateResp_OperationResult_CommandFailure(OperateResp_OperationResult_CommandFailure&& from) noexcept
    : OperateResp_OperationResult_CommandFailure() {
    *this = ::std::move(from);
  }

  inline OperateResp_OperationResult_CommandFailure& operator=(const OperateResp_OperationResult_CommandFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperateResp_OperationResult_CommandFailure& operator=(OperateResp_OperationResult_CommandFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperateResp_OperationResult_CommandFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperateResp_OperationResult_CommandFailure* internal_default_instance() {
    return reinterpret_cast<const OperateResp_OperationResult_CommandFailure*>(
               &_OperateResp_OperationResult_CommandFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(OperateResp_OperationResult_CommandFailure& a, OperateResp_OperationResult_CommandFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(OperateResp_OperationResult_CommandFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperateResp_OperationResult_CommandFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperateResp_OperationResult_CommandFailure* New() const final {
    return CreateMaybeMessage<OperateResp_OperationResult_CommandFailure>(nullptr);
  }

  OperateResp_OperationResult_CommandFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperateResp_OperationResult_CommandFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperateResp_OperationResult_CommandFailure& from);
  void MergeFrom(const OperateResp_OperationResult_CommandFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperateResp_OperationResult_CommandFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.OperateResp.OperationResult.CommandFailure";
  }
  protected:
  explicit OperateResp_OperationResult_CommandFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.OperateResp.OperationResult.CommandFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class OperateResp_OperationResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.OperateResp.OperationResult) */ {
 public:
  inline OperateResp_OperationResult() : OperateResp_OperationResult(nullptr) {}
  virtual ~OperateResp_OperationResult();

  OperateResp_OperationResult(const OperateResp_OperationResult& from);
  OperateResp_OperationResult(OperateResp_OperationResult&& from) noexcept
    : OperateResp_OperationResult() {
    *this = ::std::move(from);
  }

  inline OperateResp_OperationResult& operator=(const OperateResp_OperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperateResp_OperationResult& operator=(OperateResp_OperationResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperateResp_OperationResult& default_instance();

  enum OperationRespCase {
    kReqObjPath = 2,
    kReqOutputArgs = 3,
    kCmdFailure = 4,
    OPERATION_RESP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperateResp_OperationResult* internal_default_instance() {
    return reinterpret_cast<const OperateResp_OperationResult*>(
               &_OperateResp_OperationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(OperateResp_OperationResult& a, OperateResp_OperationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OperateResp_OperationResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperateResp_OperationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperateResp_OperationResult* New() const final {
    return CreateMaybeMessage<OperateResp_OperationResult>(nullptr);
  }

  OperateResp_OperationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperateResp_OperationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperateResp_OperationResult& from);
  void MergeFrom(const OperateResp_OperationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperateResp_OperationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.OperateResp.OperationResult";
  }
  protected:
  explicit OperateResp_OperationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OperateResp_OperationResult_OutputArgs OutputArgs;
  typedef OperateResp_OperationResult_CommandFailure CommandFailure;

  // accessors -------------------------------------------------------

  enum : int {
    kExecutedCommandFieldNumber = 1,
    kReqObjPathFieldNumber = 2,
    kReqOutputArgsFieldNumber = 3,
    kCmdFailureFieldNumber = 4,
  };
  // string executed_command = 1;
  void clear_executed_command();
  const std::string& executed_command() const;
  void set_executed_command(const std::string& value);
  void set_executed_command(std::string&& value);
  void set_executed_command(const char* value);
  void set_executed_command(const char* value, size_t size);
  std::string* mutable_executed_command();
  std::string* release_executed_command();
  void set_allocated_executed_command(std::string* executed_command);
  private:
  const std::string& _internal_executed_command() const;
  void _internal_set_executed_command(const std::string& value);
  std::string* _internal_mutable_executed_command();
  public:

  // string req_obj_path = 2;
  private:
  bool _internal_has_req_obj_path() const;
  public:
  void clear_req_obj_path();
  const std::string& req_obj_path() const;
  void set_req_obj_path(const std::string& value);
  void set_req_obj_path(std::string&& value);
  void set_req_obj_path(const char* value);
  void set_req_obj_path(const char* value, size_t size);
  std::string* mutable_req_obj_path();
  std::string* release_req_obj_path();
  void set_allocated_req_obj_path(std::string* req_obj_path);
  private:
  const std::string& _internal_req_obj_path() const;
  void _internal_set_req_obj_path(const std::string& value);
  std::string* _internal_mutable_req_obj_path();
  public:

  // .usp.OperateResp.OperationResult.OutputArgs req_output_args = 3;
  bool has_req_output_args() const;
  private:
  bool _internal_has_req_output_args() const;
  public:
  void clear_req_output_args();
  const ::usp::OperateResp_OperationResult_OutputArgs& req_output_args() const;
  ::usp::OperateResp_OperationResult_OutputArgs* release_req_output_args();
  ::usp::OperateResp_OperationResult_OutputArgs* mutable_req_output_args();
  void set_allocated_req_output_args(::usp::OperateResp_OperationResult_OutputArgs* req_output_args);
  private:
  const ::usp::OperateResp_OperationResult_OutputArgs& _internal_req_output_args() const;
  ::usp::OperateResp_OperationResult_OutputArgs* _internal_mutable_req_output_args();
  public:
  void unsafe_arena_set_allocated_req_output_args(
      ::usp::OperateResp_OperationResult_OutputArgs* req_output_args);
  ::usp::OperateResp_OperationResult_OutputArgs* unsafe_arena_release_req_output_args();

  // .usp.OperateResp.OperationResult.CommandFailure cmd_failure = 4;
  bool has_cmd_failure() const;
  private:
  bool _internal_has_cmd_failure() const;
  public:
  void clear_cmd_failure();
  const ::usp::OperateResp_OperationResult_CommandFailure& cmd_failure() const;
  ::usp::OperateResp_OperationResult_CommandFailure* release_cmd_failure();
  ::usp::OperateResp_OperationResult_CommandFailure* mutable_cmd_failure();
  void set_allocated_cmd_failure(::usp::OperateResp_OperationResult_CommandFailure* cmd_failure);
  private:
  const ::usp::OperateResp_OperationResult_CommandFailure& _internal_cmd_failure() const;
  ::usp::OperateResp_OperationResult_CommandFailure* _internal_mutable_cmd_failure();
  public:
  void unsafe_arena_set_allocated_cmd_failure(
      ::usp::OperateResp_OperationResult_CommandFailure* cmd_failure);
  ::usp::OperateResp_OperationResult_CommandFailure* unsafe_arena_release_cmd_failure();

  void clear_operation_resp();
  OperationRespCase operation_resp_case() const;
  // @@protoc_insertion_point(class_scope:usp.OperateResp.OperationResult)
 private:
  class _Internal;
  void set_has_req_obj_path();
  void set_has_req_output_args();
  void set_has_cmd_failure();

  inline bool has_operation_resp() const;
  inline void clear_has_operation_resp();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executed_command_;
  union OperationRespUnion {
    OperationRespUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_obj_path_;
    ::usp::OperateResp_OperationResult_OutputArgs* req_output_args_;
    ::usp::OperateResp_OperationResult_CommandFailure* cmd_failure_;
  } operation_resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class OperateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.OperateResp) */ {
 public:
  inline OperateResp() : OperateResp(nullptr) {}
  virtual ~OperateResp();

  OperateResp(const OperateResp& from);
  OperateResp(OperateResp&& from) noexcept
    : OperateResp() {
    *this = ::std::move(from);
  }

  inline OperateResp& operator=(const OperateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperateResp& operator=(OperateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperateResp* internal_default_instance() {
    return reinterpret_cast<const OperateResp*>(
               &_OperateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(OperateResp& a, OperateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(OperateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperateResp* New() const final {
    return CreateMaybeMessage<OperateResp>(nullptr);
  }

  OperateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperateResp& from);
  void MergeFrom(const OperateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.OperateResp";
  }
  protected:
  explicit OperateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OperateResp_OperationResult OperationResult;

  // accessors -------------------------------------------------------

  enum : int {
    kOperationResultsFieldNumber = 1,
  };
  // repeated .usp.OperateResp.OperationResult operation_results = 1;
  int operation_results_size() const;
  private:
  int _internal_operation_results_size() const;
  public:
  void clear_operation_results();
  ::usp::OperateResp_OperationResult* mutable_operation_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::OperateResp_OperationResult >*
      mutable_operation_results();
  private:
  const ::usp::OperateResp_OperationResult& _internal_operation_results(int index) const;
  ::usp::OperateResp_OperationResult* _internal_add_operation_results();
  public:
  const ::usp::OperateResp_OperationResult& operation_results(int index) const;
  ::usp::OperateResp_OperationResult* add_operation_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::OperateResp_OperationResult >&
      operation_results() const;

  // @@protoc_insertion_point(class_scope:usp.OperateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::OperateResp_OperationResult > operation_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_Event_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_Event_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_Event_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Notify_Event_ParamsEntry_DoNotUse();
  explicit Notify_Event_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Notify_Event_ParamsEntry_DoNotUse& other);
  static const Notify_Event_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Notify_Event_ParamsEntry_DoNotUse*>(&_Notify_Event_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.Event.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.Event.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[62];
  }

  public:
};

// -------------------------------------------------------------------

class Notify_Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.Event) */ {
 public:
  inline Notify_Event() : Notify_Event(nullptr) {}
  virtual ~Notify_Event();

  Notify_Event(const Notify_Event& from);
  Notify_Event(Notify_Event&& from) noexcept
    : Notify_Event() {
    *this = ::std::move(from);
  }

  inline Notify_Event& operator=(const Notify_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_Event& operator=(Notify_Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_Event* internal_default_instance() {
    return reinterpret_cast<const Notify_Event*>(
               &_Notify_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Notify_Event& a, Notify_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_Event* New() const final {
    return CreateMaybeMessage<Notify_Event>(nullptr);
  }

  Notify_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_Event& from);
  void MergeFrom(const Notify_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.Event";
  }
  protected:
  explicit Notify_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kObjPathFieldNumber = 1,
    kEventNameFieldNumber = 2,
  };
  // map<string, string> params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // string event_name = 2;
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Notify_Event_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_ValueChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.ValueChange) */ {
 public:
  inline Notify_ValueChange() : Notify_ValueChange(nullptr) {}
  virtual ~Notify_ValueChange();

  Notify_ValueChange(const Notify_ValueChange& from);
  Notify_ValueChange(Notify_ValueChange&& from) noexcept
    : Notify_ValueChange() {
    *this = ::std::move(from);
  }

  inline Notify_ValueChange& operator=(const Notify_ValueChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_ValueChange& operator=(Notify_ValueChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_ValueChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_ValueChange* internal_default_instance() {
    return reinterpret_cast<const Notify_ValueChange*>(
               &_Notify_ValueChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Notify_ValueChange& a, Notify_ValueChange& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_ValueChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_ValueChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_ValueChange* New() const final {
    return CreateMaybeMessage<Notify_ValueChange>(nullptr);
  }

  Notify_ValueChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_ValueChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_ValueChange& from);
  void MergeFrom(const Notify_ValueChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_ValueChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.ValueChange";
  }
  protected:
  explicit Notify_ValueChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamPathFieldNumber = 1,
    kParamValueFieldNumber = 2,
  };
  // string param_path = 1;
  void clear_param_path();
  const std::string& param_path() const;
  void set_param_path(const std::string& value);
  void set_param_path(std::string&& value);
  void set_param_path(const char* value);
  void set_param_path(const char* value, size_t size);
  std::string* mutable_param_path();
  std::string* release_param_path();
  void set_allocated_param_path(std::string* param_path);
  private:
  const std::string& _internal_param_path() const;
  void _internal_set_param_path(const std::string& value);
  std::string* _internal_mutable_param_path();
  public:

  // string param_value = 2;
  void clear_param_value();
  const std::string& param_value() const;
  void set_param_value(const std::string& value);
  void set_param_value(std::string&& value);
  void set_param_value(const char* value);
  void set_param_value(const char* value, size_t size);
  std::string* mutable_param_value();
  std::string* release_param_value();
  void set_allocated_param_value(std::string* param_value);
  private:
  const std::string& _internal_param_value() const;
  void _internal_set_param_value(const std::string& value);
  std::string* _internal_mutable_param_value();
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.ValueChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_ObjectCreation_UniqueKeysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_ObjectCreation_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_ObjectCreation_UniqueKeysEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Notify_ObjectCreation_UniqueKeysEntry_DoNotUse();
  explicit Notify_ObjectCreation_UniqueKeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Notify_ObjectCreation_UniqueKeysEntry_DoNotUse& other);
  static const Notify_ObjectCreation_UniqueKeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Notify_ObjectCreation_UniqueKeysEntry_DoNotUse*>(&_Notify_ObjectCreation_UniqueKeysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.ObjectCreation.UniqueKeysEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.ObjectCreation.UniqueKeysEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[65];
  }

  public:
};

// -------------------------------------------------------------------

class Notify_ObjectCreation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.ObjectCreation) */ {
 public:
  inline Notify_ObjectCreation() : Notify_ObjectCreation(nullptr) {}
  virtual ~Notify_ObjectCreation();

  Notify_ObjectCreation(const Notify_ObjectCreation& from);
  Notify_ObjectCreation(Notify_ObjectCreation&& from) noexcept
    : Notify_ObjectCreation() {
    *this = ::std::move(from);
  }

  inline Notify_ObjectCreation& operator=(const Notify_ObjectCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_ObjectCreation& operator=(Notify_ObjectCreation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_ObjectCreation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_ObjectCreation* internal_default_instance() {
    return reinterpret_cast<const Notify_ObjectCreation*>(
               &_Notify_ObjectCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Notify_ObjectCreation& a, Notify_ObjectCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_ObjectCreation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_ObjectCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_ObjectCreation* New() const final {
    return CreateMaybeMessage<Notify_ObjectCreation>(nullptr);
  }

  Notify_ObjectCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_ObjectCreation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_ObjectCreation& from);
  void MergeFrom(const Notify_ObjectCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_ObjectCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.ObjectCreation";
  }
  protected:
  explicit Notify_ObjectCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUniqueKeysFieldNumber = 2,
    kObjPathFieldNumber = 1,
  };
  // map<string, string> unique_keys = 2;
  int unique_keys_size() const;
  private:
  int _internal_unique_keys_size() const;
  public:
  void clear_unique_keys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_unique_keys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      unique_keys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_unique_keys();

  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.ObjectCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Notify_ObjectCreation_UniqueKeysEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > unique_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_ObjectDeletion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.ObjectDeletion) */ {
 public:
  inline Notify_ObjectDeletion() : Notify_ObjectDeletion(nullptr) {}
  virtual ~Notify_ObjectDeletion();

  Notify_ObjectDeletion(const Notify_ObjectDeletion& from);
  Notify_ObjectDeletion(Notify_ObjectDeletion&& from) noexcept
    : Notify_ObjectDeletion() {
    *this = ::std::move(from);
  }

  inline Notify_ObjectDeletion& operator=(const Notify_ObjectDeletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_ObjectDeletion& operator=(Notify_ObjectDeletion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_ObjectDeletion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_ObjectDeletion* internal_default_instance() {
    return reinterpret_cast<const Notify_ObjectDeletion*>(
               &_Notify_ObjectDeletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Notify_ObjectDeletion& a, Notify_ObjectDeletion& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_ObjectDeletion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_ObjectDeletion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_ObjectDeletion* New() const final {
    return CreateMaybeMessage<Notify_ObjectDeletion>(nullptr);
  }

  Notify_ObjectDeletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_ObjectDeletion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_ObjectDeletion& from);
  void MergeFrom(const Notify_ObjectDeletion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_ObjectDeletion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.ObjectDeletion";
  }
  protected:
  explicit Notify_ObjectDeletion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjPathFieldNumber = 1,
  };
  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.ObjectDeletion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse();
  explicit Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse& other);
  static const Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse*>(&_Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.OperationComplete.OutputArgs.OutputArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "usp.Notify.OperationComplete.OutputArgs.OutputArgsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[68];
  }

  public:
};

// -------------------------------------------------------------------

class Notify_OperationComplete_OutputArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.OperationComplete.OutputArgs) */ {
 public:
  inline Notify_OperationComplete_OutputArgs() : Notify_OperationComplete_OutputArgs(nullptr) {}
  virtual ~Notify_OperationComplete_OutputArgs();

  Notify_OperationComplete_OutputArgs(const Notify_OperationComplete_OutputArgs& from);
  Notify_OperationComplete_OutputArgs(Notify_OperationComplete_OutputArgs&& from) noexcept
    : Notify_OperationComplete_OutputArgs() {
    *this = ::std::move(from);
  }

  inline Notify_OperationComplete_OutputArgs& operator=(const Notify_OperationComplete_OutputArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_OperationComplete_OutputArgs& operator=(Notify_OperationComplete_OutputArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_OperationComplete_OutputArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_OperationComplete_OutputArgs* internal_default_instance() {
    return reinterpret_cast<const Notify_OperationComplete_OutputArgs*>(
               &_Notify_OperationComplete_OutputArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Notify_OperationComplete_OutputArgs& a, Notify_OperationComplete_OutputArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_OperationComplete_OutputArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_OperationComplete_OutputArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_OperationComplete_OutputArgs* New() const final {
    return CreateMaybeMessage<Notify_OperationComplete_OutputArgs>(nullptr);
  }

  Notify_OperationComplete_OutputArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_OperationComplete_OutputArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_OperationComplete_OutputArgs& from);
  void MergeFrom(const Notify_OperationComplete_OutputArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_OperationComplete_OutputArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.OperationComplete.OutputArgs";
  }
  protected:
  explicit Notify_OperationComplete_OutputArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputArgsFieldNumber = 1,
  };
  // map<string, string> output_args = 1;
  int output_args_size() const;
  private:
  int _internal_output_args_size() const;
  public:
  void clear_output_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_output_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_output_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      output_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_output_args();

  // @@protoc_insertion_point(class_scope:usp.Notify.OperationComplete.OutputArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Notify_OperationComplete_OutputArgs_OutputArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > output_args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_OperationComplete_CommandFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.OperationComplete.CommandFailure) */ {
 public:
  inline Notify_OperationComplete_CommandFailure() : Notify_OperationComplete_CommandFailure(nullptr) {}
  virtual ~Notify_OperationComplete_CommandFailure();

  Notify_OperationComplete_CommandFailure(const Notify_OperationComplete_CommandFailure& from);
  Notify_OperationComplete_CommandFailure(Notify_OperationComplete_CommandFailure&& from) noexcept
    : Notify_OperationComplete_CommandFailure() {
    *this = ::std::move(from);
  }

  inline Notify_OperationComplete_CommandFailure& operator=(const Notify_OperationComplete_CommandFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_OperationComplete_CommandFailure& operator=(Notify_OperationComplete_CommandFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_OperationComplete_CommandFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_OperationComplete_CommandFailure* internal_default_instance() {
    return reinterpret_cast<const Notify_OperationComplete_CommandFailure*>(
               &_Notify_OperationComplete_CommandFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Notify_OperationComplete_CommandFailure& a, Notify_OperationComplete_CommandFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_OperationComplete_CommandFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_OperationComplete_CommandFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_OperationComplete_CommandFailure* New() const final {
    return CreateMaybeMessage<Notify_OperationComplete_CommandFailure>(nullptr);
  }

  Notify_OperationComplete_CommandFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_OperationComplete_CommandFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_OperationComplete_CommandFailure& from);
  void MergeFrom(const Notify_OperationComplete_CommandFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_OperationComplete_CommandFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.OperationComplete.CommandFailure";
  }
  protected:
  explicit Notify_OperationComplete_CommandFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // fixed32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.OperationComplete.CommandFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_OperationComplete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.OperationComplete) */ {
 public:
  inline Notify_OperationComplete() : Notify_OperationComplete(nullptr) {}
  virtual ~Notify_OperationComplete();

  Notify_OperationComplete(const Notify_OperationComplete& from);
  Notify_OperationComplete(Notify_OperationComplete&& from) noexcept
    : Notify_OperationComplete() {
    *this = ::std::move(from);
  }

  inline Notify_OperationComplete& operator=(const Notify_OperationComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_OperationComplete& operator=(Notify_OperationComplete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_OperationComplete& default_instance();

  enum OperationRespCase {
    kReqOutputArgs = 4,
    kCmdFailure = 5,
    OPERATION_RESP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_OperationComplete* internal_default_instance() {
    return reinterpret_cast<const Notify_OperationComplete*>(
               &_Notify_OperationComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(Notify_OperationComplete& a, Notify_OperationComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_OperationComplete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_OperationComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_OperationComplete* New() const final {
    return CreateMaybeMessage<Notify_OperationComplete>(nullptr);
  }

  Notify_OperationComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_OperationComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_OperationComplete& from);
  void MergeFrom(const Notify_OperationComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_OperationComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.OperationComplete";
  }
  protected:
  explicit Notify_OperationComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Notify_OperationComplete_OutputArgs OutputArgs;
  typedef Notify_OperationComplete_CommandFailure CommandFailure;

  // accessors -------------------------------------------------------

  enum : int {
    kObjPathFieldNumber = 1,
    kCommandNameFieldNumber = 2,
    kCommandKeyFieldNumber = 3,
    kReqOutputArgsFieldNumber = 4,
    kCmdFailureFieldNumber = 5,
  };
  // string obj_path = 1;
  void clear_obj_path();
  const std::string& obj_path() const;
  void set_obj_path(const std::string& value);
  void set_obj_path(std::string&& value);
  void set_obj_path(const char* value);
  void set_obj_path(const char* value, size_t size);
  std::string* mutable_obj_path();
  std::string* release_obj_path();
  void set_allocated_obj_path(std::string* obj_path);
  private:
  const std::string& _internal_obj_path() const;
  void _internal_set_obj_path(const std::string& value);
  std::string* _internal_mutable_obj_path();
  public:

  // string command_name = 2;
  void clear_command_name();
  const std::string& command_name() const;
  void set_command_name(const std::string& value);
  void set_command_name(std::string&& value);
  void set_command_name(const char* value);
  void set_command_name(const char* value, size_t size);
  std::string* mutable_command_name();
  std::string* release_command_name();
  void set_allocated_command_name(std::string* command_name);
  private:
  const std::string& _internal_command_name() const;
  void _internal_set_command_name(const std::string& value);
  std::string* _internal_mutable_command_name();
  public:

  // string command_key = 3;
  void clear_command_key();
  const std::string& command_key() const;
  void set_command_key(const std::string& value);
  void set_command_key(std::string&& value);
  void set_command_key(const char* value);
  void set_command_key(const char* value, size_t size);
  std::string* mutable_command_key();
  std::string* release_command_key();
  void set_allocated_command_key(std::string* command_key);
  private:
  const std::string& _internal_command_key() const;
  void _internal_set_command_key(const std::string& value);
  std::string* _internal_mutable_command_key();
  public:

  // .usp.Notify.OperationComplete.OutputArgs req_output_args = 4;
  bool has_req_output_args() const;
  private:
  bool _internal_has_req_output_args() const;
  public:
  void clear_req_output_args();
  const ::usp::Notify_OperationComplete_OutputArgs& req_output_args() const;
  ::usp::Notify_OperationComplete_OutputArgs* release_req_output_args();
  ::usp::Notify_OperationComplete_OutputArgs* mutable_req_output_args();
  void set_allocated_req_output_args(::usp::Notify_OperationComplete_OutputArgs* req_output_args);
  private:
  const ::usp::Notify_OperationComplete_OutputArgs& _internal_req_output_args() const;
  ::usp::Notify_OperationComplete_OutputArgs* _internal_mutable_req_output_args();
  public:
  void unsafe_arena_set_allocated_req_output_args(
      ::usp::Notify_OperationComplete_OutputArgs* req_output_args);
  ::usp::Notify_OperationComplete_OutputArgs* unsafe_arena_release_req_output_args();

  // .usp.Notify.OperationComplete.CommandFailure cmd_failure = 5;
  bool has_cmd_failure() const;
  private:
  bool _internal_has_cmd_failure() const;
  public:
  void clear_cmd_failure();
  const ::usp::Notify_OperationComplete_CommandFailure& cmd_failure() const;
  ::usp::Notify_OperationComplete_CommandFailure* release_cmd_failure();
  ::usp::Notify_OperationComplete_CommandFailure* mutable_cmd_failure();
  void set_allocated_cmd_failure(::usp::Notify_OperationComplete_CommandFailure* cmd_failure);
  private:
  const ::usp::Notify_OperationComplete_CommandFailure& _internal_cmd_failure() const;
  ::usp::Notify_OperationComplete_CommandFailure* _internal_mutable_cmd_failure();
  public:
  void unsafe_arena_set_allocated_cmd_failure(
      ::usp::Notify_OperationComplete_CommandFailure* cmd_failure);
  ::usp::Notify_OperationComplete_CommandFailure* unsafe_arena_release_cmd_failure();

  void clear_operation_resp();
  OperationRespCase operation_resp_case() const;
  // @@protoc_insertion_point(class_scope:usp.Notify.OperationComplete)
 private:
  class _Internal;
  void set_has_req_output_args();
  void set_has_cmd_failure();

  inline bool has_operation_resp() const;
  inline void clear_has_operation_resp();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_key_;
  union OperationRespUnion {
    OperationRespUnion() {}
    ::usp::Notify_OperationComplete_OutputArgs* req_output_args_;
    ::usp::Notify_OperationComplete_CommandFailure* cmd_failure_;
  } operation_resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify_OnBoardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify.OnBoardRequest) */ {
 public:
  inline Notify_OnBoardRequest() : Notify_OnBoardRequest(nullptr) {}
  virtual ~Notify_OnBoardRequest();

  Notify_OnBoardRequest(const Notify_OnBoardRequest& from);
  Notify_OnBoardRequest(Notify_OnBoardRequest&& from) noexcept
    : Notify_OnBoardRequest() {
    *this = ::std::move(from);
  }

  inline Notify_OnBoardRequest& operator=(const Notify_OnBoardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_OnBoardRequest& operator=(Notify_OnBoardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_OnBoardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify_OnBoardRequest* internal_default_instance() {
    return reinterpret_cast<const Notify_OnBoardRequest*>(
               &_Notify_OnBoardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Notify_OnBoardRequest& a, Notify_OnBoardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_OnBoardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_OnBoardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_OnBoardRequest* New() const final {
    return CreateMaybeMessage<Notify_OnBoardRequest>(nullptr);
  }

  Notify_OnBoardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_OnBoardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_OnBoardRequest& from);
  void MergeFrom(const Notify_OnBoardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_OnBoardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify.OnBoardRequest";
  }
  protected:
  explicit Notify_OnBoardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOuiFieldNumber = 1,
    kProductClassFieldNumber = 2,
    kSerialNumberFieldNumber = 3,
    kAgentSupportedProtocolVersionsFieldNumber = 4,
  };
  // string oui = 1;
  void clear_oui();
  const std::string& oui() const;
  void set_oui(const std::string& value);
  void set_oui(std::string&& value);
  void set_oui(const char* value);
  void set_oui(const char* value, size_t size);
  std::string* mutable_oui();
  std::string* release_oui();
  void set_allocated_oui(std::string* oui);
  private:
  const std::string& _internal_oui() const;
  void _internal_set_oui(const std::string& value);
  std::string* _internal_mutable_oui();
  public:

  // string product_class = 2;
  void clear_product_class();
  const std::string& product_class() const;
  void set_product_class(const std::string& value);
  void set_product_class(std::string&& value);
  void set_product_class(const char* value);
  void set_product_class(const char* value, size_t size);
  std::string* mutable_product_class();
  std::string* release_product_class();
  void set_allocated_product_class(std::string* product_class);
  private:
  const std::string& _internal_product_class() const;
  void _internal_set_product_class(const std::string& value);
  std::string* _internal_mutable_product_class();
  public:

  // string serial_number = 3;
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string agent_supported_protocol_versions = 4;
  void clear_agent_supported_protocol_versions();
  const std::string& agent_supported_protocol_versions() const;
  void set_agent_supported_protocol_versions(const std::string& value);
  void set_agent_supported_protocol_versions(std::string&& value);
  void set_agent_supported_protocol_versions(const char* value);
  void set_agent_supported_protocol_versions(const char* value, size_t size);
  std::string* mutable_agent_supported_protocol_versions();
  std::string* release_agent_supported_protocol_versions();
  void set_allocated_agent_supported_protocol_versions(std::string* agent_supported_protocol_versions);
  private:
  const std::string& _internal_agent_supported_protocol_versions() const;
  void _internal_set_agent_supported_protocol_versions(const std::string& value);
  std::string* _internal_mutable_agent_supported_protocol_versions();
  public:

  // @@protoc_insertion_point(class_scope:usp.Notify.OnBoardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_supported_protocol_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class Notify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.Notify) */ {
 public:
  inline Notify() : Notify(nullptr) {}
  virtual ~Notify();

  Notify(const Notify& from);
  Notify(Notify&& from) noexcept
    : Notify() {
    *this = ::std::move(from);
  }

  inline Notify& operator=(const Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify& operator=(Notify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify& default_instance();

  enum NotificationCase {
    kEvent = 3,
    kValueChange = 4,
    kObjCreation = 5,
    kObjDeletion = 6,
    kOperComplete = 7,
    kOnBoardReq = 8,
    NOTIFICATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notify* internal_default_instance() {
    return reinterpret_cast<const Notify*>(
               &_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Notify& a, Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify* New() const final {
    return CreateMaybeMessage<Notify>(nullptr);
  }

  Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify& from);
  void MergeFrom(const Notify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.Notify";
  }
  protected:
  explicit Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Notify_Event Event;
  typedef Notify_ValueChange ValueChange;
  typedef Notify_ObjectCreation ObjectCreation;
  typedef Notify_ObjectDeletion ObjectDeletion;
  typedef Notify_OperationComplete OperationComplete;
  typedef Notify_OnBoardRequest OnBoardRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
    kSendRespFieldNumber = 2,
    kEventFieldNumber = 3,
    kValueChangeFieldNumber = 4,
    kObjCreationFieldNumber = 5,
    kObjDeletionFieldNumber = 6,
    kOperCompleteFieldNumber = 7,
    kOnBoardReqFieldNumber = 8,
  };
  // string subscription_id = 1;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // bool send_resp = 2;
  void clear_send_resp();
  bool send_resp() const;
  void set_send_resp(bool value);
  private:
  bool _internal_send_resp() const;
  void _internal_set_send_resp(bool value);
  public:

  // .usp.Notify.Event event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::usp::Notify_Event& event() const;
  ::usp::Notify_Event* release_event();
  ::usp::Notify_Event* mutable_event();
  void set_allocated_event(::usp::Notify_Event* event);
  private:
  const ::usp::Notify_Event& _internal_event() const;
  ::usp::Notify_Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::usp::Notify_Event* event);
  ::usp::Notify_Event* unsafe_arena_release_event();

  // .usp.Notify.ValueChange value_change = 4;
  bool has_value_change() const;
  private:
  bool _internal_has_value_change() const;
  public:
  void clear_value_change();
  const ::usp::Notify_ValueChange& value_change() const;
  ::usp::Notify_ValueChange* release_value_change();
  ::usp::Notify_ValueChange* mutable_value_change();
  void set_allocated_value_change(::usp::Notify_ValueChange* value_change);
  private:
  const ::usp::Notify_ValueChange& _internal_value_change() const;
  ::usp::Notify_ValueChange* _internal_mutable_value_change();
  public:
  void unsafe_arena_set_allocated_value_change(
      ::usp::Notify_ValueChange* value_change);
  ::usp::Notify_ValueChange* unsafe_arena_release_value_change();

  // .usp.Notify.ObjectCreation obj_creation = 5;
  bool has_obj_creation() const;
  private:
  bool _internal_has_obj_creation() const;
  public:
  void clear_obj_creation();
  const ::usp::Notify_ObjectCreation& obj_creation() const;
  ::usp::Notify_ObjectCreation* release_obj_creation();
  ::usp::Notify_ObjectCreation* mutable_obj_creation();
  void set_allocated_obj_creation(::usp::Notify_ObjectCreation* obj_creation);
  private:
  const ::usp::Notify_ObjectCreation& _internal_obj_creation() const;
  ::usp::Notify_ObjectCreation* _internal_mutable_obj_creation();
  public:
  void unsafe_arena_set_allocated_obj_creation(
      ::usp::Notify_ObjectCreation* obj_creation);
  ::usp::Notify_ObjectCreation* unsafe_arena_release_obj_creation();

  // .usp.Notify.ObjectDeletion obj_deletion = 6;
  bool has_obj_deletion() const;
  private:
  bool _internal_has_obj_deletion() const;
  public:
  void clear_obj_deletion();
  const ::usp::Notify_ObjectDeletion& obj_deletion() const;
  ::usp::Notify_ObjectDeletion* release_obj_deletion();
  ::usp::Notify_ObjectDeletion* mutable_obj_deletion();
  void set_allocated_obj_deletion(::usp::Notify_ObjectDeletion* obj_deletion);
  private:
  const ::usp::Notify_ObjectDeletion& _internal_obj_deletion() const;
  ::usp::Notify_ObjectDeletion* _internal_mutable_obj_deletion();
  public:
  void unsafe_arena_set_allocated_obj_deletion(
      ::usp::Notify_ObjectDeletion* obj_deletion);
  ::usp::Notify_ObjectDeletion* unsafe_arena_release_obj_deletion();

  // .usp.Notify.OperationComplete oper_complete = 7;
  bool has_oper_complete() const;
  private:
  bool _internal_has_oper_complete() const;
  public:
  void clear_oper_complete();
  const ::usp::Notify_OperationComplete& oper_complete() const;
  ::usp::Notify_OperationComplete* release_oper_complete();
  ::usp::Notify_OperationComplete* mutable_oper_complete();
  void set_allocated_oper_complete(::usp::Notify_OperationComplete* oper_complete);
  private:
  const ::usp::Notify_OperationComplete& _internal_oper_complete() const;
  ::usp::Notify_OperationComplete* _internal_mutable_oper_complete();
  public:
  void unsafe_arena_set_allocated_oper_complete(
      ::usp::Notify_OperationComplete* oper_complete);
  ::usp::Notify_OperationComplete* unsafe_arena_release_oper_complete();

  // .usp.Notify.OnBoardRequest on_board_req = 8;
  bool has_on_board_req() const;
  private:
  bool _internal_has_on_board_req() const;
  public:
  void clear_on_board_req();
  const ::usp::Notify_OnBoardRequest& on_board_req() const;
  ::usp::Notify_OnBoardRequest* release_on_board_req();
  ::usp::Notify_OnBoardRequest* mutable_on_board_req();
  void set_allocated_on_board_req(::usp::Notify_OnBoardRequest* on_board_req);
  private:
  const ::usp::Notify_OnBoardRequest& _internal_on_board_req() const;
  ::usp::Notify_OnBoardRequest* _internal_mutable_on_board_req();
  public:
  void unsafe_arena_set_allocated_on_board_req(
      ::usp::Notify_OnBoardRequest* on_board_req);
  ::usp::Notify_OnBoardRequest* unsafe_arena_release_on_board_req();

  void clear_notification();
  NotificationCase notification_case() const;
  // @@protoc_insertion_point(class_scope:usp.Notify)
 private:
  class _Internal;
  void set_has_event();
  void set_has_value_change();
  void set_has_obj_creation();
  void set_has_obj_deletion();
  void set_has_oper_complete();
  void set_has_on_board_req();

  inline bool has_notification() const;
  inline void clear_has_notification();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  bool send_resp_;
  union NotificationUnion {
    NotificationUnion() {}
    ::usp::Notify_Event* event_;
    ::usp::Notify_ValueChange* value_change_;
    ::usp::Notify_ObjectCreation* obj_creation_;
    ::usp::Notify_ObjectDeletion* obj_deletion_;
    ::usp::Notify_OperationComplete* oper_complete_;
    ::usp::Notify_OnBoardRequest* on_board_req_;
  } notification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class NotifyResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp.NotifyResp) */ {
 public:
  inline NotifyResp() : NotifyResp(nullptr) {}
  virtual ~NotifyResp();

  NotifyResp(const NotifyResp& from);
  NotifyResp(NotifyResp&& from) noexcept
    : NotifyResp() {
    *this = ::std::move(from);
  }

  inline NotifyResp& operator=(const NotifyResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyResp& operator=(NotifyResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyResp* internal_default_instance() {
    return reinterpret_cast<const NotifyResp*>(
               &_NotifyResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(NotifyResp& a, NotifyResp& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyResp* New() const final {
    return CreateMaybeMessage<NotifyResp>(nullptr);
  }

  NotifyResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyResp& from);
  void MergeFrom(const NotifyResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp.NotifyResp";
  }
  protected:
  explicit NotifyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2dmsg_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2dmsg_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
  };
  // string subscription_id = 1;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:usp.NotifyResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2dmsg_2d1_2d1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg

// .usp.Header header = 1;
inline bool Msg::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Msg::has_header() const {
  return _internal_has_header();
}
inline void Msg::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::usp::Header& Msg::_internal_header() const {
  const ::usp::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::usp::Header*>(
      &::usp::_Header_default_instance_);
}
inline const ::usp::Header& Msg::header() const {
  // @@protoc_insertion_point(field_get:usp.Msg.header)
  return _internal_header();
}
inline void Msg::unsafe_arena_set_allocated_header(
    ::usp::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Msg.header)
}
inline ::usp::Header* Msg::release_header() {
  
  ::usp::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::usp::Header* Msg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:usp.Msg.header)
  
  ::usp::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::usp::Header* Msg::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::usp::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::usp::Header* Msg::mutable_header() {
  // @@protoc_insertion_point(field_mutable:usp.Msg.header)
  return _internal_mutable_header();
}
inline void Msg::set_allocated_header(::usp::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:usp.Msg.header)
}

// .usp.Body body = 2;
inline bool Msg::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool Msg::has_body() const {
  return _internal_has_body();
}
inline void Msg::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::usp::Body& Msg::_internal_body() const {
  const ::usp::Body* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::usp::Body*>(
      &::usp::_Body_default_instance_);
}
inline const ::usp::Body& Msg::body() const {
  // @@protoc_insertion_point(field_get:usp.Msg.body)
  return _internal_body();
}
inline void Msg::unsafe_arena_set_allocated_body(
    ::usp::Body* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Msg.body)
}
inline ::usp::Body* Msg::release_body() {
  
  ::usp::Body* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::usp::Body* Msg::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:usp.Msg.body)
  
  ::usp::Body* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::usp::Body* Msg::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::usp::Body>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::usp::Body* Msg::mutable_body() {
  // @@protoc_insertion_point(field_mutable:usp.Msg.body)
  return _internal_mutable_body();
}
inline void Msg::set_allocated_body(::usp::Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:usp.Msg.body)
}

// -------------------------------------------------------------------

// Header

// string msg_id = 1;
inline void Header::clear_msg_id() {
  msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::msg_id() const {
  // @@protoc_insertion_point(field_get:usp.Header.msg_id)
  return _internal_msg_id();
}
inline void Header::set_msg_id(const std::string& value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:usp.Header.msg_id)
}
inline std::string* Header::mutable_msg_id() {
  // @@protoc_insertion_point(field_mutable:usp.Header.msg_id)
  return _internal_mutable_msg_id();
}
inline const std::string& Header::_internal_msg_id() const {
  return msg_id_.Get();
}
inline void Header::_internal_set_msg_id(const std::string& value) {
  
  msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_msg_id(std::string&& value) {
  
  msg_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Header.msg_id)
}
inline void Header::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Header.msg_id)
}
inline void Header::set_msg_id(const char* value,
    size_t size) {
  
  msg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Header.msg_id)
}
inline std::string* Header::_internal_mutable_msg_id() {
  
  return msg_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_msg_id() {
  // @@protoc_insertion_point(field_release:usp.Header.msg_id)
  return msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Header.msg_id)
}

// .usp.Header.MsgType msg_type = 2;
inline void Header::clear_msg_type() {
  msg_type_ = 0;
}
inline ::usp::Header_MsgType Header::_internal_msg_type() const {
  return static_cast< ::usp::Header_MsgType >(msg_type_);
}
inline ::usp::Header_MsgType Header::msg_type() const {
  // @@protoc_insertion_point(field_get:usp.Header.msg_type)
  return _internal_msg_type();
}
inline void Header::_internal_set_msg_type(::usp::Header_MsgType value) {
  
  msg_type_ = value;
}
inline void Header::set_msg_type(::usp::Header_MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:usp.Header.msg_type)
}

// -------------------------------------------------------------------

// Body

// .usp.Request request = 1;
inline bool Body::_internal_has_request() const {
  return msg_body_case() == kRequest;
}
inline bool Body::has_request() const {
  return _internal_has_request();
}
inline void Body::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void Body::clear_request() {
  if (_internal_has_request()) {
    if (GetArena() == nullptr) {
      delete msg_body_.request_;
    }
    clear_has_msg_body();
  }
}
inline ::usp::Request* Body::release_request() {
  // @@protoc_insertion_point(field_release:usp.Body.request)
  if (_internal_has_request()) {
    clear_has_msg_body();
      ::usp::Request* temp = msg_body_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_body_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Request& Body::_internal_request() const {
  return _internal_has_request()
      ? *msg_body_.request_
      : *reinterpret_cast< ::usp::Request*>(&::usp::_Request_default_instance_);
}
inline const ::usp::Request& Body::request() const {
  // @@protoc_insertion_point(field_get:usp.Body.request)
  return _internal_request();
}
inline ::usp::Request* Body::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Body.request)
  if (_internal_has_request()) {
    clear_has_msg_body();
    ::usp::Request* temp = msg_body_.request_;
    msg_body_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Body::unsafe_arena_set_allocated_request(::usp::Request* request) {
  clear_msg_body();
  if (request) {
    set_has_request();
    msg_body_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Body.request)
}
inline ::usp::Request* Body::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_msg_body();
    set_has_request();
    msg_body_.request_ = CreateMaybeMessage< ::usp::Request >(GetArena());
  }
  return msg_body_.request_;
}
inline ::usp::Request* Body::mutable_request() {
  // @@protoc_insertion_point(field_mutable:usp.Body.request)
  return _internal_mutable_request();
}

// .usp.Response response = 2;
inline bool Body::_internal_has_response() const {
  return msg_body_case() == kResponse;
}
inline bool Body::has_response() const {
  return _internal_has_response();
}
inline void Body::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void Body::clear_response() {
  if (_internal_has_response()) {
    if (GetArena() == nullptr) {
      delete msg_body_.response_;
    }
    clear_has_msg_body();
  }
}
inline ::usp::Response* Body::release_response() {
  // @@protoc_insertion_point(field_release:usp.Body.response)
  if (_internal_has_response()) {
    clear_has_msg_body();
      ::usp::Response* temp = msg_body_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_body_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Response& Body::_internal_response() const {
  return _internal_has_response()
      ? *msg_body_.response_
      : *reinterpret_cast< ::usp::Response*>(&::usp::_Response_default_instance_);
}
inline const ::usp::Response& Body::response() const {
  // @@protoc_insertion_point(field_get:usp.Body.response)
  return _internal_response();
}
inline ::usp::Response* Body::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Body.response)
  if (_internal_has_response()) {
    clear_has_msg_body();
    ::usp::Response* temp = msg_body_.response_;
    msg_body_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Body::unsafe_arena_set_allocated_response(::usp::Response* response) {
  clear_msg_body();
  if (response) {
    set_has_response();
    msg_body_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Body.response)
}
inline ::usp::Response* Body::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_msg_body();
    set_has_response();
    msg_body_.response_ = CreateMaybeMessage< ::usp::Response >(GetArena());
  }
  return msg_body_.response_;
}
inline ::usp::Response* Body::mutable_response() {
  // @@protoc_insertion_point(field_mutable:usp.Body.response)
  return _internal_mutable_response();
}

// .usp.Error error = 3;
inline bool Body::_internal_has_error() const {
  return msg_body_case() == kError;
}
inline bool Body::has_error() const {
  return _internal_has_error();
}
inline void Body::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Body::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete msg_body_.error_;
    }
    clear_has_msg_body();
  }
}
inline ::usp::Error* Body::release_error() {
  // @@protoc_insertion_point(field_release:usp.Body.error)
  if (_internal_has_error()) {
    clear_has_msg_body();
      ::usp::Error* temp = msg_body_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_body_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Error& Body::_internal_error() const {
  return _internal_has_error()
      ? *msg_body_.error_
      : *reinterpret_cast< ::usp::Error*>(&::usp::_Error_default_instance_);
}
inline const ::usp::Error& Body::error() const {
  // @@protoc_insertion_point(field_get:usp.Body.error)
  return _internal_error();
}
inline ::usp::Error* Body::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Body.error)
  if (_internal_has_error()) {
    clear_has_msg_body();
    ::usp::Error* temp = msg_body_.error_;
    msg_body_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Body::unsafe_arena_set_allocated_error(::usp::Error* error) {
  clear_msg_body();
  if (error) {
    set_has_error();
    msg_body_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Body.error)
}
inline ::usp::Error* Body::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_msg_body();
    set_has_error();
    msg_body_.error_ = CreateMaybeMessage< ::usp::Error >(GetArena());
  }
  return msg_body_.error_;
}
inline ::usp::Error* Body::mutable_error() {
  // @@protoc_insertion_point(field_mutable:usp.Body.error)
  return _internal_mutable_error();
}

inline bool Body::has_msg_body() const {
  return msg_body_case() != MSG_BODY_NOT_SET;
}
inline void Body::clear_has_msg_body() {
  _oneof_case_[0] = MSG_BODY_NOT_SET;
}
inline Body::MsgBodyCase Body::msg_body_case() const {
  return Body::MsgBodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request

// .usp.Get get = 1;
inline bool Request::_internal_has_get() const {
  return req_type_case() == kGet;
}
inline bool Request::has_get() const {
  return _internal_has_get();
}
inline void Request::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void Request::clear_get() {
  if (_internal_has_get()) {
    if (GetArena() == nullptr) {
      delete req_type_.get_;
    }
    clear_has_req_type();
  }
}
inline ::usp::Get* Request::release_get() {
  // @@protoc_insertion_point(field_release:usp.Request.get)
  if (_internal_has_get()) {
    clear_has_req_type();
      ::usp::Get* temp = req_type_.get_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Get& Request::_internal_get() const {
  return _internal_has_get()
      ? *req_type_.get_
      : *reinterpret_cast< ::usp::Get*>(&::usp::_Get_default_instance_);
}
inline const ::usp::Get& Request::get() const {
  // @@protoc_insertion_point(field_get:usp.Request.get)
  return _internal_get();
}
inline ::usp::Get* Request::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.get)
  if (_internal_has_get()) {
    clear_has_req_type();
    ::usp::Get* temp = req_type_.get_;
    req_type_.get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get(::usp::Get* get) {
  clear_req_type();
  if (get) {
    set_has_get();
    req_type_.get_ = get;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.get)
}
inline ::usp::Get* Request::_internal_mutable_get() {
  if (!_internal_has_get()) {
    clear_req_type();
    set_has_get();
    req_type_.get_ = CreateMaybeMessage< ::usp::Get >(GetArena());
  }
  return req_type_.get_;
}
inline ::usp::Get* Request::mutable_get() {
  // @@protoc_insertion_point(field_mutable:usp.Request.get)
  return _internal_mutable_get();
}

// .usp.GetSupportedDM get_supported_dm = 2;
inline bool Request::_internal_has_get_supported_dm() const {
  return req_type_case() == kGetSupportedDm;
}
inline bool Request::has_get_supported_dm() const {
  return _internal_has_get_supported_dm();
}
inline void Request::set_has_get_supported_dm() {
  _oneof_case_[0] = kGetSupportedDm;
}
inline void Request::clear_get_supported_dm() {
  if (_internal_has_get_supported_dm()) {
    if (GetArena() == nullptr) {
      delete req_type_.get_supported_dm_;
    }
    clear_has_req_type();
  }
}
inline ::usp::GetSupportedDM* Request::release_get_supported_dm() {
  // @@protoc_insertion_point(field_release:usp.Request.get_supported_dm)
  if (_internal_has_get_supported_dm()) {
    clear_has_req_type();
      ::usp::GetSupportedDM* temp = req_type_.get_supported_dm_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.get_supported_dm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetSupportedDM& Request::_internal_get_supported_dm() const {
  return _internal_has_get_supported_dm()
      ? *req_type_.get_supported_dm_
      : *reinterpret_cast< ::usp::GetSupportedDM*>(&::usp::_GetSupportedDM_default_instance_);
}
inline const ::usp::GetSupportedDM& Request::get_supported_dm() const {
  // @@protoc_insertion_point(field_get:usp.Request.get_supported_dm)
  return _internal_get_supported_dm();
}
inline ::usp::GetSupportedDM* Request::unsafe_arena_release_get_supported_dm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.get_supported_dm)
  if (_internal_has_get_supported_dm()) {
    clear_has_req_type();
    ::usp::GetSupportedDM* temp = req_type_.get_supported_dm_;
    req_type_.get_supported_dm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_supported_dm(::usp::GetSupportedDM* get_supported_dm) {
  clear_req_type();
  if (get_supported_dm) {
    set_has_get_supported_dm();
    req_type_.get_supported_dm_ = get_supported_dm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.get_supported_dm)
}
inline ::usp::GetSupportedDM* Request::_internal_mutable_get_supported_dm() {
  if (!_internal_has_get_supported_dm()) {
    clear_req_type();
    set_has_get_supported_dm();
    req_type_.get_supported_dm_ = CreateMaybeMessage< ::usp::GetSupportedDM >(GetArena());
  }
  return req_type_.get_supported_dm_;
}
inline ::usp::GetSupportedDM* Request::mutable_get_supported_dm() {
  // @@protoc_insertion_point(field_mutable:usp.Request.get_supported_dm)
  return _internal_mutable_get_supported_dm();
}

// .usp.GetInstances get_instances = 3;
inline bool Request::_internal_has_get_instances() const {
  return req_type_case() == kGetInstances;
}
inline bool Request::has_get_instances() const {
  return _internal_has_get_instances();
}
inline void Request::set_has_get_instances() {
  _oneof_case_[0] = kGetInstances;
}
inline void Request::clear_get_instances() {
  if (_internal_has_get_instances()) {
    if (GetArena() == nullptr) {
      delete req_type_.get_instances_;
    }
    clear_has_req_type();
  }
}
inline ::usp::GetInstances* Request::release_get_instances() {
  // @@protoc_insertion_point(field_release:usp.Request.get_instances)
  if (_internal_has_get_instances()) {
    clear_has_req_type();
      ::usp::GetInstances* temp = req_type_.get_instances_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.get_instances_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetInstances& Request::_internal_get_instances() const {
  return _internal_has_get_instances()
      ? *req_type_.get_instances_
      : *reinterpret_cast< ::usp::GetInstances*>(&::usp::_GetInstances_default_instance_);
}
inline const ::usp::GetInstances& Request::get_instances() const {
  // @@protoc_insertion_point(field_get:usp.Request.get_instances)
  return _internal_get_instances();
}
inline ::usp::GetInstances* Request::unsafe_arena_release_get_instances() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.get_instances)
  if (_internal_has_get_instances()) {
    clear_has_req_type();
    ::usp::GetInstances* temp = req_type_.get_instances_;
    req_type_.get_instances_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_instances(::usp::GetInstances* get_instances) {
  clear_req_type();
  if (get_instances) {
    set_has_get_instances();
    req_type_.get_instances_ = get_instances;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.get_instances)
}
inline ::usp::GetInstances* Request::_internal_mutable_get_instances() {
  if (!_internal_has_get_instances()) {
    clear_req_type();
    set_has_get_instances();
    req_type_.get_instances_ = CreateMaybeMessage< ::usp::GetInstances >(GetArena());
  }
  return req_type_.get_instances_;
}
inline ::usp::GetInstances* Request::mutable_get_instances() {
  // @@protoc_insertion_point(field_mutable:usp.Request.get_instances)
  return _internal_mutable_get_instances();
}

// .usp.Set set = 4;
inline bool Request::_internal_has_set() const {
  return req_type_case() == kSet;
}
inline bool Request::has_set() const {
  return _internal_has_set();
}
inline void Request::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void Request::clear_set() {
  if (_internal_has_set()) {
    if (GetArena() == nullptr) {
      delete req_type_.set_;
    }
    clear_has_req_type();
  }
}
inline ::usp::Set* Request::release_set() {
  // @@protoc_insertion_point(field_release:usp.Request.set)
  if (_internal_has_set()) {
    clear_has_req_type();
      ::usp::Set* temp = req_type_.set_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Set& Request::_internal_set() const {
  return _internal_has_set()
      ? *req_type_.set_
      : *reinterpret_cast< ::usp::Set*>(&::usp::_Set_default_instance_);
}
inline const ::usp::Set& Request::set() const {
  // @@protoc_insertion_point(field_get:usp.Request.set)
  return _internal_set();
}
inline ::usp::Set* Request::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.set)
  if (_internal_has_set()) {
    clear_has_req_type();
    ::usp::Set* temp = req_type_.set_;
    req_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set(::usp::Set* set) {
  clear_req_type();
  if (set) {
    set_has_set();
    req_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.set)
}
inline ::usp::Set* Request::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_req_type();
    set_has_set();
    req_type_.set_ = CreateMaybeMessage< ::usp::Set >(GetArena());
  }
  return req_type_.set_;
}
inline ::usp::Set* Request::mutable_set() {
  // @@protoc_insertion_point(field_mutable:usp.Request.set)
  return _internal_mutable_set();
}

// .usp.Add add = 5;
inline bool Request::_internal_has_add() const {
  return req_type_case() == kAdd;
}
inline bool Request::has_add() const {
  return _internal_has_add();
}
inline void Request::set_has_add() {
  _oneof_case_[0] = kAdd;
}
inline void Request::clear_add() {
  if (_internal_has_add()) {
    if (GetArena() == nullptr) {
      delete req_type_.add_;
    }
    clear_has_req_type();
  }
}
inline ::usp::Add* Request::release_add() {
  // @@protoc_insertion_point(field_release:usp.Request.add)
  if (_internal_has_add()) {
    clear_has_req_type();
      ::usp::Add* temp = req_type_.add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Add& Request::_internal_add() const {
  return _internal_has_add()
      ? *req_type_.add_
      : *reinterpret_cast< ::usp::Add*>(&::usp::_Add_default_instance_);
}
inline const ::usp::Add& Request::add() const {
  // @@protoc_insertion_point(field_get:usp.Request.add)
  return _internal_add();
}
inline ::usp::Add* Request::unsafe_arena_release_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.add)
  if (_internal_has_add()) {
    clear_has_req_type();
    ::usp::Add* temp = req_type_.add_;
    req_type_.add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_add(::usp::Add* add) {
  clear_req_type();
  if (add) {
    set_has_add();
    req_type_.add_ = add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.add)
}
inline ::usp::Add* Request::_internal_mutable_add() {
  if (!_internal_has_add()) {
    clear_req_type();
    set_has_add();
    req_type_.add_ = CreateMaybeMessage< ::usp::Add >(GetArena());
  }
  return req_type_.add_;
}
inline ::usp::Add* Request::mutable_add() {
  // @@protoc_insertion_point(field_mutable:usp.Request.add)
  return _internal_mutable_add();
}

// .usp.Delete delete = 6;
inline bool Request::_internal_has_delete_() const {
  return req_type_case() == kDelete;
}
inline bool Request::has_delete_() const {
  return _internal_has_delete_();
}
inline void Request::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Request::clear_delete_() {
  if (_internal_has_delete_()) {
    if (GetArena() == nullptr) {
      delete req_type_.delete__;
    }
    clear_has_req_type();
  }
}
inline ::usp::Delete* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:usp.Request.delete)
  if (_internal_has_delete_()) {
    clear_has_req_type();
      ::usp::Delete* temp = req_type_.delete__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Delete& Request::_internal_delete_() const {
  return _internal_has_delete_()
      ? *req_type_.delete__
      : *reinterpret_cast< ::usp::Delete*>(&::usp::_Delete_default_instance_);
}
inline const ::usp::Delete& Request::delete_() const {
  // @@protoc_insertion_point(field_get:usp.Request.delete)
  return _internal_delete_();
}
inline ::usp::Delete* Request::unsafe_arena_release_delete_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.delete)
  if (_internal_has_delete_()) {
    clear_has_req_type();
    ::usp::Delete* temp = req_type_.delete__;
    req_type_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_delete_(::usp::Delete* delete_) {
  clear_req_type();
  if (delete_) {
    set_has_delete_();
    req_type_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.delete)
}
inline ::usp::Delete* Request::_internal_mutable_delete_() {
  if (!_internal_has_delete_()) {
    clear_req_type();
    set_has_delete_();
    req_type_.delete__ = CreateMaybeMessage< ::usp::Delete >(GetArena());
  }
  return req_type_.delete__;
}
inline ::usp::Delete* Request::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable:usp.Request.delete)
  return _internal_mutable_delete_();
}

// .usp.Operate operate = 7;
inline bool Request::_internal_has_operate() const {
  return req_type_case() == kOperate;
}
inline bool Request::has_operate() const {
  return _internal_has_operate();
}
inline void Request::set_has_operate() {
  _oneof_case_[0] = kOperate;
}
inline void Request::clear_operate() {
  if (_internal_has_operate()) {
    if (GetArena() == nullptr) {
      delete req_type_.operate_;
    }
    clear_has_req_type();
  }
}
inline ::usp::Operate* Request::release_operate() {
  // @@protoc_insertion_point(field_release:usp.Request.operate)
  if (_internal_has_operate()) {
    clear_has_req_type();
      ::usp::Operate* temp = req_type_.operate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.operate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Operate& Request::_internal_operate() const {
  return _internal_has_operate()
      ? *req_type_.operate_
      : *reinterpret_cast< ::usp::Operate*>(&::usp::_Operate_default_instance_);
}
inline const ::usp::Operate& Request::operate() const {
  // @@protoc_insertion_point(field_get:usp.Request.operate)
  return _internal_operate();
}
inline ::usp::Operate* Request::unsafe_arena_release_operate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.operate)
  if (_internal_has_operate()) {
    clear_has_req_type();
    ::usp::Operate* temp = req_type_.operate_;
    req_type_.operate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_operate(::usp::Operate* operate) {
  clear_req_type();
  if (operate) {
    set_has_operate();
    req_type_.operate_ = operate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.operate)
}
inline ::usp::Operate* Request::_internal_mutable_operate() {
  if (!_internal_has_operate()) {
    clear_req_type();
    set_has_operate();
    req_type_.operate_ = CreateMaybeMessage< ::usp::Operate >(GetArena());
  }
  return req_type_.operate_;
}
inline ::usp::Operate* Request::mutable_operate() {
  // @@protoc_insertion_point(field_mutable:usp.Request.operate)
  return _internal_mutable_operate();
}

// .usp.Notify notify = 8;
inline bool Request::_internal_has_notify() const {
  return req_type_case() == kNotify;
}
inline bool Request::has_notify() const {
  return _internal_has_notify();
}
inline void Request::set_has_notify() {
  _oneof_case_[0] = kNotify;
}
inline void Request::clear_notify() {
  if (_internal_has_notify()) {
    if (GetArena() == nullptr) {
      delete req_type_.notify_;
    }
    clear_has_req_type();
  }
}
inline ::usp::Notify* Request::release_notify() {
  // @@protoc_insertion_point(field_release:usp.Request.notify)
  if (_internal_has_notify()) {
    clear_has_req_type();
      ::usp::Notify* temp = req_type_.notify_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.notify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify& Request::_internal_notify() const {
  return _internal_has_notify()
      ? *req_type_.notify_
      : *reinterpret_cast< ::usp::Notify*>(&::usp::_Notify_default_instance_);
}
inline const ::usp::Notify& Request::notify() const {
  // @@protoc_insertion_point(field_get:usp.Request.notify)
  return _internal_notify();
}
inline ::usp::Notify* Request::unsafe_arena_release_notify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.notify)
  if (_internal_has_notify()) {
    clear_has_req_type();
    ::usp::Notify* temp = req_type_.notify_;
    req_type_.notify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_notify(::usp::Notify* notify) {
  clear_req_type();
  if (notify) {
    set_has_notify();
    req_type_.notify_ = notify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.notify)
}
inline ::usp::Notify* Request::_internal_mutable_notify() {
  if (!_internal_has_notify()) {
    clear_req_type();
    set_has_notify();
    req_type_.notify_ = CreateMaybeMessage< ::usp::Notify >(GetArena());
  }
  return req_type_.notify_;
}
inline ::usp::Notify* Request::mutable_notify() {
  // @@protoc_insertion_point(field_mutable:usp.Request.notify)
  return _internal_mutable_notify();
}

// .usp.GetSupportedProtocol get_supported_protocol = 9;
inline bool Request::_internal_has_get_supported_protocol() const {
  return req_type_case() == kGetSupportedProtocol;
}
inline bool Request::has_get_supported_protocol() const {
  return _internal_has_get_supported_protocol();
}
inline void Request::set_has_get_supported_protocol() {
  _oneof_case_[0] = kGetSupportedProtocol;
}
inline void Request::clear_get_supported_protocol() {
  if (_internal_has_get_supported_protocol()) {
    if (GetArena() == nullptr) {
      delete req_type_.get_supported_protocol_;
    }
    clear_has_req_type();
  }
}
inline ::usp::GetSupportedProtocol* Request::release_get_supported_protocol() {
  // @@protoc_insertion_point(field_release:usp.Request.get_supported_protocol)
  if (_internal_has_get_supported_protocol()) {
    clear_has_req_type();
      ::usp::GetSupportedProtocol* temp = req_type_.get_supported_protocol_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    req_type_.get_supported_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetSupportedProtocol& Request::_internal_get_supported_protocol() const {
  return _internal_has_get_supported_protocol()
      ? *req_type_.get_supported_protocol_
      : *reinterpret_cast< ::usp::GetSupportedProtocol*>(&::usp::_GetSupportedProtocol_default_instance_);
}
inline const ::usp::GetSupportedProtocol& Request::get_supported_protocol() const {
  // @@protoc_insertion_point(field_get:usp.Request.get_supported_protocol)
  return _internal_get_supported_protocol();
}
inline ::usp::GetSupportedProtocol* Request::unsafe_arena_release_get_supported_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Request.get_supported_protocol)
  if (_internal_has_get_supported_protocol()) {
    clear_has_req_type();
    ::usp::GetSupportedProtocol* temp = req_type_.get_supported_protocol_;
    req_type_.get_supported_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_supported_protocol(::usp::GetSupportedProtocol* get_supported_protocol) {
  clear_req_type();
  if (get_supported_protocol) {
    set_has_get_supported_protocol();
    req_type_.get_supported_protocol_ = get_supported_protocol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Request.get_supported_protocol)
}
inline ::usp::GetSupportedProtocol* Request::_internal_mutable_get_supported_protocol() {
  if (!_internal_has_get_supported_protocol()) {
    clear_req_type();
    set_has_get_supported_protocol();
    req_type_.get_supported_protocol_ = CreateMaybeMessage< ::usp::GetSupportedProtocol >(GetArena());
  }
  return req_type_.get_supported_protocol_;
}
inline ::usp::GetSupportedProtocol* Request::mutable_get_supported_protocol() {
  // @@protoc_insertion_point(field_mutable:usp.Request.get_supported_protocol)
  return _internal_mutable_get_supported_protocol();
}

inline bool Request::has_req_type() const {
  return req_type_case() != REQ_TYPE_NOT_SET;
}
inline void Request::clear_has_req_type() {
  _oneof_case_[0] = REQ_TYPE_NOT_SET;
}
inline Request::ReqTypeCase Request::req_type_case() const {
  return Request::ReqTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .usp.GetResp get_resp = 1;
inline bool Response::_internal_has_get_resp() const {
  return resp_type_case() == kGetResp;
}
inline bool Response::has_get_resp() const {
  return _internal_has_get_resp();
}
inline void Response::set_has_get_resp() {
  _oneof_case_[0] = kGetResp;
}
inline void Response::clear_get_resp() {
  if (_internal_has_get_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.get_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::GetResp* Response::release_get_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.get_resp)
  if (_internal_has_get_resp()) {
    clear_has_resp_type();
      ::usp::GetResp* temp = resp_type_.get_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.get_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetResp& Response::_internal_get_resp() const {
  return _internal_has_get_resp()
      ? *resp_type_.get_resp_
      : *reinterpret_cast< ::usp::GetResp*>(&::usp::_GetResp_default_instance_);
}
inline const ::usp::GetResp& Response::get_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.get_resp)
  return _internal_get_resp();
}
inline ::usp::GetResp* Response::unsafe_arena_release_get_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.get_resp)
  if (_internal_has_get_resp()) {
    clear_has_resp_type();
    ::usp::GetResp* temp = resp_type_.get_resp_;
    resp_type_.get_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_resp(::usp::GetResp* get_resp) {
  clear_resp_type();
  if (get_resp) {
    set_has_get_resp();
    resp_type_.get_resp_ = get_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.get_resp)
}
inline ::usp::GetResp* Response::_internal_mutable_get_resp() {
  if (!_internal_has_get_resp()) {
    clear_resp_type();
    set_has_get_resp();
    resp_type_.get_resp_ = CreateMaybeMessage< ::usp::GetResp >(GetArena());
  }
  return resp_type_.get_resp_;
}
inline ::usp::GetResp* Response::mutable_get_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.get_resp)
  return _internal_mutable_get_resp();
}

// .usp.GetSupportedDMResp get_supported_dm_resp = 2;
inline bool Response::_internal_has_get_supported_dm_resp() const {
  return resp_type_case() == kGetSupportedDmResp;
}
inline bool Response::has_get_supported_dm_resp() const {
  return _internal_has_get_supported_dm_resp();
}
inline void Response::set_has_get_supported_dm_resp() {
  _oneof_case_[0] = kGetSupportedDmResp;
}
inline void Response::clear_get_supported_dm_resp() {
  if (_internal_has_get_supported_dm_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.get_supported_dm_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::GetSupportedDMResp* Response::release_get_supported_dm_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.get_supported_dm_resp)
  if (_internal_has_get_supported_dm_resp()) {
    clear_has_resp_type();
      ::usp::GetSupportedDMResp* temp = resp_type_.get_supported_dm_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.get_supported_dm_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetSupportedDMResp& Response::_internal_get_supported_dm_resp() const {
  return _internal_has_get_supported_dm_resp()
      ? *resp_type_.get_supported_dm_resp_
      : *reinterpret_cast< ::usp::GetSupportedDMResp*>(&::usp::_GetSupportedDMResp_default_instance_);
}
inline const ::usp::GetSupportedDMResp& Response::get_supported_dm_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.get_supported_dm_resp)
  return _internal_get_supported_dm_resp();
}
inline ::usp::GetSupportedDMResp* Response::unsafe_arena_release_get_supported_dm_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.get_supported_dm_resp)
  if (_internal_has_get_supported_dm_resp()) {
    clear_has_resp_type();
    ::usp::GetSupportedDMResp* temp = resp_type_.get_supported_dm_resp_;
    resp_type_.get_supported_dm_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_supported_dm_resp(::usp::GetSupportedDMResp* get_supported_dm_resp) {
  clear_resp_type();
  if (get_supported_dm_resp) {
    set_has_get_supported_dm_resp();
    resp_type_.get_supported_dm_resp_ = get_supported_dm_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.get_supported_dm_resp)
}
inline ::usp::GetSupportedDMResp* Response::_internal_mutable_get_supported_dm_resp() {
  if (!_internal_has_get_supported_dm_resp()) {
    clear_resp_type();
    set_has_get_supported_dm_resp();
    resp_type_.get_supported_dm_resp_ = CreateMaybeMessage< ::usp::GetSupportedDMResp >(GetArena());
  }
  return resp_type_.get_supported_dm_resp_;
}
inline ::usp::GetSupportedDMResp* Response::mutable_get_supported_dm_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.get_supported_dm_resp)
  return _internal_mutable_get_supported_dm_resp();
}

// .usp.GetInstancesResp get_instances_resp = 3;
inline bool Response::_internal_has_get_instances_resp() const {
  return resp_type_case() == kGetInstancesResp;
}
inline bool Response::has_get_instances_resp() const {
  return _internal_has_get_instances_resp();
}
inline void Response::set_has_get_instances_resp() {
  _oneof_case_[0] = kGetInstancesResp;
}
inline void Response::clear_get_instances_resp() {
  if (_internal_has_get_instances_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.get_instances_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::GetInstancesResp* Response::release_get_instances_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.get_instances_resp)
  if (_internal_has_get_instances_resp()) {
    clear_has_resp_type();
      ::usp::GetInstancesResp* temp = resp_type_.get_instances_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.get_instances_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetInstancesResp& Response::_internal_get_instances_resp() const {
  return _internal_has_get_instances_resp()
      ? *resp_type_.get_instances_resp_
      : *reinterpret_cast< ::usp::GetInstancesResp*>(&::usp::_GetInstancesResp_default_instance_);
}
inline const ::usp::GetInstancesResp& Response::get_instances_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.get_instances_resp)
  return _internal_get_instances_resp();
}
inline ::usp::GetInstancesResp* Response::unsafe_arena_release_get_instances_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.get_instances_resp)
  if (_internal_has_get_instances_resp()) {
    clear_has_resp_type();
    ::usp::GetInstancesResp* temp = resp_type_.get_instances_resp_;
    resp_type_.get_instances_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_instances_resp(::usp::GetInstancesResp* get_instances_resp) {
  clear_resp_type();
  if (get_instances_resp) {
    set_has_get_instances_resp();
    resp_type_.get_instances_resp_ = get_instances_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.get_instances_resp)
}
inline ::usp::GetInstancesResp* Response::_internal_mutable_get_instances_resp() {
  if (!_internal_has_get_instances_resp()) {
    clear_resp_type();
    set_has_get_instances_resp();
    resp_type_.get_instances_resp_ = CreateMaybeMessage< ::usp::GetInstancesResp >(GetArena());
  }
  return resp_type_.get_instances_resp_;
}
inline ::usp::GetInstancesResp* Response::mutable_get_instances_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.get_instances_resp)
  return _internal_mutable_get_instances_resp();
}

// .usp.SetResp set_resp = 4;
inline bool Response::_internal_has_set_resp() const {
  return resp_type_case() == kSetResp;
}
inline bool Response::has_set_resp() const {
  return _internal_has_set_resp();
}
inline void Response::set_has_set_resp() {
  _oneof_case_[0] = kSetResp;
}
inline void Response::clear_set_resp() {
  if (_internal_has_set_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.set_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::SetResp* Response::release_set_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.set_resp)
  if (_internal_has_set_resp()) {
    clear_has_resp_type();
      ::usp::SetResp* temp = resp_type_.set_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.set_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::SetResp& Response::_internal_set_resp() const {
  return _internal_has_set_resp()
      ? *resp_type_.set_resp_
      : *reinterpret_cast< ::usp::SetResp*>(&::usp::_SetResp_default_instance_);
}
inline const ::usp::SetResp& Response::set_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.set_resp)
  return _internal_set_resp();
}
inline ::usp::SetResp* Response::unsafe_arena_release_set_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.set_resp)
  if (_internal_has_set_resp()) {
    clear_has_resp_type();
    ::usp::SetResp* temp = resp_type_.set_resp_;
    resp_type_.set_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_set_resp(::usp::SetResp* set_resp) {
  clear_resp_type();
  if (set_resp) {
    set_has_set_resp();
    resp_type_.set_resp_ = set_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.set_resp)
}
inline ::usp::SetResp* Response::_internal_mutable_set_resp() {
  if (!_internal_has_set_resp()) {
    clear_resp_type();
    set_has_set_resp();
    resp_type_.set_resp_ = CreateMaybeMessage< ::usp::SetResp >(GetArena());
  }
  return resp_type_.set_resp_;
}
inline ::usp::SetResp* Response::mutable_set_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.set_resp)
  return _internal_mutable_set_resp();
}

// .usp.AddResp add_resp = 5;
inline bool Response::_internal_has_add_resp() const {
  return resp_type_case() == kAddResp;
}
inline bool Response::has_add_resp() const {
  return _internal_has_add_resp();
}
inline void Response::set_has_add_resp() {
  _oneof_case_[0] = kAddResp;
}
inline void Response::clear_add_resp() {
  if (_internal_has_add_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.add_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::AddResp* Response::release_add_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.add_resp)
  if (_internal_has_add_resp()) {
    clear_has_resp_type();
      ::usp::AddResp* temp = resp_type_.add_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.add_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::AddResp& Response::_internal_add_resp() const {
  return _internal_has_add_resp()
      ? *resp_type_.add_resp_
      : *reinterpret_cast< ::usp::AddResp*>(&::usp::_AddResp_default_instance_);
}
inline const ::usp::AddResp& Response::add_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.add_resp)
  return _internal_add_resp();
}
inline ::usp::AddResp* Response::unsafe_arena_release_add_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.add_resp)
  if (_internal_has_add_resp()) {
    clear_has_resp_type();
    ::usp::AddResp* temp = resp_type_.add_resp_;
    resp_type_.add_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_add_resp(::usp::AddResp* add_resp) {
  clear_resp_type();
  if (add_resp) {
    set_has_add_resp();
    resp_type_.add_resp_ = add_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.add_resp)
}
inline ::usp::AddResp* Response::_internal_mutable_add_resp() {
  if (!_internal_has_add_resp()) {
    clear_resp_type();
    set_has_add_resp();
    resp_type_.add_resp_ = CreateMaybeMessage< ::usp::AddResp >(GetArena());
  }
  return resp_type_.add_resp_;
}
inline ::usp::AddResp* Response::mutable_add_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.add_resp)
  return _internal_mutable_add_resp();
}

// .usp.DeleteResp delete_resp = 6;
inline bool Response::_internal_has_delete_resp() const {
  return resp_type_case() == kDeleteResp;
}
inline bool Response::has_delete_resp() const {
  return _internal_has_delete_resp();
}
inline void Response::set_has_delete_resp() {
  _oneof_case_[0] = kDeleteResp;
}
inline void Response::clear_delete_resp() {
  if (_internal_has_delete_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.delete_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::DeleteResp* Response::release_delete_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.delete_resp)
  if (_internal_has_delete_resp()) {
    clear_has_resp_type();
      ::usp::DeleteResp* temp = resp_type_.delete_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.delete_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::DeleteResp& Response::_internal_delete_resp() const {
  return _internal_has_delete_resp()
      ? *resp_type_.delete_resp_
      : *reinterpret_cast< ::usp::DeleteResp*>(&::usp::_DeleteResp_default_instance_);
}
inline const ::usp::DeleteResp& Response::delete_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.delete_resp)
  return _internal_delete_resp();
}
inline ::usp::DeleteResp* Response::unsafe_arena_release_delete_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.delete_resp)
  if (_internal_has_delete_resp()) {
    clear_has_resp_type();
    ::usp::DeleteResp* temp = resp_type_.delete_resp_;
    resp_type_.delete_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_delete_resp(::usp::DeleteResp* delete_resp) {
  clear_resp_type();
  if (delete_resp) {
    set_has_delete_resp();
    resp_type_.delete_resp_ = delete_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.delete_resp)
}
inline ::usp::DeleteResp* Response::_internal_mutable_delete_resp() {
  if (!_internal_has_delete_resp()) {
    clear_resp_type();
    set_has_delete_resp();
    resp_type_.delete_resp_ = CreateMaybeMessage< ::usp::DeleteResp >(GetArena());
  }
  return resp_type_.delete_resp_;
}
inline ::usp::DeleteResp* Response::mutable_delete_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.delete_resp)
  return _internal_mutable_delete_resp();
}

// .usp.OperateResp operate_resp = 7;
inline bool Response::_internal_has_operate_resp() const {
  return resp_type_case() == kOperateResp;
}
inline bool Response::has_operate_resp() const {
  return _internal_has_operate_resp();
}
inline void Response::set_has_operate_resp() {
  _oneof_case_[0] = kOperateResp;
}
inline void Response::clear_operate_resp() {
  if (_internal_has_operate_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.operate_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::OperateResp* Response::release_operate_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.operate_resp)
  if (_internal_has_operate_resp()) {
    clear_has_resp_type();
      ::usp::OperateResp* temp = resp_type_.operate_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.operate_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::OperateResp& Response::_internal_operate_resp() const {
  return _internal_has_operate_resp()
      ? *resp_type_.operate_resp_
      : *reinterpret_cast< ::usp::OperateResp*>(&::usp::_OperateResp_default_instance_);
}
inline const ::usp::OperateResp& Response::operate_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.operate_resp)
  return _internal_operate_resp();
}
inline ::usp::OperateResp* Response::unsafe_arena_release_operate_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.operate_resp)
  if (_internal_has_operate_resp()) {
    clear_has_resp_type();
    ::usp::OperateResp* temp = resp_type_.operate_resp_;
    resp_type_.operate_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_operate_resp(::usp::OperateResp* operate_resp) {
  clear_resp_type();
  if (operate_resp) {
    set_has_operate_resp();
    resp_type_.operate_resp_ = operate_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.operate_resp)
}
inline ::usp::OperateResp* Response::_internal_mutable_operate_resp() {
  if (!_internal_has_operate_resp()) {
    clear_resp_type();
    set_has_operate_resp();
    resp_type_.operate_resp_ = CreateMaybeMessage< ::usp::OperateResp >(GetArena());
  }
  return resp_type_.operate_resp_;
}
inline ::usp::OperateResp* Response::mutable_operate_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.operate_resp)
  return _internal_mutable_operate_resp();
}

// .usp.NotifyResp notify_resp = 8;
inline bool Response::_internal_has_notify_resp() const {
  return resp_type_case() == kNotifyResp;
}
inline bool Response::has_notify_resp() const {
  return _internal_has_notify_resp();
}
inline void Response::set_has_notify_resp() {
  _oneof_case_[0] = kNotifyResp;
}
inline void Response::clear_notify_resp() {
  if (_internal_has_notify_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.notify_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::NotifyResp* Response::release_notify_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.notify_resp)
  if (_internal_has_notify_resp()) {
    clear_has_resp_type();
      ::usp::NotifyResp* temp = resp_type_.notify_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.notify_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::NotifyResp& Response::_internal_notify_resp() const {
  return _internal_has_notify_resp()
      ? *resp_type_.notify_resp_
      : *reinterpret_cast< ::usp::NotifyResp*>(&::usp::_NotifyResp_default_instance_);
}
inline const ::usp::NotifyResp& Response::notify_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.notify_resp)
  return _internal_notify_resp();
}
inline ::usp::NotifyResp* Response::unsafe_arena_release_notify_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.notify_resp)
  if (_internal_has_notify_resp()) {
    clear_has_resp_type();
    ::usp::NotifyResp* temp = resp_type_.notify_resp_;
    resp_type_.notify_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_notify_resp(::usp::NotifyResp* notify_resp) {
  clear_resp_type();
  if (notify_resp) {
    set_has_notify_resp();
    resp_type_.notify_resp_ = notify_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.notify_resp)
}
inline ::usp::NotifyResp* Response::_internal_mutable_notify_resp() {
  if (!_internal_has_notify_resp()) {
    clear_resp_type();
    set_has_notify_resp();
    resp_type_.notify_resp_ = CreateMaybeMessage< ::usp::NotifyResp >(GetArena());
  }
  return resp_type_.notify_resp_;
}
inline ::usp::NotifyResp* Response::mutable_notify_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.notify_resp)
  return _internal_mutable_notify_resp();
}

// .usp.GetSupportedProtocolResp get_supported_protocol_resp = 9;
inline bool Response::_internal_has_get_supported_protocol_resp() const {
  return resp_type_case() == kGetSupportedProtocolResp;
}
inline bool Response::has_get_supported_protocol_resp() const {
  return _internal_has_get_supported_protocol_resp();
}
inline void Response::set_has_get_supported_protocol_resp() {
  _oneof_case_[0] = kGetSupportedProtocolResp;
}
inline void Response::clear_get_supported_protocol_resp() {
  if (_internal_has_get_supported_protocol_resp()) {
    if (GetArena() == nullptr) {
      delete resp_type_.get_supported_protocol_resp_;
    }
    clear_has_resp_type();
  }
}
inline ::usp::GetSupportedProtocolResp* Response::release_get_supported_protocol_resp() {
  // @@protoc_insertion_point(field_release:usp.Response.get_supported_protocol_resp)
  if (_internal_has_get_supported_protocol_resp()) {
    clear_has_resp_type();
      ::usp::GetSupportedProtocolResp* temp = resp_type_.get_supported_protocol_resp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resp_type_.get_supported_protocol_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::GetSupportedProtocolResp& Response::_internal_get_supported_protocol_resp() const {
  return _internal_has_get_supported_protocol_resp()
      ? *resp_type_.get_supported_protocol_resp_
      : *reinterpret_cast< ::usp::GetSupportedProtocolResp*>(&::usp::_GetSupportedProtocolResp_default_instance_);
}
inline const ::usp::GetSupportedProtocolResp& Response::get_supported_protocol_resp() const {
  // @@protoc_insertion_point(field_get:usp.Response.get_supported_protocol_resp)
  return _internal_get_supported_protocol_resp();
}
inline ::usp::GetSupportedProtocolResp* Response::unsafe_arena_release_get_supported_protocol_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Response.get_supported_protocol_resp)
  if (_internal_has_get_supported_protocol_resp()) {
    clear_has_resp_type();
    ::usp::GetSupportedProtocolResp* temp = resp_type_.get_supported_protocol_resp_;
    resp_type_.get_supported_protocol_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_supported_protocol_resp(::usp::GetSupportedProtocolResp* get_supported_protocol_resp) {
  clear_resp_type();
  if (get_supported_protocol_resp) {
    set_has_get_supported_protocol_resp();
    resp_type_.get_supported_protocol_resp_ = get_supported_protocol_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Response.get_supported_protocol_resp)
}
inline ::usp::GetSupportedProtocolResp* Response::_internal_mutable_get_supported_protocol_resp() {
  if (!_internal_has_get_supported_protocol_resp()) {
    clear_resp_type();
    set_has_get_supported_protocol_resp();
    resp_type_.get_supported_protocol_resp_ = CreateMaybeMessage< ::usp::GetSupportedProtocolResp >(GetArena());
  }
  return resp_type_.get_supported_protocol_resp_;
}
inline ::usp::GetSupportedProtocolResp* Response::mutable_get_supported_protocol_resp() {
  // @@protoc_insertion_point(field_mutable:usp.Response.get_supported_protocol_resp)
  return _internal_mutable_get_supported_protocol_resp();
}

inline bool Response::has_resp_type() const {
  return resp_type_case() != RESP_TYPE_NOT_SET;
}
inline void Response::clear_has_resp_type() {
  _oneof_case_[0] = RESP_TYPE_NOT_SET;
}
inline Response::RespTypeCase Response::resp_type_case() const {
  return Response::RespTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Error_ParamError

// string param_path = 1;
inline void Error_ParamError::clear_param_path() {
  param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error_ParamError::param_path() const {
  // @@protoc_insertion_point(field_get:usp.Error.ParamError.param_path)
  return _internal_param_path();
}
inline void Error_ParamError::set_param_path(const std::string& value) {
  _internal_set_param_path(value);
  // @@protoc_insertion_point(field_set:usp.Error.ParamError.param_path)
}
inline std::string* Error_ParamError::mutable_param_path() {
  // @@protoc_insertion_point(field_mutable:usp.Error.ParamError.param_path)
  return _internal_mutable_param_path();
}
inline const std::string& Error_ParamError::_internal_param_path() const {
  return param_path_.Get();
}
inline void Error_ParamError::_internal_set_param_path(const std::string& value) {
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error_ParamError::set_param_path(std::string&& value) {
  
  param_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Error.ParamError.param_path)
}
inline void Error_ParamError::set_param_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Error.ParamError.param_path)
}
inline void Error_ParamError::set_param_path(const char* value,
    size_t size) {
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Error.ParamError.param_path)
}
inline std::string* Error_ParamError::_internal_mutable_param_path() {
  
  return param_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error_ParamError::release_param_path() {
  // @@protoc_insertion_point(field_release:usp.Error.ParamError.param_path)
  return param_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_ParamError::set_allocated_param_path(std::string* param_path) {
  if (param_path != nullptr) {
    
  } else {
    
  }
  param_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Error.ParamError.param_path)
}

// fixed32 err_code = 2;
inline void Error_ParamError::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_ParamError::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_ParamError::err_code() const {
  // @@protoc_insertion_point(field_get:usp.Error.ParamError.err_code)
  return _internal_err_code();
}
inline void Error_ParamError::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void Error_ParamError::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.Error.ParamError.err_code)
}

// string err_msg = 3;
inline void Error_ParamError::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error_ParamError::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.Error.ParamError.err_msg)
  return _internal_err_msg();
}
inline void Error_ParamError::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.Error.ParamError.err_msg)
}
inline std::string* Error_ParamError::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.Error.ParamError.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& Error_ParamError::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void Error_ParamError::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error_ParamError::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Error.ParamError.err_msg)
}
inline void Error_ParamError::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Error.ParamError.err_msg)
}
inline void Error_ParamError::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Error.ParamError.err_msg)
}
inline std::string* Error_ParamError::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error_ParamError::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.Error.ParamError.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_ParamError::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Error.ParamError.err_msg)
}

// -------------------------------------------------------------------

// Error

// fixed32 err_code = 1;
inline void Error::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error::err_code() const {
  // @@protoc_insertion_point(field_get:usp.Error.err_code)
  return _internal_err_code();
}
inline void Error::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void Error::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.Error.err_code)
}

// string err_msg = 2;
inline void Error::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.Error.err_msg)
  return _internal_err_msg();
}
inline void Error::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.Error.err_msg)
}
inline std::string* Error::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.Error.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& Error::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void Error::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Error.err_msg)
}
inline void Error::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Error.err_msg)
}
inline void Error::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Error.err_msg)
}
inline std::string* Error::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.Error.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Error.err_msg)
}

// repeated .usp.Error.ParamError param_errs = 3;
inline int Error::_internal_param_errs_size() const {
  return param_errs_.size();
}
inline int Error::param_errs_size() const {
  return _internal_param_errs_size();
}
inline void Error::clear_param_errs() {
  param_errs_.Clear();
}
inline ::usp::Error_ParamError* Error::mutable_param_errs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Error.param_errs)
  return param_errs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Error_ParamError >*
Error::mutable_param_errs() {
  // @@protoc_insertion_point(field_mutable_list:usp.Error.param_errs)
  return &param_errs_;
}
inline const ::usp::Error_ParamError& Error::_internal_param_errs(int index) const {
  return param_errs_.Get(index);
}
inline const ::usp::Error_ParamError& Error::param_errs(int index) const {
  // @@protoc_insertion_point(field_get:usp.Error.param_errs)
  return _internal_param_errs(index);
}
inline ::usp::Error_ParamError* Error::_internal_add_param_errs() {
  return param_errs_.Add();
}
inline ::usp::Error_ParamError* Error::add_param_errs() {
  // @@protoc_insertion_point(field_add:usp.Error.param_errs)
  return _internal_add_param_errs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Error_ParamError >&
Error::param_errs() const {
  // @@protoc_insertion_point(field_list:usp.Error.param_errs)
  return param_errs_;
}

// -------------------------------------------------------------------

// Get

// repeated string param_paths = 1;
inline int Get::_internal_param_paths_size() const {
  return param_paths_.size();
}
inline int Get::param_paths_size() const {
  return _internal_param_paths_size();
}
inline void Get::clear_param_paths() {
  param_paths_.Clear();
}
inline std::string* Get::add_param_paths() {
  // @@protoc_insertion_point(field_add_mutable:usp.Get.param_paths)
  return _internal_add_param_paths();
}
inline const std::string& Get::_internal_param_paths(int index) const {
  return param_paths_.Get(index);
}
inline const std::string& Get::param_paths(int index) const {
  // @@protoc_insertion_point(field_get:usp.Get.param_paths)
  return _internal_param_paths(index);
}
inline std::string* Get::mutable_param_paths(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Get.param_paths)
  return param_paths_.Mutable(index);
}
inline void Get::set_param_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.Get.param_paths)
  param_paths_.Mutable(index)->assign(value);
}
inline void Get::set_param_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.Get.param_paths)
  param_paths_.Mutable(index)->assign(std::move(value));
}
inline void Get::set_param_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.Get.param_paths)
}
inline void Get::set_param_paths(int index, const char* value, size_t size) {
  param_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.Get.param_paths)
}
inline std::string* Get::_internal_add_param_paths() {
  return param_paths_.Add();
}
inline void Get::add_param_paths(const std::string& value) {
  param_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.Get.param_paths)
}
inline void Get::add_param_paths(std::string&& value) {
  param_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.Get.param_paths)
}
inline void Get::add_param_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.Get.param_paths)
}
inline void Get::add_param_paths(const char* value, size_t size) {
  param_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.Get.param_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Get::param_paths() const {
  // @@protoc_insertion_point(field_list:usp.Get.param_paths)
  return param_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Get::mutable_param_paths() {
  // @@protoc_insertion_point(field_mutable_list:usp.Get.param_paths)
  return &param_paths_;
}

// -------------------------------------------------------------------

// GetResp_RequestedPathResult

// string requested_path = 1;
inline void GetResp_RequestedPathResult::clear_requested_path() {
  requested_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetResp_RequestedPathResult::requested_path() const {
  // @@protoc_insertion_point(field_get:usp.GetResp.RequestedPathResult.requested_path)
  return _internal_requested_path();
}
inline void GetResp_RequestedPathResult::set_requested_path(const std::string& value) {
  _internal_set_requested_path(value);
  // @@protoc_insertion_point(field_set:usp.GetResp.RequestedPathResult.requested_path)
}
inline std::string* GetResp_RequestedPathResult::mutable_requested_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetResp.RequestedPathResult.requested_path)
  return _internal_mutable_requested_path();
}
inline const std::string& GetResp_RequestedPathResult::_internal_requested_path() const {
  return requested_path_.Get();
}
inline void GetResp_RequestedPathResult::_internal_set_requested_path(const std::string& value) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetResp_RequestedPathResult::set_requested_path(std::string&& value) {
  
  requested_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetResp.RequestedPathResult.requested_path)
}
inline void GetResp_RequestedPathResult::set_requested_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetResp.RequestedPathResult.requested_path)
}
inline void GetResp_RequestedPathResult::set_requested_path(const char* value,
    size_t size) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetResp.RequestedPathResult.requested_path)
}
inline std::string* GetResp_RequestedPathResult::_internal_mutable_requested_path() {
  
  return requested_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetResp_RequestedPathResult::release_requested_path() {
  // @@protoc_insertion_point(field_release:usp.GetResp.RequestedPathResult.requested_path)
  return requested_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResp_RequestedPathResult::set_allocated_requested_path(std::string* requested_path) {
  if (requested_path != nullptr) {
    
  } else {
    
  }
  requested_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetResp.RequestedPathResult.requested_path)
}

// fixed32 err_code = 2;
inline void GetResp_RequestedPathResult::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetResp_RequestedPathResult::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetResp_RequestedPathResult::err_code() const {
  // @@protoc_insertion_point(field_get:usp.GetResp.RequestedPathResult.err_code)
  return _internal_err_code();
}
inline void GetResp_RequestedPathResult::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void GetResp_RequestedPathResult::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.GetResp.RequestedPathResult.err_code)
}

// string err_msg = 3;
inline void GetResp_RequestedPathResult::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetResp_RequestedPathResult::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.GetResp.RequestedPathResult.err_msg)
  return _internal_err_msg();
}
inline void GetResp_RequestedPathResult::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.GetResp.RequestedPathResult.err_msg)
}
inline std::string* GetResp_RequestedPathResult::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.GetResp.RequestedPathResult.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& GetResp_RequestedPathResult::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void GetResp_RequestedPathResult::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetResp_RequestedPathResult::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetResp.RequestedPathResult.err_msg)
}
inline void GetResp_RequestedPathResult::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetResp.RequestedPathResult.err_msg)
}
inline void GetResp_RequestedPathResult::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetResp.RequestedPathResult.err_msg)
}
inline std::string* GetResp_RequestedPathResult::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetResp_RequestedPathResult::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.GetResp.RequestedPathResult.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResp_RequestedPathResult::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetResp.RequestedPathResult.err_msg)
}

// repeated .usp.GetResp.ResolvedPathResult resolved_path_results = 4;
inline int GetResp_RequestedPathResult::_internal_resolved_path_results_size() const {
  return resolved_path_results_.size();
}
inline int GetResp_RequestedPathResult::resolved_path_results_size() const {
  return _internal_resolved_path_results_size();
}
inline void GetResp_RequestedPathResult::clear_resolved_path_results() {
  resolved_path_results_.Clear();
}
inline ::usp::GetResp_ResolvedPathResult* GetResp_RequestedPathResult::mutable_resolved_path_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetResp.RequestedPathResult.resolved_path_results)
  return resolved_path_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_ResolvedPathResult >*
GetResp_RequestedPathResult::mutable_resolved_path_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetResp.RequestedPathResult.resolved_path_results)
  return &resolved_path_results_;
}
inline const ::usp::GetResp_ResolvedPathResult& GetResp_RequestedPathResult::_internal_resolved_path_results(int index) const {
  return resolved_path_results_.Get(index);
}
inline const ::usp::GetResp_ResolvedPathResult& GetResp_RequestedPathResult::resolved_path_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetResp.RequestedPathResult.resolved_path_results)
  return _internal_resolved_path_results(index);
}
inline ::usp::GetResp_ResolvedPathResult* GetResp_RequestedPathResult::_internal_add_resolved_path_results() {
  return resolved_path_results_.Add();
}
inline ::usp::GetResp_ResolvedPathResult* GetResp_RequestedPathResult::add_resolved_path_results() {
  // @@protoc_insertion_point(field_add:usp.GetResp.RequestedPathResult.resolved_path_results)
  return _internal_add_resolved_path_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_ResolvedPathResult >&
GetResp_RequestedPathResult::resolved_path_results() const {
  // @@protoc_insertion_point(field_list:usp.GetResp.RequestedPathResult.resolved_path_results)
  return resolved_path_results_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetResp_ResolvedPathResult

// string resolved_path = 1;
inline void GetResp_ResolvedPathResult::clear_resolved_path() {
  resolved_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetResp_ResolvedPathResult::resolved_path() const {
  // @@protoc_insertion_point(field_get:usp.GetResp.ResolvedPathResult.resolved_path)
  return _internal_resolved_path();
}
inline void GetResp_ResolvedPathResult::set_resolved_path(const std::string& value) {
  _internal_set_resolved_path(value);
  // @@protoc_insertion_point(field_set:usp.GetResp.ResolvedPathResult.resolved_path)
}
inline std::string* GetResp_ResolvedPathResult::mutable_resolved_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetResp.ResolvedPathResult.resolved_path)
  return _internal_mutable_resolved_path();
}
inline const std::string& GetResp_ResolvedPathResult::_internal_resolved_path() const {
  return resolved_path_.Get();
}
inline void GetResp_ResolvedPathResult::_internal_set_resolved_path(const std::string& value) {
  
  resolved_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetResp_ResolvedPathResult::set_resolved_path(std::string&& value) {
  
  resolved_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetResp.ResolvedPathResult.resolved_path)
}
inline void GetResp_ResolvedPathResult::set_resolved_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resolved_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetResp.ResolvedPathResult.resolved_path)
}
inline void GetResp_ResolvedPathResult::set_resolved_path(const char* value,
    size_t size) {
  
  resolved_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetResp.ResolvedPathResult.resolved_path)
}
inline std::string* GetResp_ResolvedPathResult::_internal_mutable_resolved_path() {
  
  return resolved_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetResp_ResolvedPathResult::release_resolved_path() {
  // @@protoc_insertion_point(field_release:usp.GetResp.ResolvedPathResult.resolved_path)
  return resolved_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResp_ResolvedPathResult::set_allocated_resolved_path(std::string* resolved_path) {
  if (resolved_path != nullptr) {
    
  } else {
    
  }
  resolved_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolved_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetResp.ResolvedPathResult.resolved_path)
}

// map<string, string> result_params = 2;
inline int GetResp_ResolvedPathResult::_internal_result_params_size() const {
  return result_params_.size();
}
inline int GetResp_ResolvedPathResult::result_params_size() const {
  return _internal_result_params_size();
}
inline void GetResp_ResolvedPathResult::clear_result_params() {
  result_params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetResp_ResolvedPathResult::_internal_result_params() const {
  return result_params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetResp_ResolvedPathResult::result_params() const {
  // @@protoc_insertion_point(field_map:usp.GetResp.ResolvedPathResult.result_params)
  return _internal_result_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetResp_ResolvedPathResult::_internal_mutable_result_params() {
  return result_params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetResp_ResolvedPathResult::mutable_result_params() {
  // @@protoc_insertion_point(field_mutable_map:usp.GetResp.ResolvedPathResult.result_params)
  return _internal_mutable_result_params();
}

// -------------------------------------------------------------------

// GetResp

// repeated .usp.GetResp.RequestedPathResult req_path_results = 1;
inline int GetResp::_internal_req_path_results_size() const {
  return req_path_results_.size();
}
inline int GetResp::req_path_results_size() const {
  return _internal_req_path_results_size();
}
inline void GetResp::clear_req_path_results() {
  req_path_results_.Clear();
}
inline ::usp::GetResp_RequestedPathResult* GetResp::mutable_req_path_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetResp.req_path_results)
  return req_path_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_RequestedPathResult >*
GetResp::mutable_req_path_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetResp.req_path_results)
  return &req_path_results_;
}
inline const ::usp::GetResp_RequestedPathResult& GetResp::_internal_req_path_results(int index) const {
  return req_path_results_.Get(index);
}
inline const ::usp::GetResp_RequestedPathResult& GetResp::req_path_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetResp.req_path_results)
  return _internal_req_path_results(index);
}
inline ::usp::GetResp_RequestedPathResult* GetResp::_internal_add_req_path_results() {
  return req_path_results_.Add();
}
inline ::usp::GetResp_RequestedPathResult* GetResp::add_req_path_results() {
  // @@protoc_insertion_point(field_add:usp.GetResp.req_path_results)
  return _internal_add_req_path_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetResp_RequestedPathResult >&
GetResp::req_path_results() const {
  // @@protoc_insertion_point(field_list:usp.GetResp.req_path_results)
  return req_path_results_;
}

// -------------------------------------------------------------------

// GetSupportedDM

// repeated string obj_paths = 1;
inline int GetSupportedDM::_internal_obj_paths_size() const {
  return obj_paths_.size();
}
inline int GetSupportedDM::obj_paths_size() const {
  return _internal_obj_paths_size();
}
inline void GetSupportedDM::clear_obj_paths() {
  obj_paths_.Clear();
}
inline std::string* GetSupportedDM::add_obj_paths() {
  // @@protoc_insertion_point(field_add_mutable:usp.GetSupportedDM.obj_paths)
  return _internal_add_obj_paths();
}
inline const std::string& GetSupportedDM::_internal_obj_paths(int index) const {
  return obj_paths_.Get(index);
}
inline const std::string& GetSupportedDM::obj_paths(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDM.obj_paths)
  return _internal_obj_paths(index);
}
inline std::string* GetSupportedDM::mutable_obj_paths(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDM.obj_paths)
  return obj_paths_.Mutable(index);
}
inline void GetSupportedDM::set_obj_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.obj_paths)
  obj_paths_.Mutable(index)->assign(value);
}
inline void GetSupportedDM::set_obj_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.obj_paths)
  obj_paths_.Mutable(index)->assign(std::move(value));
}
inline void GetSupportedDM::set_obj_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDM.obj_paths)
}
inline void GetSupportedDM::set_obj_paths(int index, const char* value, size_t size) {
  obj_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDM.obj_paths)
}
inline std::string* GetSupportedDM::_internal_add_obj_paths() {
  return obj_paths_.Add();
}
inline void GetSupportedDM::add_obj_paths(const std::string& value) {
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.GetSupportedDM.obj_paths)
}
inline void GetSupportedDM::add_obj_paths(std::string&& value) {
  obj_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.GetSupportedDM.obj_paths)
}
inline void GetSupportedDM::add_obj_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.GetSupportedDM.obj_paths)
}
inline void GetSupportedDM::add_obj_paths(const char* value, size_t size) {
  obj_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.GetSupportedDM.obj_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSupportedDM::obj_paths() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDM.obj_paths)
  return obj_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSupportedDM::mutable_obj_paths() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDM.obj_paths)
  return &obj_paths_;
}

// bool first_level_only = 2;
inline void GetSupportedDM::clear_first_level_only() {
  first_level_only_ = false;
}
inline bool GetSupportedDM::_internal_first_level_only() const {
  return first_level_only_;
}
inline bool GetSupportedDM::first_level_only() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDM.first_level_only)
  return _internal_first_level_only();
}
inline void GetSupportedDM::_internal_set_first_level_only(bool value) {
  
  first_level_only_ = value;
}
inline void GetSupportedDM::set_first_level_only(bool value) {
  _internal_set_first_level_only(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.first_level_only)
}

// bool return_commands = 3;
inline void GetSupportedDM::clear_return_commands() {
  return_commands_ = false;
}
inline bool GetSupportedDM::_internal_return_commands() const {
  return return_commands_;
}
inline bool GetSupportedDM::return_commands() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDM.return_commands)
  return _internal_return_commands();
}
inline void GetSupportedDM::_internal_set_return_commands(bool value) {
  
  return_commands_ = value;
}
inline void GetSupportedDM::set_return_commands(bool value) {
  _internal_set_return_commands(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.return_commands)
}

// bool return_events = 4;
inline void GetSupportedDM::clear_return_events() {
  return_events_ = false;
}
inline bool GetSupportedDM::_internal_return_events() const {
  return return_events_;
}
inline bool GetSupportedDM::return_events() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDM.return_events)
  return _internal_return_events();
}
inline void GetSupportedDM::_internal_set_return_events(bool value) {
  
  return_events_ = value;
}
inline void GetSupportedDM::set_return_events(bool value) {
  _internal_set_return_events(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.return_events)
}

// bool return_params = 5;
inline void GetSupportedDM::clear_return_params() {
  return_params_ = false;
}
inline bool GetSupportedDM::_internal_return_params() const {
  return return_params_;
}
inline bool GetSupportedDM::return_params() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDM.return_params)
  return _internal_return_params();
}
inline void GetSupportedDM::_internal_set_return_params(bool value) {
  
  return_params_ = value;
}
inline void GetSupportedDM::set_return_params(bool value) {
  _internal_set_return_params(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDM.return_params)
}

// -------------------------------------------------------------------

// GetSupportedDMResp_RequestedObjectResult

// string req_obj_path = 1;
inline void GetSupportedDMResp_RequestedObjectResult::clear_req_obj_path() {
  req_obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::req_obj_path() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
  return _internal_req_obj_path();
}
inline void GetSupportedDMResp_RequestedObjectResult::set_req_obj_path(const std::string& value) {
  _internal_set_req_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::mutable_req_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
  return _internal_mutable_req_obj_path();
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::_internal_req_obj_path() const {
  return req_obj_path_.Get();
}
inline void GetSupportedDMResp_RequestedObjectResult::_internal_set_req_obj_path(const std::string& value) {
  
  req_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_req_obj_path(std::string&& value) {
  
  req_obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_req_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_req_obj_path(const char* value,
    size_t size) {
  
  req_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::_internal_mutable_req_obj_path() {
  
  return req_obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::release_req_obj_path() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
  return req_obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_allocated_req_obj_path(std::string* req_obj_path) {
  if (req_obj_path != nullptr) {
    
  } else {
    
  }
  req_obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req_obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.RequestedObjectResult.req_obj_path)
}

// fixed32 err_code = 2;
inline void GetSupportedDMResp_RequestedObjectResult::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSupportedDMResp_RequestedObjectResult::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSupportedDMResp_RequestedObjectResult::err_code() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.RequestedObjectResult.err_code)
  return _internal_err_code();
}
inline void GetSupportedDMResp_RequestedObjectResult::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void GetSupportedDMResp_RequestedObjectResult::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.RequestedObjectResult.err_code)
}

// string err_msg = 3;
inline void GetSupportedDMResp_RequestedObjectResult::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
  return _internal_err_msg();
}
inline void GetSupportedDMResp_RequestedObjectResult::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void GetSupportedDMResp_RequestedObjectResult::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.RequestedObjectResult.err_msg)
}

// string data_model_inst_uri = 4;
inline void GetSupportedDMResp_RequestedObjectResult::clear_data_model_inst_uri() {
  data_model_inst_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::data_model_inst_uri() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
  return _internal_data_model_inst_uri();
}
inline void GetSupportedDMResp_RequestedObjectResult::set_data_model_inst_uri(const std::string& value) {
  _internal_set_data_model_inst_uri(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::mutable_data_model_inst_uri() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
  return _internal_mutable_data_model_inst_uri();
}
inline const std::string& GetSupportedDMResp_RequestedObjectResult::_internal_data_model_inst_uri() const {
  return data_model_inst_uri_.Get();
}
inline void GetSupportedDMResp_RequestedObjectResult::_internal_set_data_model_inst_uri(const std::string& value) {
  
  data_model_inst_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_data_model_inst_uri(std::string&& value) {
  
  data_model_inst_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_data_model_inst_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_model_inst_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
}
inline void GetSupportedDMResp_RequestedObjectResult::set_data_model_inst_uri(const char* value,
    size_t size) {
  
  data_model_inst_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::_internal_mutable_data_model_inst_uri() {
  
  return data_model_inst_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_RequestedObjectResult::release_data_model_inst_uri() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
  return data_model_inst_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_RequestedObjectResult::set_allocated_data_model_inst_uri(std::string* data_model_inst_uri) {
  if (data_model_inst_uri != nullptr) {
    
  } else {
    
  }
  data_model_inst_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_model_inst_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.RequestedObjectResult.data_model_inst_uri)
}

// repeated .usp.GetSupportedDMResp.SupportedObjectResult supported_objs = 5;
inline int GetSupportedDMResp_RequestedObjectResult::_internal_supported_objs_size() const {
  return supported_objs_.size();
}
inline int GetSupportedDMResp_RequestedObjectResult::supported_objs_size() const {
  return _internal_supported_objs_size();
}
inline void GetSupportedDMResp_RequestedObjectResult::clear_supported_objs() {
  supported_objs_.Clear();
}
inline ::usp::GetSupportedDMResp_SupportedObjectResult* GetSupportedDMResp_RequestedObjectResult::mutable_supported_objs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.RequestedObjectResult.supported_objs)
  return supported_objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedObjectResult >*
GetSupportedDMResp_RequestedObjectResult::mutable_supported_objs() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.RequestedObjectResult.supported_objs)
  return &supported_objs_;
}
inline const ::usp::GetSupportedDMResp_SupportedObjectResult& GetSupportedDMResp_RequestedObjectResult::_internal_supported_objs(int index) const {
  return supported_objs_.Get(index);
}
inline const ::usp::GetSupportedDMResp_SupportedObjectResult& GetSupportedDMResp_RequestedObjectResult::supported_objs(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.RequestedObjectResult.supported_objs)
  return _internal_supported_objs(index);
}
inline ::usp::GetSupportedDMResp_SupportedObjectResult* GetSupportedDMResp_RequestedObjectResult::_internal_add_supported_objs() {
  return supported_objs_.Add();
}
inline ::usp::GetSupportedDMResp_SupportedObjectResult* GetSupportedDMResp_RequestedObjectResult::add_supported_objs() {
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.RequestedObjectResult.supported_objs)
  return _internal_add_supported_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedObjectResult >&
GetSupportedDMResp_RequestedObjectResult::supported_objs() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.RequestedObjectResult.supported_objs)
  return supported_objs_;
}

// -------------------------------------------------------------------

// GetSupportedDMResp_SupportedObjectResult

// string supported_obj_path = 1;
inline void GetSupportedDMResp_SupportedObjectResult::clear_supported_obj_path() {
  supported_obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_SupportedObjectResult::supported_obj_path() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
  return _internal_supported_obj_path();
}
inline void GetSupportedDMResp_SupportedObjectResult::set_supported_obj_path(const std::string& value) {
  _internal_set_supported_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
}
inline std::string* GetSupportedDMResp_SupportedObjectResult::mutable_supported_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
  return _internal_mutable_supported_obj_path();
}
inline const std::string& GetSupportedDMResp_SupportedObjectResult::_internal_supported_obj_path() const {
  return supported_obj_path_.Get();
}
inline void GetSupportedDMResp_SupportedObjectResult::_internal_set_supported_obj_path(const std::string& value) {
  
  supported_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_SupportedObjectResult::set_supported_obj_path(std::string&& value) {
  
  supported_obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
}
inline void GetSupportedDMResp_SupportedObjectResult::set_supported_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supported_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
}
inline void GetSupportedDMResp_SupportedObjectResult::set_supported_obj_path(const char* value,
    size_t size) {
  
  supported_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
}
inline std::string* GetSupportedDMResp_SupportedObjectResult::_internal_mutable_supported_obj_path() {
  
  return supported_obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_SupportedObjectResult::release_supported_obj_path() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
  return supported_obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_SupportedObjectResult::set_allocated_supported_obj_path(std::string* supported_obj_path) {
  if (supported_obj_path != nullptr) {
    
  } else {
    
  }
  supported_obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supported_obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.SupportedObjectResult.supported_obj_path)
}

// .usp.GetSupportedDMResp.ObjAccessType access = 2;
inline void GetSupportedDMResp_SupportedObjectResult::clear_access() {
  access_ = 0;
}
inline ::usp::GetSupportedDMResp_ObjAccessType GetSupportedDMResp_SupportedObjectResult::_internal_access() const {
  return static_cast< ::usp::GetSupportedDMResp_ObjAccessType >(access_);
}
inline ::usp::GetSupportedDMResp_ObjAccessType GetSupportedDMResp_SupportedObjectResult::access() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.access)
  return _internal_access();
}
inline void GetSupportedDMResp_SupportedObjectResult::_internal_set_access(::usp::GetSupportedDMResp_ObjAccessType value) {
  
  access_ = value;
}
inline void GetSupportedDMResp_SupportedObjectResult::set_access(::usp::GetSupportedDMResp_ObjAccessType value) {
  _internal_set_access(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedObjectResult.access)
}

// bool is_multi_instance = 3;
inline void GetSupportedDMResp_SupportedObjectResult::clear_is_multi_instance() {
  is_multi_instance_ = false;
}
inline bool GetSupportedDMResp_SupportedObjectResult::_internal_is_multi_instance() const {
  return is_multi_instance_;
}
inline bool GetSupportedDMResp_SupportedObjectResult::is_multi_instance() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.is_multi_instance)
  return _internal_is_multi_instance();
}
inline void GetSupportedDMResp_SupportedObjectResult::_internal_set_is_multi_instance(bool value) {
  
  is_multi_instance_ = value;
}
inline void GetSupportedDMResp_SupportedObjectResult::set_is_multi_instance(bool value) {
  _internal_set_is_multi_instance(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedObjectResult.is_multi_instance)
}

// repeated .usp.GetSupportedDMResp.SupportedCommandResult supported_commands = 4;
inline int GetSupportedDMResp_SupportedObjectResult::_internal_supported_commands_size() const {
  return supported_commands_.size();
}
inline int GetSupportedDMResp_SupportedObjectResult::supported_commands_size() const {
  return _internal_supported_commands_size();
}
inline void GetSupportedDMResp_SupportedObjectResult::clear_supported_commands() {
  supported_commands_.Clear();
}
inline ::usp::GetSupportedDMResp_SupportedCommandResult* GetSupportedDMResp_SupportedObjectResult::mutable_supported_commands(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedObjectResult.supported_commands)
  return supported_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedCommandResult >*
GetSupportedDMResp_SupportedObjectResult::mutable_supported_commands() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_commands)
  return &supported_commands_;
}
inline const ::usp::GetSupportedDMResp_SupportedCommandResult& GetSupportedDMResp_SupportedObjectResult::_internal_supported_commands(int index) const {
  return supported_commands_.Get(index);
}
inline const ::usp::GetSupportedDMResp_SupportedCommandResult& GetSupportedDMResp_SupportedObjectResult::supported_commands(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.supported_commands)
  return _internal_supported_commands(index);
}
inline ::usp::GetSupportedDMResp_SupportedCommandResult* GetSupportedDMResp_SupportedObjectResult::_internal_add_supported_commands() {
  return supported_commands_.Add();
}
inline ::usp::GetSupportedDMResp_SupportedCommandResult* GetSupportedDMResp_SupportedObjectResult::add_supported_commands() {
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedObjectResult.supported_commands)
  return _internal_add_supported_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedCommandResult >&
GetSupportedDMResp_SupportedObjectResult::supported_commands() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_commands)
  return supported_commands_;
}

// repeated .usp.GetSupportedDMResp.SupportedEventResult supported_events = 5;
inline int GetSupportedDMResp_SupportedObjectResult::_internal_supported_events_size() const {
  return supported_events_.size();
}
inline int GetSupportedDMResp_SupportedObjectResult::supported_events_size() const {
  return _internal_supported_events_size();
}
inline void GetSupportedDMResp_SupportedObjectResult::clear_supported_events() {
  supported_events_.Clear();
}
inline ::usp::GetSupportedDMResp_SupportedEventResult* GetSupportedDMResp_SupportedObjectResult::mutable_supported_events(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedObjectResult.supported_events)
  return supported_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedEventResult >*
GetSupportedDMResp_SupportedObjectResult::mutable_supported_events() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_events)
  return &supported_events_;
}
inline const ::usp::GetSupportedDMResp_SupportedEventResult& GetSupportedDMResp_SupportedObjectResult::_internal_supported_events(int index) const {
  return supported_events_.Get(index);
}
inline const ::usp::GetSupportedDMResp_SupportedEventResult& GetSupportedDMResp_SupportedObjectResult::supported_events(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.supported_events)
  return _internal_supported_events(index);
}
inline ::usp::GetSupportedDMResp_SupportedEventResult* GetSupportedDMResp_SupportedObjectResult::_internal_add_supported_events() {
  return supported_events_.Add();
}
inline ::usp::GetSupportedDMResp_SupportedEventResult* GetSupportedDMResp_SupportedObjectResult::add_supported_events() {
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedObjectResult.supported_events)
  return _internal_add_supported_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedEventResult >&
GetSupportedDMResp_SupportedObjectResult::supported_events() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_events)
  return supported_events_;
}

// repeated .usp.GetSupportedDMResp.SupportedParamResult supported_params = 6;
inline int GetSupportedDMResp_SupportedObjectResult::_internal_supported_params_size() const {
  return supported_params_.size();
}
inline int GetSupportedDMResp_SupportedObjectResult::supported_params_size() const {
  return _internal_supported_params_size();
}
inline void GetSupportedDMResp_SupportedObjectResult::clear_supported_params() {
  supported_params_.Clear();
}
inline ::usp::GetSupportedDMResp_SupportedParamResult* GetSupportedDMResp_SupportedObjectResult::mutable_supported_params(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedObjectResult.supported_params)
  return supported_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedParamResult >*
GetSupportedDMResp_SupportedObjectResult::mutable_supported_params() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_params)
  return &supported_params_;
}
inline const ::usp::GetSupportedDMResp_SupportedParamResult& GetSupportedDMResp_SupportedObjectResult::_internal_supported_params(int index) const {
  return supported_params_.Get(index);
}
inline const ::usp::GetSupportedDMResp_SupportedParamResult& GetSupportedDMResp_SupportedObjectResult::supported_params(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedObjectResult.supported_params)
  return _internal_supported_params(index);
}
inline ::usp::GetSupportedDMResp_SupportedParamResult* GetSupportedDMResp_SupportedObjectResult::_internal_add_supported_params() {
  return supported_params_.Add();
}
inline ::usp::GetSupportedDMResp_SupportedParamResult* GetSupportedDMResp_SupportedObjectResult::add_supported_params() {
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedObjectResult.supported_params)
  return _internal_add_supported_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_SupportedParamResult >&
GetSupportedDMResp_SupportedObjectResult::supported_params() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedObjectResult.supported_params)
  return supported_params_;
}

// -------------------------------------------------------------------

// GetSupportedDMResp_SupportedParamResult

// string param_name = 1;
inline void GetSupportedDMResp_SupportedParamResult::clear_param_name() {
  param_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_SupportedParamResult::param_name() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedParamResult.param_name)
  return _internal_param_name();
}
inline void GetSupportedDMResp_SupportedParamResult::set_param_name(const std::string& value) {
  _internal_set_param_name(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedParamResult.param_name)
}
inline std::string* GetSupportedDMResp_SupportedParamResult::mutable_param_name() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedParamResult.param_name)
  return _internal_mutable_param_name();
}
inline const std::string& GetSupportedDMResp_SupportedParamResult::_internal_param_name() const {
  return param_name_.Get();
}
inline void GetSupportedDMResp_SupportedParamResult::_internal_set_param_name(const std::string& value) {
  
  param_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_SupportedParamResult::set_param_name(std::string&& value) {
  
  param_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.SupportedParamResult.param_name)
}
inline void GetSupportedDMResp_SupportedParamResult::set_param_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedParamResult.param_name)
}
inline void GetSupportedDMResp_SupportedParamResult::set_param_name(const char* value,
    size_t size) {
  
  param_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedParamResult.param_name)
}
inline std::string* GetSupportedDMResp_SupportedParamResult::_internal_mutable_param_name() {
  
  return param_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_SupportedParamResult::release_param_name() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.SupportedParamResult.param_name)
  return param_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_SupportedParamResult::set_allocated_param_name(std::string* param_name) {
  if (param_name != nullptr) {
    
  } else {
    
  }
  param_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.SupportedParamResult.param_name)
}

// .usp.GetSupportedDMResp.ParamAccessType access = 2;
inline void GetSupportedDMResp_SupportedParamResult::clear_access() {
  access_ = 0;
}
inline ::usp::GetSupportedDMResp_ParamAccessType GetSupportedDMResp_SupportedParamResult::_internal_access() const {
  return static_cast< ::usp::GetSupportedDMResp_ParamAccessType >(access_);
}
inline ::usp::GetSupportedDMResp_ParamAccessType GetSupportedDMResp_SupportedParamResult::access() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedParamResult.access)
  return _internal_access();
}
inline void GetSupportedDMResp_SupportedParamResult::_internal_set_access(::usp::GetSupportedDMResp_ParamAccessType value) {
  
  access_ = value;
}
inline void GetSupportedDMResp_SupportedParamResult::set_access(::usp::GetSupportedDMResp_ParamAccessType value) {
  _internal_set_access(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedParamResult.access)
}

// -------------------------------------------------------------------

// GetSupportedDMResp_SupportedCommandResult

// string command_name = 1;
inline void GetSupportedDMResp_SupportedCommandResult::clear_command_name() {
  command_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::command_name() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
  return _internal_command_name();
}
inline void GetSupportedDMResp_SupportedCommandResult::set_command_name(const std::string& value) {
  _internal_set_command_name(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
  return _internal_mutable_command_name();
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::_internal_command_name() const {
  return command_name_.Get();
}
inline void GetSupportedDMResp_SupportedCommandResult::_internal_set_command_name(const std::string& value) {
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_SupportedCommandResult::set_command_name(std::string&& value) {
  
  command_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
}
inline void GetSupportedDMResp_SupportedCommandResult::set_command_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
}
inline void GetSupportedDMResp_SupportedCommandResult::set_command_name(const char* value,
    size_t size) {
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::_internal_mutable_command_name() {
  
  return command_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::release_command_name() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
  return command_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_SupportedCommandResult::set_allocated_command_name(std::string* command_name) {
  if (command_name != nullptr) {
    
  } else {
    
  }
  command_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.SupportedCommandResult.command_name)
}

// repeated string input_arg_names = 2;
inline int GetSupportedDMResp_SupportedCommandResult::_internal_input_arg_names_size() const {
  return input_arg_names_.size();
}
inline int GetSupportedDMResp_SupportedCommandResult::input_arg_names_size() const {
  return _internal_input_arg_names_size();
}
inline void GetSupportedDMResp_SupportedCommandResult::clear_input_arg_names() {
  input_arg_names_.Clear();
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::add_input_arg_names() {
  // @@protoc_insertion_point(field_add_mutable:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  return _internal_add_input_arg_names();
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::_internal_input_arg_names(int index) const {
  return input_arg_names_.Get(index);
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::input_arg_names(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  return _internal_input_arg_names(index);
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::mutable_input_arg_names(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  return input_arg_names_.Mutable(index);
}
inline void GetSupportedDMResp_SupportedCommandResult::set_input_arg_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  input_arg_names_.Mutable(index)->assign(value);
}
inline void GetSupportedDMResp_SupportedCommandResult::set_input_arg_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  input_arg_names_.Mutable(index)->assign(std::move(value));
}
inline void GetSupportedDMResp_SupportedCommandResult::set_input_arg_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_arg_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::set_input_arg_names(int index, const char* value, size_t size) {
  input_arg_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::_internal_add_input_arg_names() {
  return input_arg_names_.Add();
}
inline void GetSupportedDMResp_SupportedCommandResult::add_input_arg_names(const std::string& value) {
  input_arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_input_arg_names(std::string&& value) {
  input_arg_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_input_arg_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_input_arg_names(const char* value, size_t size) {
  input_arg_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSupportedDMResp_SupportedCommandResult::input_arg_names() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  return input_arg_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSupportedDMResp_SupportedCommandResult::mutable_input_arg_names() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedCommandResult.input_arg_names)
  return &input_arg_names_;
}

// repeated string output_arg_names = 3;
inline int GetSupportedDMResp_SupportedCommandResult::_internal_output_arg_names_size() const {
  return output_arg_names_.size();
}
inline int GetSupportedDMResp_SupportedCommandResult::output_arg_names_size() const {
  return _internal_output_arg_names_size();
}
inline void GetSupportedDMResp_SupportedCommandResult::clear_output_arg_names() {
  output_arg_names_.Clear();
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::add_output_arg_names() {
  // @@protoc_insertion_point(field_add_mutable:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  return _internal_add_output_arg_names();
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::_internal_output_arg_names(int index) const {
  return output_arg_names_.Get(index);
}
inline const std::string& GetSupportedDMResp_SupportedCommandResult::output_arg_names(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  return _internal_output_arg_names(index);
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::mutable_output_arg_names(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  return output_arg_names_.Mutable(index);
}
inline void GetSupportedDMResp_SupportedCommandResult::set_output_arg_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  output_arg_names_.Mutable(index)->assign(value);
}
inline void GetSupportedDMResp_SupportedCommandResult::set_output_arg_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  output_arg_names_.Mutable(index)->assign(std::move(value));
}
inline void GetSupportedDMResp_SupportedCommandResult::set_output_arg_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_arg_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::set_output_arg_names(int index, const char* value, size_t size) {
  output_arg_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline std::string* GetSupportedDMResp_SupportedCommandResult::_internal_add_output_arg_names() {
  return output_arg_names_.Add();
}
inline void GetSupportedDMResp_SupportedCommandResult::add_output_arg_names(const std::string& value) {
  output_arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_output_arg_names(std::string&& value) {
  output_arg_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_output_arg_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline void GetSupportedDMResp_SupportedCommandResult::add_output_arg_names(const char* value, size_t size) {
  output_arg_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSupportedDMResp_SupportedCommandResult::output_arg_names() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  return output_arg_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSupportedDMResp_SupportedCommandResult::mutable_output_arg_names() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedCommandResult.output_arg_names)
  return &output_arg_names_;
}

// -------------------------------------------------------------------

// GetSupportedDMResp_SupportedEventResult

// string event_name = 1;
inline void GetSupportedDMResp_SupportedEventResult::clear_event_name() {
  event_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedDMResp_SupportedEventResult::event_name() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedEventResult.event_name)
  return _internal_event_name();
}
inline void GetSupportedDMResp_SupportedEventResult::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedEventResult.event_name)
}
inline std::string* GetSupportedDMResp_SupportedEventResult::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedEventResult.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& GetSupportedDMResp_SupportedEventResult::_internal_event_name() const {
  return event_name_.Get();
}
inline void GetSupportedDMResp_SupportedEventResult::_internal_set_event_name(const std::string& value) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedDMResp_SupportedEventResult::set_event_name(std::string&& value) {
  
  event_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedDMResp.SupportedEventResult.event_name)
}
inline void GetSupportedDMResp_SupportedEventResult::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedEventResult.event_name)
}
inline void GetSupportedDMResp_SupportedEventResult::set_event_name(const char* value,
    size_t size) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedEventResult.event_name)
}
inline std::string* GetSupportedDMResp_SupportedEventResult::_internal_mutable_event_name() {
  
  return event_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedDMResp_SupportedEventResult::release_event_name() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedDMResp.SupportedEventResult.event_name)
  return event_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedDMResp_SupportedEventResult::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedDMResp.SupportedEventResult.event_name)
}

// repeated string arg_names = 2;
inline int GetSupportedDMResp_SupportedEventResult::_internal_arg_names_size() const {
  return arg_names_.size();
}
inline int GetSupportedDMResp_SupportedEventResult::arg_names_size() const {
  return _internal_arg_names_size();
}
inline void GetSupportedDMResp_SupportedEventResult::clear_arg_names() {
  arg_names_.Clear();
}
inline std::string* GetSupportedDMResp_SupportedEventResult::add_arg_names() {
  // @@protoc_insertion_point(field_add_mutable:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  return _internal_add_arg_names();
}
inline const std::string& GetSupportedDMResp_SupportedEventResult::_internal_arg_names(int index) const {
  return arg_names_.Get(index);
}
inline const std::string& GetSupportedDMResp_SupportedEventResult::arg_names(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  return _internal_arg_names(index);
}
inline std::string* GetSupportedDMResp_SupportedEventResult::mutable_arg_names(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  return arg_names_.Mutable(index);
}
inline void GetSupportedDMResp_SupportedEventResult::set_arg_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  arg_names_.Mutable(index)->assign(value);
}
inline void GetSupportedDMResp_SupportedEventResult::set_arg_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  arg_names_.Mutable(index)->assign(std::move(value));
}
inline void GetSupportedDMResp_SupportedEventResult::set_arg_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline void GetSupportedDMResp_SupportedEventResult::set_arg_names(int index, const char* value, size_t size) {
  arg_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline std::string* GetSupportedDMResp_SupportedEventResult::_internal_add_arg_names() {
  return arg_names_.Add();
}
inline void GetSupportedDMResp_SupportedEventResult::add_arg_names(const std::string& value) {
  arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline void GetSupportedDMResp_SupportedEventResult::add_arg_names(std::string&& value) {
  arg_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline void GetSupportedDMResp_SupportedEventResult::add_arg_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline void GetSupportedDMResp_SupportedEventResult::add_arg_names(const char* value, size_t size) {
  arg_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSupportedDMResp_SupportedEventResult::arg_names() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  return arg_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSupportedDMResp_SupportedEventResult::mutable_arg_names() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.SupportedEventResult.arg_names)
  return &arg_names_;
}

// -------------------------------------------------------------------

// GetSupportedDMResp

// repeated .usp.GetSupportedDMResp.RequestedObjectResult req_obj_results = 1;
inline int GetSupportedDMResp::_internal_req_obj_results_size() const {
  return req_obj_results_.size();
}
inline int GetSupportedDMResp::req_obj_results_size() const {
  return _internal_req_obj_results_size();
}
inline void GetSupportedDMResp::clear_req_obj_results() {
  req_obj_results_.Clear();
}
inline ::usp::GetSupportedDMResp_RequestedObjectResult* GetSupportedDMResp::mutable_req_obj_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedDMResp.req_obj_results)
  return req_obj_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_RequestedObjectResult >*
GetSupportedDMResp::mutable_req_obj_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetSupportedDMResp.req_obj_results)
  return &req_obj_results_;
}
inline const ::usp::GetSupportedDMResp_RequestedObjectResult& GetSupportedDMResp::_internal_req_obj_results(int index) const {
  return req_obj_results_.Get(index);
}
inline const ::usp::GetSupportedDMResp_RequestedObjectResult& GetSupportedDMResp::req_obj_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedDMResp.req_obj_results)
  return _internal_req_obj_results(index);
}
inline ::usp::GetSupportedDMResp_RequestedObjectResult* GetSupportedDMResp::_internal_add_req_obj_results() {
  return req_obj_results_.Add();
}
inline ::usp::GetSupportedDMResp_RequestedObjectResult* GetSupportedDMResp::add_req_obj_results() {
  // @@protoc_insertion_point(field_add:usp.GetSupportedDMResp.req_obj_results)
  return _internal_add_req_obj_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetSupportedDMResp_RequestedObjectResult >&
GetSupportedDMResp::req_obj_results() const {
  // @@protoc_insertion_point(field_list:usp.GetSupportedDMResp.req_obj_results)
  return req_obj_results_;
}

// -------------------------------------------------------------------

// GetInstances

// repeated string obj_paths = 1;
inline int GetInstances::_internal_obj_paths_size() const {
  return obj_paths_.size();
}
inline int GetInstances::obj_paths_size() const {
  return _internal_obj_paths_size();
}
inline void GetInstances::clear_obj_paths() {
  obj_paths_.Clear();
}
inline std::string* GetInstances::add_obj_paths() {
  // @@protoc_insertion_point(field_add_mutable:usp.GetInstances.obj_paths)
  return _internal_add_obj_paths();
}
inline const std::string& GetInstances::_internal_obj_paths(int index) const {
  return obj_paths_.Get(index);
}
inline const std::string& GetInstances::obj_paths(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetInstances.obj_paths)
  return _internal_obj_paths(index);
}
inline std::string* GetInstances::mutable_obj_paths(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetInstances.obj_paths)
  return obj_paths_.Mutable(index);
}
inline void GetInstances::set_obj_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.GetInstances.obj_paths)
  obj_paths_.Mutable(index)->assign(value);
}
inline void GetInstances::set_obj_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.GetInstances.obj_paths)
  obj_paths_.Mutable(index)->assign(std::move(value));
}
inline void GetInstances::set_obj_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.GetInstances.obj_paths)
}
inline void GetInstances::set_obj_paths(int index, const char* value, size_t size) {
  obj_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.GetInstances.obj_paths)
}
inline std::string* GetInstances::_internal_add_obj_paths() {
  return obj_paths_.Add();
}
inline void GetInstances::add_obj_paths(const std::string& value) {
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.GetInstances.obj_paths)
}
inline void GetInstances::add_obj_paths(std::string&& value) {
  obj_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.GetInstances.obj_paths)
}
inline void GetInstances::add_obj_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.GetInstances.obj_paths)
}
inline void GetInstances::add_obj_paths(const char* value, size_t size) {
  obj_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.GetInstances.obj_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInstances::obj_paths() const {
  // @@protoc_insertion_point(field_list:usp.GetInstances.obj_paths)
  return obj_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInstances::mutable_obj_paths() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetInstances.obj_paths)
  return &obj_paths_;
}

// bool first_level_only = 2;
inline void GetInstances::clear_first_level_only() {
  first_level_only_ = false;
}
inline bool GetInstances::_internal_first_level_only() const {
  return first_level_only_;
}
inline bool GetInstances::first_level_only() const {
  // @@protoc_insertion_point(field_get:usp.GetInstances.first_level_only)
  return _internal_first_level_only();
}
inline void GetInstances::_internal_set_first_level_only(bool value) {
  
  first_level_only_ = value;
}
inline void GetInstances::set_first_level_only(bool value) {
  _internal_set_first_level_only(value);
  // @@protoc_insertion_point(field_set:usp.GetInstances.first_level_only)
}

// -------------------------------------------------------------------

// GetInstancesResp_RequestedPathResult

// string requested_path = 1;
inline void GetInstancesResp_RequestedPathResult::clear_requested_path() {
  requested_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInstancesResp_RequestedPathResult::requested_path() const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.RequestedPathResult.requested_path)
  return _internal_requested_path();
}
inline void GetInstancesResp_RequestedPathResult::set_requested_path(const std::string& value) {
  _internal_set_requested_path(value);
  // @@protoc_insertion_point(field_set:usp.GetInstancesResp.RequestedPathResult.requested_path)
}
inline std::string* GetInstancesResp_RequestedPathResult::mutable_requested_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetInstancesResp.RequestedPathResult.requested_path)
  return _internal_mutable_requested_path();
}
inline const std::string& GetInstancesResp_RequestedPathResult::_internal_requested_path() const {
  return requested_path_.Get();
}
inline void GetInstancesResp_RequestedPathResult::_internal_set_requested_path(const std::string& value) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInstancesResp_RequestedPathResult::set_requested_path(std::string&& value) {
  
  requested_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetInstancesResp.RequestedPathResult.requested_path)
}
inline void GetInstancesResp_RequestedPathResult::set_requested_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetInstancesResp.RequestedPathResult.requested_path)
}
inline void GetInstancesResp_RequestedPathResult::set_requested_path(const char* value,
    size_t size) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetInstancesResp.RequestedPathResult.requested_path)
}
inline std::string* GetInstancesResp_RequestedPathResult::_internal_mutable_requested_path() {
  
  return requested_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInstancesResp_RequestedPathResult::release_requested_path() {
  // @@protoc_insertion_point(field_release:usp.GetInstancesResp.RequestedPathResult.requested_path)
  return requested_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInstancesResp_RequestedPathResult::set_allocated_requested_path(std::string* requested_path) {
  if (requested_path != nullptr) {
    
  } else {
    
  }
  requested_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetInstancesResp.RequestedPathResult.requested_path)
}

// fixed32 err_code = 2;
inline void GetInstancesResp_RequestedPathResult::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInstancesResp_RequestedPathResult::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInstancesResp_RequestedPathResult::err_code() const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.RequestedPathResult.err_code)
  return _internal_err_code();
}
inline void GetInstancesResp_RequestedPathResult::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void GetInstancesResp_RequestedPathResult::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.GetInstancesResp.RequestedPathResult.err_code)
}

// string err_msg = 3;
inline void GetInstancesResp_RequestedPathResult::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInstancesResp_RequestedPathResult::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.RequestedPathResult.err_msg)
  return _internal_err_msg();
}
inline void GetInstancesResp_RequestedPathResult::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.GetInstancesResp.RequestedPathResult.err_msg)
}
inline std::string* GetInstancesResp_RequestedPathResult::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.GetInstancesResp.RequestedPathResult.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& GetInstancesResp_RequestedPathResult::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void GetInstancesResp_RequestedPathResult::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInstancesResp_RequestedPathResult::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetInstancesResp.RequestedPathResult.err_msg)
}
inline void GetInstancesResp_RequestedPathResult::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetInstancesResp.RequestedPathResult.err_msg)
}
inline void GetInstancesResp_RequestedPathResult::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetInstancesResp.RequestedPathResult.err_msg)
}
inline std::string* GetInstancesResp_RequestedPathResult::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInstancesResp_RequestedPathResult::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.GetInstancesResp.RequestedPathResult.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInstancesResp_RequestedPathResult::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetInstancesResp.RequestedPathResult.err_msg)
}

// repeated .usp.GetInstancesResp.CurrInstance curr_insts = 4;
inline int GetInstancesResp_RequestedPathResult::_internal_curr_insts_size() const {
  return curr_insts_.size();
}
inline int GetInstancesResp_RequestedPathResult::curr_insts_size() const {
  return _internal_curr_insts_size();
}
inline void GetInstancesResp_RequestedPathResult::clear_curr_insts() {
  curr_insts_.Clear();
}
inline ::usp::GetInstancesResp_CurrInstance* GetInstancesResp_RequestedPathResult::mutable_curr_insts(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetInstancesResp.RequestedPathResult.curr_insts)
  return curr_insts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_CurrInstance >*
GetInstancesResp_RequestedPathResult::mutable_curr_insts() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetInstancesResp.RequestedPathResult.curr_insts)
  return &curr_insts_;
}
inline const ::usp::GetInstancesResp_CurrInstance& GetInstancesResp_RequestedPathResult::_internal_curr_insts(int index) const {
  return curr_insts_.Get(index);
}
inline const ::usp::GetInstancesResp_CurrInstance& GetInstancesResp_RequestedPathResult::curr_insts(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.RequestedPathResult.curr_insts)
  return _internal_curr_insts(index);
}
inline ::usp::GetInstancesResp_CurrInstance* GetInstancesResp_RequestedPathResult::_internal_add_curr_insts() {
  return curr_insts_.Add();
}
inline ::usp::GetInstancesResp_CurrInstance* GetInstancesResp_RequestedPathResult::add_curr_insts() {
  // @@protoc_insertion_point(field_add:usp.GetInstancesResp.RequestedPathResult.curr_insts)
  return _internal_add_curr_insts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_CurrInstance >&
GetInstancesResp_RequestedPathResult::curr_insts() const {
  // @@protoc_insertion_point(field_list:usp.GetInstancesResp.RequestedPathResult.curr_insts)
  return curr_insts_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetInstancesResp_CurrInstance

// string instantiated_obj_path = 1;
inline void GetInstancesResp_CurrInstance::clear_instantiated_obj_path() {
  instantiated_obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInstancesResp_CurrInstance::instantiated_obj_path() const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
  return _internal_instantiated_obj_path();
}
inline void GetInstancesResp_CurrInstance::set_instantiated_obj_path(const std::string& value) {
  _internal_set_instantiated_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
}
inline std::string* GetInstancesResp_CurrInstance::mutable_instantiated_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
  return _internal_mutable_instantiated_obj_path();
}
inline const std::string& GetInstancesResp_CurrInstance::_internal_instantiated_obj_path() const {
  return instantiated_obj_path_.Get();
}
inline void GetInstancesResp_CurrInstance::_internal_set_instantiated_obj_path(const std::string& value) {
  
  instantiated_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInstancesResp_CurrInstance::set_instantiated_obj_path(std::string&& value) {
  
  instantiated_obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
}
inline void GetInstancesResp_CurrInstance::set_instantiated_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instantiated_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
}
inline void GetInstancesResp_CurrInstance::set_instantiated_obj_path(const char* value,
    size_t size) {
  
  instantiated_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
}
inline std::string* GetInstancesResp_CurrInstance::_internal_mutable_instantiated_obj_path() {
  
  return instantiated_obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInstancesResp_CurrInstance::release_instantiated_obj_path() {
  // @@protoc_insertion_point(field_release:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
  return instantiated_obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInstancesResp_CurrInstance::set_allocated_instantiated_obj_path(std::string* instantiated_obj_path) {
  if (instantiated_obj_path != nullptr) {
    
  } else {
    
  }
  instantiated_obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instantiated_obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetInstancesResp.CurrInstance.instantiated_obj_path)
}

// map<string, string> unique_keys = 2;
inline int GetInstancesResp_CurrInstance::_internal_unique_keys_size() const {
  return unique_keys_.size();
}
inline int GetInstancesResp_CurrInstance::unique_keys_size() const {
  return _internal_unique_keys_size();
}
inline void GetInstancesResp_CurrInstance::clear_unique_keys() {
  unique_keys_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetInstancesResp_CurrInstance::_internal_unique_keys() const {
  return unique_keys_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetInstancesResp_CurrInstance::unique_keys() const {
  // @@protoc_insertion_point(field_map:usp.GetInstancesResp.CurrInstance.unique_keys)
  return _internal_unique_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetInstancesResp_CurrInstance::_internal_mutable_unique_keys() {
  return unique_keys_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetInstancesResp_CurrInstance::mutable_unique_keys() {
  // @@protoc_insertion_point(field_mutable_map:usp.GetInstancesResp.CurrInstance.unique_keys)
  return _internal_mutable_unique_keys();
}

// -------------------------------------------------------------------

// GetInstancesResp

// repeated .usp.GetInstancesResp.RequestedPathResult req_path_results = 1;
inline int GetInstancesResp::_internal_req_path_results_size() const {
  return req_path_results_.size();
}
inline int GetInstancesResp::req_path_results_size() const {
  return _internal_req_path_results_size();
}
inline void GetInstancesResp::clear_req_path_results() {
  req_path_results_.Clear();
}
inline ::usp::GetInstancesResp_RequestedPathResult* GetInstancesResp::mutable_req_path_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.GetInstancesResp.req_path_results)
  return req_path_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_RequestedPathResult >*
GetInstancesResp::mutable_req_path_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.GetInstancesResp.req_path_results)
  return &req_path_results_;
}
inline const ::usp::GetInstancesResp_RequestedPathResult& GetInstancesResp::_internal_req_path_results(int index) const {
  return req_path_results_.Get(index);
}
inline const ::usp::GetInstancesResp_RequestedPathResult& GetInstancesResp::req_path_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.GetInstancesResp.req_path_results)
  return _internal_req_path_results(index);
}
inline ::usp::GetInstancesResp_RequestedPathResult* GetInstancesResp::_internal_add_req_path_results() {
  return req_path_results_.Add();
}
inline ::usp::GetInstancesResp_RequestedPathResult* GetInstancesResp::add_req_path_results() {
  // @@protoc_insertion_point(field_add:usp.GetInstancesResp.req_path_results)
  return _internal_add_req_path_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::GetInstancesResp_RequestedPathResult >&
GetInstancesResp::req_path_results() const {
  // @@protoc_insertion_point(field_list:usp.GetInstancesResp.req_path_results)
  return req_path_results_;
}

// -------------------------------------------------------------------

// GetSupportedProtocol

// string controller_supported_protocol_versions = 1;
inline void GetSupportedProtocol::clear_controller_supported_protocol_versions() {
  controller_supported_protocol_versions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedProtocol::controller_supported_protocol_versions() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedProtocol.controller_supported_protocol_versions)
  return _internal_controller_supported_protocol_versions();
}
inline void GetSupportedProtocol::set_controller_supported_protocol_versions(const std::string& value) {
  _internal_set_controller_supported_protocol_versions(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedProtocol.controller_supported_protocol_versions)
}
inline std::string* GetSupportedProtocol::mutable_controller_supported_protocol_versions() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedProtocol.controller_supported_protocol_versions)
  return _internal_mutable_controller_supported_protocol_versions();
}
inline const std::string& GetSupportedProtocol::_internal_controller_supported_protocol_versions() const {
  return controller_supported_protocol_versions_.Get();
}
inline void GetSupportedProtocol::_internal_set_controller_supported_protocol_versions(const std::string& value) {
  
  controller_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedProtocol::set_controller_supported_protocol_versions(std::string&& value) {
  
  controller_supported_protocol_versions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedProtocol.controller_supported_protocol_versions)
}
inline void GetSupportedProtocol::set_controller_supported_protocol_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  controller_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedProtocol.controller_supported_protocol_versions)
}
inline void GetSupportedProtocol::set_controller_supported_protocol_versions(const char* value,
    size_t size) {
  
  controller_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedProtocol.controller_supported_protocol_versions)
}
inline std::string* GetSupportedProtocol::_internal_mutable_controller_supported_protocol_versions() {
  
  return controller_supported_protocol_versions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedProtocol::release_controller_supported_protocol_versions() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedProtocol.controller_supported_protocol_versions)
  return controller_supported_protocol_versions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedProtocol::set_allocated_controller_supported_protocol_versions(std::string* controller_supported_protocol_versions) {
  if (controller_supported_protocol_versions != nullptr) {
    
  } else {
    
  }
  controller_supported_protocol_versions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_supported_protocol_versions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedProtocol.controller_supported_protocol_versions)
}

// -------------------------------------------------------------------

// GetSupportedProtocolResp

// string agent_supported_protocol_versions = 1;
inline void GetSupportedProtocolResp::clear_agent_supported_protocol_versions() {
  agent_supported_protocol_versions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSupportedProtocolResp::agent_supported_protocol_versions() const {
  // @@protoc_insertion_point(field_get:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
  return _internal_agent_supported_protocol_versions();
}
inline void GetSupportedProtocolResp::set_agent_supported_protocol_versions(const std::string& value) {
  _internal_set_agent_supported_protocol_versions(value);
  // @@protoc_insertion_point(field_set:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
}
inline std::string* GetSupportedProtocolResp::mutable_agent_supported_protocol_versions() {
  // @@protoc_insertion_point(field_mutable:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
  return _internal_mutable_agent_supported_protocol_versions();
}
inline const std::string& GetSupportedProtocolResp::_internal_agent_supported_protocol_versions() const {
  return agent_supported_protocol_versions_.Get();
}
inline void GetSupportedProtocolResp::_internal_set_agent_supported_protocol_versions(const std::string& value) {
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSupportedProtocolResp::set_agent_supported_protocol_versions(std::string&& value) {
  
  agent_supported_protocol_versions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
}
inline void GetSupportedProtocolResp::set_agent_supported_protocol_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
}
inline void GetSupportedProtocolResp::set_agent_supported_protocol_versions(const char* value,
    size_t size) {
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
}
inline std::string* GetSupportedProtocolResp::_internal_mutable_agent_supported_protocol_versions() {
  
  return agent_supported_protocol_versions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSupportedProtocolResp::release_agent_supported_protocol_versions() {
  // @@protoc_insertion_point(field_release:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
  return agent_supported_protocol_versions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSupportedProtocolResp::set_allocated_agent_supported_protocol_versions(std::string* agent_supported_protocol_versions) {
  if (agent_supported_protocol_versions != nullptr) {
    
  } else {
    
  }
  agent_supported_protocol_versions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_supported_protocol_versions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.GetSupportedProtocolResp.agent_supported_protocol_versions)
}

// -------------------------------------------------------------------

// Add_CreateObject

// string obj_path = 1;
inline void Add_CreateObject::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Add_CreateObject::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Add.CreateObject.obj_path)
  return _internal_obj_path();
}
inline void Add_CreateObject::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Add.CreateObject.obj_path)
}
inline std::string* Add_CreateObject::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Add.CreateObject.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Add_CreateObject::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Add_CreateObject::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Add_CreateObject::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Add.CreateObject.obj_path)
}
inline void Add_CreateObject::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Add.CreateObject.obj_path)
}
inline void Add_CreateObject::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Add.CreateObject.obj_path)
}
inline std::string* Add_CreateObject::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Add_CreateObject::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Add.CreateObject.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Add_CreateObject::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Add.CreateObject.obj_path)
}

// repeated .usp.Add.CreateParamSetting param_settings = 2;
inline int Add_CreateObject::_internal_param_settings_size() const {
  return param_settings_.size();
}
inline int Add_CreateObject::param_settings_size() const {
  return _internal_param_settings_size();
}
inline void Add_CreateObject::clear_param_settings() {
  param_settings_.Clear();
}
inline ::usp::Add_CreateParamSetting* Add_CreateObject::mutable_param_settings(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Add.CreateObject.param_settings)
  return param_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateParamSetting >*
Add_CreateObject::mutable_param_settings() {
  // @@protoc_insertion_point(field_mutable_list:usp.Add.CreateObject.param_settings)
  return &param_settings_;
}
inline const ::usp::Add_CreateParamSetting& Add_CreateObject::_internal_param_settings(int index) const {
  return param_settings_.Get(index);
}
inline const ::usp::Add_CreateParamSetting& Add_CreateObject::param_settings(int index) const {
  // @@protoc_insertion_point(field_get:usp.Add.CreateObject.param_settings)
  return _internal_param_settings(index);
}
inline ::usp::Add_CreateParamSetting* Add_CreateObject::_internal_add_param_settings() {
  return param_settings_.Add();
}
inline ::usp::Add_CreateParamSetting* Add_CreateObject::add_param_settings() {
  // @@protoc_insertion_point(field_add:usp.Add.CreateObject.param_settings)
  return _internal_add_param_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateParamSetting >&
Add_CreateObject::param_settings() const {
  // @@protoc_insertion_point(field_list:usp.Add.CreateObject.param_settings)
  return param_settings_;
}

// -------------------------------------------------------------------

// Add_CreateParamSetting

// string param = 1;
inline void Add_CreateParamSetting::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Add_CreateParamSetting::param() const {
  // @@protoc_insertion_point(field_get:usp.Add.CreateParamSetting.param)
  return _internal_param();
}
inline void Add_CreateParamSetting::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:usp.Add.CreateParamSetting.param)
}
inline std::string* Add_CreateParamSetting::mutable_param() {
  // @@protoc_insertion_point(field_mutable:usp.Add.CreateParamSetting.param)
  return _internal_mutable_param();
}
inline const std::string& Add_CreateParamSetting::_internal_param() const {
  return param_.Get();
}
inline void Add_CreateParamSetting::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Add_CreateParamSetting::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Add.CreateParamSetting.param)
}
inline void Add_CreateParamSetting::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Add.CreateParamSetting.param)
}
inline void Add_CreateParamSetting::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Add.CreateParamSetting.param)
}
inline std::string* Add_CreateParamSetting::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Add_CreateParamSetting::release_param() {
  // @@protoc_insertion_point(field_release:usp.Add.CreateParamSetting.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Add_CreateParamSetting::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Add.CreateParamSetting.param)
}

// string value = 2;
inline void Add_CreateParamSetting::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Add_CreateParamSetting::value() const {
  // @@protoc_insertion_point(field_get:usp.Add.CreateParamSetting.value)
  return _internal_value();
}
inline void Add_CreateParamSetting::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:usp.Add.CreateParamSetting.value)
}
inline std::string* Add_CreateParamSetting::mutable_value() {
  // @@protoc_insertion_point(field_mutable:usp.Add.CreateParamSetting.value)
  return _internal_mutable_value();
}
inline const std::string& Add_CreateParamSetting::_internal_value() const {
  return value_.Get();
}
inline void Add_CreateParamSetting::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Add_CreateParamSetting::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Add.CreateParamSetting.value)
}
inline void Add_CreateParamSetting::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Add.CreateParamSetting.value)
}
inline void Add_CreateParamSetting::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Add.CreateParamSetting.value)
}
inline std::string* Add_CreateParamSetting::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Add_CreateParamSetting::release_value() {
  // @@protoc_insertion_point(field_release:usp.Add.CreateParamSetting.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Add_CreateParamSetting::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Add.CreateParamSetting.value)
}

// bool required = 3;
inline void Add_CreateParamSetting::clear_required() {
  required_ = false;
}
inline bool Add_CreateParamSetting::_internal_required() const {
  return required_;
}
inline bool Add_CreateParamSetting::required() const {
  // @@protoc_insertion_point(field_get:usp.Add.CreateParamSetting.required)
  return _internal_required();
}
inline void Add_CreateParamSetting::_internal_set_required(bool value) {
  
  required_ = value;
}
inline void Add_CreateParamSetting::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:usp.Add.CreateParamSetting.required)
}

// -------------------------------------------------------------------

// Add

// bool allow_partial = 1;
inline void Add::clear_allow_partial() {
  allow_partial_ = false;
}
inline bool Add::_internal_allow_partial() const {
  return allow_partial_;
}
inline bool Add::allow_partial() const {
  // @@protoc_insertion_point(field_get:usp.Add.allow_partial)
  return _internal_allow_partial();
}
inline void Add::_internal_set_allow_partial(bool value) {
  
  allow_partial_ = value;
}
inline void Add::set_allow_partial(bool value) {
  _internal_set_allow_partial(value);
  // @@protoc_insertion_point(field_set:usp.Add.allow_partial)
}

// repeated .usp.Add.CreateObject create_objs = 2;
inline int Add::_internal_create_objs_size() const {
  return create_objs_.size();
}
inline int Add::create_objs_size() const {
  return _internal_create_objs_size();
}
inline void Add::clear_create_objs() {
  create_objs_.Clear();
}
inline ::usp::Add_CreateObject* Add::mutable_create_objs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Add.create_objs)
  return create_objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateObject >*
Add::mutable_create_objs() {
  // @@protoc_insertion_point(field_mutable_list:usp.Add.create_objs)
  return &create_objs_;
}
inline const ::usp::Add_CreateObject& Add::_internal_create_objs(int index) const {
  return create_objs_.Get(index);
}
inline const ::usp::Add_CreateObject& Add::create_objs(int index) const {
  // @@protoc_insertion_point(field_get:usp.Add.create_objs)
  return _internal_create_objs(index);
}
inline ::usp::Add_CreateObject* Add::_internal_add_create_objs() {
  return create_objs_.Add();
}
inline ::usp::Add_CreateObject* Add::add_create_objs() {
  // @@protoc_insertion_point(field_add:usp.Add.create_objs)
  return _internal_add_create_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Add_CreateObject >&
Add::create_objs() const {
  // @@protoc_insertion_point(field_list:usp.Add.create_objs)
  return create_objs_;
}

// -------------------------------------------------------------------

// AddResp_CreatedObjectResult_OperationStatus_OperationFailure

// fixed32 err_code = 1;
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddResp_CreatedObjectResult_OperationStatus_OperationFailure::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddResp_CreatedObjectResult_OperationStatus_OperationFailure::err_code() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_code)
  return _internal_err_code();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_code)
}

// string err_msg = 2;
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddResp_CreatedObjectResult_OperationStatus_OperationFailure::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_err_msg();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationFailure::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& AddResp_CreatedObjectResult_OperationStatus_OperationFailure::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationFailure::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationFailure::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationFailure::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure.err_msg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddResp_CreatedObjectResult_OperationStatus_OperationSuccess

// string instantiated_path = 1;
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::clear_instantiated_path() {
  instantiated_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::instantiated_path() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
  return _internal_instantiated_path();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::set_instantiated_path(const std::string& value) {
  _internal_set_instantiated_path(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::mutable_instantiated_path() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
  return _internal_mutable_instantiated_path();
}
inline const std::string& AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_instantiated_path() const {
  return instantiated_path_.Get();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_set_instantiated_path(const std::string& value) {
  
  instantiated_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::set_instantiated_path(std::string&& value) {
  
  instantiated_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::set_instantiated_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instantiated_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::set_instantiated_path(const char* value,
    size_t size) {
  
  instantiated_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_mutable_instantiated_path() {
  
  return instantiated_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::release_instantiated_path() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
  return instantiated_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::set_allocated_instantiated_path(std::string* instantiated_path) {
  if (instantiated_path != nullptr) {
    
  } else {
    
  }
  instantiated_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instantiated_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.instantiated_path)
}

// repeated .usp.AddResp.ParameterError param_errs = 2;
inline int AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_param_errs_size() const {
  return param_errs_.size();
}
inline int AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::param_errs_size() const {
  return _internal_param_errs_size();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::clear_param_errs() {
  param_errs_.Clear();
}
inline ::usp::AddResp_ParameterError* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::mutable_param_errs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.param_errs)
  return param_errs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_ParameterError >*
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::mutable_param_errs() {
  // @@protoc_insertion_point(field_mutable_list:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.param_errs)
  return &param_errs_;
}
inline const ::usp::AddResp_ParameterError& AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_param_errs(int index) const {
  return param_errs_.Get(index);
}
inline const ::usp::AddResp_ParameterError& AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::param_errs(int index) const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.param_errs)
  return _internal_param_errs(index);
}
inline ::usp::AddResp_ParameterError* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_add_param_errs() {
  return param_errs_.Add();
}
inline ::usp::AddResp_ParameterError* AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::add_param_errs() {
  // @@protoc_insertion_point(field_add:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.param_errs)
  return _internal_add_param_errs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_ParameterError >&
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::param_errs() const {
  // @@protoc_insertion_point(field_list:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.param_errs)
  return param_errs_;
}

// map<string, string> unique_keys = 3;
inline int AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_unique_keys_size() const {
  return unique_keys_.size();
}
inline int AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::unique_keys_size() const {
  return _internal_unique_keys_size();
}
inline void AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::clear_unique_keys() {
  unique_keys_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_unique_keys() const {
  return unique_keys_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::unique_keys() const {
  // @@protoc_insertion_point(field_map:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys)
  return _internal_unique_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::_internal_mutable_unique_keys() {
  return unique_keys_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddResp_CreatedObjectResult_OperationStatus_OperationSuccess::mutable_unique_keys() {
  // @@protoc_insertion_point(field_mutable_map:usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys)
  return _internal_mutable_unique_keys();
}

// -------------------------------------------------------------------

// AddResp_CreatedObjectResult_OperationStatus

// .usp.AddResp.CreatedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
inline bool AddResp_CreatedObjectResult_OperationStatus::_internal_has_oper_failure() const {
  return oper_status_case() == kOperFailure;
}
inline bool AddResp_CreatedObjectResult_OperationStatus::has_oper_failure() const {
  return _internal_has_oper_failure();
}
inline void AddResp_CreatedObjectResult_OperationStatus::set_has_oper_failure() {
  _oneof_case_[0] = kOperFailure;
}
inline void AddResp_CreatedObjectResult_OperationStatus::clear_oper_failure() {
  if (_internal_has_oper_failure()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_failure_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* AddResp_CreatedObjectResult_OperationStatus::release_oper_failure() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
      ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure& AddResp_CreatedObjectResult_OperationStatus::_internal_oper_failure() const {
  return _internal_has_oper_failure()
      ? *oper_status_.oper_failure_
      : *reinterpret_cast< ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure*>(&::usp::_AddResp_CreatedObjectResult_OperationStatus_OperationFailure_default_instance_);
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure& AddResp_CreatedObjectResult_OperationStatus::oper_failure() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.oper_failure)
  return _internal_oper_failure();
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* AddResp_CreatedObjectResult_OperationStatus::unsafe_arena_release_oper_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.AddResp.CreatedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
    ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddResp_CreatedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_failure(::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* oper_failure) {
  clear_oper_status();
  if (oper_failure) {
    set_has_oper_failure();
    oper_status_.oper_failure_ = oper_failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.AddResp.CreatedObjectResult.OperationStatus.oper_failure)
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* AddResp_CreatedObjectResult_OperationStatus::_internal_mutable_oper_failure() {
  if (!_internal_has_oper_failure()) {
    clear_oper_status();
    set_has_oper_failure();
    oper_status_.oper_failure_ = CreateMaybeMessage< ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure >(GetArena());
  }
  return oper_status_.oper_failure_;
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationFailure* AddResp_CreatedObjectResult_OperationStatus::mutable_oper_failure() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.OperationStatus.oper_failure)
  return _internal_mutable_oper_failure();
}

// .usp.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
inline bool AddResp_CreatedObjectResult_OperationStatus::_internal_has_oper_success() const {
  return oper_status_case() == kOperSuccess;
}
inline bool AddResp_CreatedObjectResult_OperationStatus::has_oper_success() const {
  return _internal_has_oper_success();
}
inline void AddResp_CreatedObjectResult_OperationStatus::set_has_oper_success() {
  _oneof_case_[0] = kOperSuccess;
}
inline void AddResp_CreatedObjectResult_OperationStatus::clear_oper_success() {
  if (_internal_has_oper_success()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_success_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* AddResp_CreatedObjectResult_OperationStatus::release_oper_success() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
      ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& AddResp_CreatedObjectResult_OperationStatus::_internal_oper_success() const {
  return _internal_has_oper_success()
      ? *oper_status_.oper_success_
      : *reinterpret_cast< ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess*>(&::usp::_AddResp_CreatedObjectResult_OperationStatus_OperationSuccess_default_instance_);
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess& AddResp_CreatedObjectResult_OperationStatus::oper_success() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.OperationStatus.oper_success)
  return _internal_oper_success();
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* AddResp_CreatedObjectResult_OperationStatus::unsafe_arena_release_oper_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.AddResp.CreatedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
    ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddResp_CreatedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_success(::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* oper_success) {
  clear_oper_status();
  if (oper_success) {
    set_has_oper_success();
    oper_status_.oper_success_ = oper_success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.AddResp.CreatedObjectResult.OperationStatus.oper_success)
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* AddResp_CreatedObjectResult_OperationStatus::_internal_mutable_oper_success() {
  if (!_internal_has_oper_success()) {
    clear_oper_status();
    set_has_oper_success();
    oper_status_.oper_success_ = CreateMaybeMessage< ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess >(GetArena());
  }
  return oper_status_.oper_success_;
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus_OperationSuccess* AddResp_CreatedObjectResult_OperationStatus::mutable_oper_success() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.OperationStatus.oper_success)
  return _internal_mutable_oper_success();
}

inline bool AddResp_CreatedObjectResult_OperationStatus::has_oper_status() const {
  return oper_status_case() != OPER_STATUS_NOT_SET;
}
inline void AddResp_CreatedObjectResult_OperationStatus::clear_has_oper_status() {
  _oneof_case_[0] = OPER_STATUS_NOT_SET;
}
inline AddResp_CreatedObjectResult_OperationStatus::OperStatusCase AddResp_CreatedObjectResult_OperationStatus::oper_status_case() const {
  return AddResp_CreatedObjectResult_OperationStatus::OperStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AddResp_CreatedObjectResult

// string requested_path = 1;
inline void AddResp_CreatedObjectResult::clear_requested_path() {
  requested_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddResp_CreatedObjectResult::requested_path() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.requested_path)
  return _internal_requested_path();
}
inline void AddResp_CreatedObjectResult::set_requested_path(const std::string& value) {
  _internal_set_requested_path(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.CreatedObjectResult.requested_path)
}
inline std::string* AddResp_CreatedObjectResult::mutable_requested_path() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.requested_path)
  return _internal_mutable_requested_path();
}
inline const std::string& AddResp_CreatedObjectResult::_internal_requested_path() const {
  return requested_path_.Get();
}
inline void AddResp_CreatedObjectResult::_internal_set_requested_path(const std::string& value) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddResp_CreatedObjectResult::set_requested_path(std::string&& value) {
  
  requested_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.AddResp.CreatedObjectResult.requested_path)
}
inline void AddResp_CreatedObjectResult::set_requested_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.AddResp.CreatedObjectResult.requested_path)
}
inline void AddResp_CreatedObjectResult::set_requested_path(const char* value,
    size_t size) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.AddResp.CreatedObjectResult.requested_path)
}
inline std::string* AddResp_CreatedObjectResult::_internal_mutable_requested_path() {
  
  return requested_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddResp_CreatedObjectResult::release_requested_path() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.requested_path)
  return requested_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResp_CreatedObjectResult::set_allocated_requested_path(std::string* requested_path) {
  if (requested_path != nullptr) {
    
  } else {
    
  }
  requested_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.CreatedObjectResult.requested_path)
}

// .usp.AddResp.CreatedObjectResult.OperationStatus oper_status = 2;
inline bool AddResp_CreatedObjectResult::_internal_has_oper_status() const {
  return this != internal_default_instance() && oper_status_ != nullptr;
}
inline bool AddResp_CreatedObjectResult::has_oper_status() const {
  return _internal_has_oper_status();
}
inline void AddResp_CreatedObjectResult::clear_oper_status() {
  if (GetArena() == nullptr && oper_status_ != nullptr) {
    delete oper_status_;
  }
  oper_status_ = nullptr;
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus& AddResp_CreatedObjectResult::_internal_oper_status() const {
  const ::usp::AddResp_CreatedObjectResult_OperationStatus* p = oper_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::usp::AddResp_CreatedObjectResult_OperationStatus*>(
      &::usp::_AddResp_CreatedObjectResult_OperationStatus_default_instance_);
}
inline const ::usp::AddResp_CreatedObjectResult_OperationStatus& AddResp_CreatedObjectResult::oper_status() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.CreatedObjectResult.oper_status)
  return _internal_oper_status();
}
inline void AddResp_CreatedObjectResult::unsafe_arena_set_allocated_oper_status(
    ::usp::AddResp_CreatedObjectResult_OperationStatus* oper_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oper_status_);
  }
  oper_status_ = oper_status;
  if (oper_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.AddResp.CreatedObjectResult.oper_status)
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus* AddResp_CreatedObjectResult::release_oper_status() {
  
  ::usp::AddResp_CreatedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus* AddResp_CreatedObjectResult::unsafe_arena_release_oper_status() {
  // @@protoc_insertion_point(field_release:usp.AddResp.CreatedObjectResult.oper_status)
  
  ::usp::AddResp_CreatedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  return temp;
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus* AddResp_CreatedObjectResult::_internal_mutable_oper_status() {
  
  if (oper_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::usp::AddResp_CreatedObjectResult_OperationStatus>(GetArena());
    oper_status_ = p;
  }
  return oper_status_;
}
inline ::usp::AddResp_CreatedObjectResult_OperationStatus* AddResp_CreatedObjectResult::mutable_oper_status() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.CreatedObjectResult.oper_status)
  return _internal_mutable_oper_status();
}
inline void AddResp_CreatedObjectResult::set_allocated_oper_status(::usp::AddResp_CreatedObjectResult_OperationStatus* oper_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oper_status_;
  }
  if (oper_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oper_status);
    if (message_arena != submessage_arena) {
      oper_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oper_status, submessage_arena);
    }
    
  } else {
    
  }
  oper_status_ = oper_status;
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.CreatedObjectResult.oper_status)
}

// -------------------------------------------------------------------

// AddResp_ParameterError

// string param = 1;
inline void AddResp_ParameterError::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddResp_ParameterError::param() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.ParameterError.param)
  return _internal_param();
}
inline void AddResp_ParameterError::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.ParameterError.param)
}
inline std::string* AddResp_ParameterError::mutable_param() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.ParameterError.param)
  return _internal_mutable_param();
}
inline const std::string& AddResp_ParameterError::_internal_param() const {
  return param_.Get();
}
inline void AddResp_ParameterError::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddResp_ParameterError::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.AddResp.ParameterError.param)
}
inline void AddResp_ParameterError::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.AddResp.ParameterError.param)
}
inline void AddResp_ParameterError::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.AddResp.ParameterError.param)
}
inline std::string* AddResp_ParameterError::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddResp_ParameterError::release_param() {
  // @@protoc_insertion_point(field_release:usp.AddResp.ParameterError.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResp_ParameterError::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.ParameterError.param)
}

// fixed32 err_code = 2;
inline void AddResp_ParameterError::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddResp_ParameterError::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddResp_ParameterError::err_code() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.ParameterError.err_code)
  return _internal_err_code();
}
inline void AddResp_ParameterError::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void AddResp_ParameterError::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.ParameterError.err_code)
}

// string err_msg = 3;
inline void AddResp_ParameterError::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddResp_ParameterError::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.AddResp.ParameterError.err_msg)
  return _internal_err_msg();
}
inline void AddResp_ParameterError::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.AddResp.ParameterError.err_msg)
}
inline std::string* AddResp_ParameterError::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.ParameterError.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& AddResp_ParameterError::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void AddResp_ParameterError::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddResp_ParameterError::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.AddResp.ParameterError.err_msg)
}
inline void AddResp_ParameterError::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.AddResp.ParameterError.err_msg)
}
inline void AddResp_ParameterError::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.AddResp.ParameterError.err_msg)
}
inline std::string* AddResp_ParameterError::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddResp_ParameterError::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.AddResp.ParameterError.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResp_ParameterError::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.AddResp.ParameterError.err_msg)
}

// -------------------------------------------------------------------

// AddResp

// repeated .usp.AddResp.CreatedObjectResult created_obj_results = 1;
inline int AddResp::_internal_created_obj_results_size() const {
  return created_obj_results_.size();
}
inline int AddResp::created_obj_results_size() const {
  return _internal_created_obj_results_size();
}
inline void AddResp::clear_created_obj_results() {
  created_obj_results_.Clear();
}
inline ::usp::AddResp_CreatedObjectResult* AddResp::mutable_created_obj_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.AddResp.created_obj_results)
  return created_obj_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_CreatedObjectResult >*
AddResp::mutable_created_obj_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.AddResp.created_obj_results)
  return &created_obj_results_;
}
inline const ::usp::AddResp_CreatedObjectResult& AddResp::_internal_created_obj_results(int index) const {
  return created_obj_results_.Get(index);
}
inline const ::usp::AddResp_CreatedObjectResult& AddResp::created_obj_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.AddResp.created_obj_results)
  return _internal_created_obj_results(index);
}
inline ::usp::AddResp_CreatedObjectResult* AddResp::_internal_add_created_obj_results() {
  return created_obj_results_.Add();
}
inline ::usp::AddResp_CreatedObjectResult* AddResp::add_created_obj_results() {
  // @@protoc_insertion_point(field_add:usp.AddResp.created_obj_results)
  return _internal_add_created_obj_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::AddResp_CreatedObjectResult >&
AddResp::created_obj_results() const {
  // @@protoc_insertion_point(field_list:usp.AddResp.created_obj_results)
  return created_obj_results_;
}

// -------------------------------------------------------------------

// Delete

// bool allow_partial = 1;
inline void Delete::clear_allow_partial() {
  allow_partial_ = false;
}
inline bool Delete::_internal_allow_partial() const {
  return allow_partial_;
}
inline bool Delete::allow_partial() const {
  // @@protoc_insertion_point(field_get:usp.Delete.allow_partial)
  return _internal_allow_partial();
}
inline void Delete::_internal_set_allow_partial(bool value) {
  
  allow_partial_ = value;
}
inline void Delete::set_allow_partial(bool value) {
  _internal_set_allow_partial(value);
  // @@protoc_insertion_point(field_set:usp.Delete.allow_partial)
}

// repeated string obj_paths = 2;
inline int Delete::_internal_obj_paths_size() const {
  return obj_paths_.size();
}
inline int Delete::obj_paths_size() const {
  return _internal_obj_paths_size();
}
inline void Delete::clear_obj_paths() {
  obj_paths_.Clear();
}
inline std::string* Delete::add_obj_paths() {
  // @@protoc_insertion_point(field_add_mutable:usp.Delete.obj_paths)
  return _internal_add_obj_paths();
}
inline const std::string& Delete::_internal_obj_paths(int index) const {
  return obj_paths_.Get(index);
}
inline const std::string& Delete::obj_paths(int index) const {
  // @@protoc_insertion_point(field_get:usp.Delete.obj_paths)
  return _internal_obj_paths(index);
}
inline std::string* Delete::mutable_obj_paths(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Delete.obj_paths)
  return obj_paths_.Mutable(index);
}
inline void Delete::set_obj_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.Delete.obj_paths)
  obj_paths_.Mutable(index)->assign(value);
}
inline void Delete::set_obj_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.Delete.obj_paths)
  obj_paths_.Mutable(index)->assign(std::move(value));
}
inline void Delete::set_obj_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.Delete.obj_paths)
}
inline void Delete::set_obj_paths(int index, const char* value, size_t size) {
  obj_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.Delete.obj_paths)
}
inline std::string* Delete::_internal_add_obj_paths() {
  return obj_paths_.Add();
}
inline void Delete::add_obj_paths(const std::string& value) {
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.Delete.obj_paths)
}
inline void Delete::add_obj_paths(std::string&& value) {
  obj_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.Delete.obj_paths)
}
inline void Delete::add_obj_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obj_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.Delete.obj_paths)
}
inline void Delete::add_obj_paths(const char* value, size_t size) {
  obj_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.Delete.obj_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Delete::obj_paths() const {
  // @@protoc_insertion_point(field_list:usp.Delete.obj_paths)
  return obj_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Delete::mutable_obj_paths() {
  // @@protoc_insertion_point(field_mutable_list:usp.Delete.obj_paths)
  return &obj_paths_;
}

// -------------------------------------------------------------------

// DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure

// fixed32 err_code = 1;
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::err_code() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_code)
  return _internal_err_code();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_code)
}

// string err_msg = 2;
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_err_msg();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure.err_msg)
}

// -------------------------------------------------------------------

// DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess

// repeated string affected_paths = 1;
inline int DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_affected_paths_size() const {
  return affected_paths_.size();
}
inline int DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::affected_paths_size() const {
  return _internal_affected_paths_size();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::clear_affected_paths() {
  affected_paths_.Clear();
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_affected_paths() {
  // @@protoc_insertion_point(field_add_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  return _internal_add_affected_paths();
}
inline const std::string& DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_affected_paths(int index) const {
  return affected_paths_.Get(index);
}
inline const std::string& DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::affected_paths(int index) const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  return _internal_affected_paths(index);
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::mutable_affected_paths(int index) {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  return affected_paths_.Mutable(index);
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::set_affected_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  affected_paths_.Mutable(index)->assign(value);
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::set_affected_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  affected_paths_.Mutable(index)->assign(std::move(value));
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::set_affected_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  affected_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::set_affected_paths(int index, const char* value, size_t size) {
  affected_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline std::string* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_add_affected_paths() {
  return affected_paths_.Add();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_affected_paths(const std::string& value) {
  affected_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_affected_paths(std::string&& value) {
  affected_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_affected_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  affected_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_affected_paths(const char* value, size_t size) {
  affected_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::affected_paths() const {
  // @@protoc_insertion_point(field_list:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  return affected_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::mutable_affected_paths() {
  // @@protoc_insertion_point(field_mutable_list:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.affected_paths)
  return &affected_paths_;
}

// repeated .usp.DeleteResp.UnaffectedPathError unaffected_path_errs = 2;
inline int DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_unaffected_path_errs_size() const {
  return unaffected_path_errs_.size();
}
inline int DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::unaffected_path_errs_size() const {
  return _internal_unaffected_path_errs_size();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::clear_unaffected_path_errs() {
  unaffected_path_errs_.Clear();
}
inline ::usp::DeleteResp_UnaffectedPathError* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::mutable_unaffected_path_errs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.unaffected_path_errs)
  return unaffected_path_errs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_UnaffectedPathError >*
DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::mutable_unaffected_path_errs() {
  // @@protoc_insertion_point(field_mutable_list:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.unaffected_path_errs)
  return &unaffected_path_errs_;
}
inline const ::usp::DeleteResp_UnaffectedPathError& DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_unaffected_path_errs(int index) const {
  return unaffected_path_errs_.Get(index);
}
inline const ::usp::DeleteResp_UnaffectedPathError& DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::unaffected_path_errs(int index) const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.unaffected_path_errs)
  return _internal_unaffected_path_errs(index);
}
inline ::usp::DeleteResp_UnaffectedPathError* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::_internal_add_unaffected_path_errs() {
  return unaffected_path_errs_.Add();
}
inline ::usp::DeleteResp_UnaffectedPathError* DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::add_unaffected_path_errs() {
  // @@protoc_insertion_point(field_add:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.unaffected_path_errs)
  return _internal_add_unaffected_path_errs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_UnaffectedPathError >&
DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess::unaffected_path_errs() const {
  // @@protoc_insertion_point(field_list:usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess.unaffected_path_errs)
  return unaffected_path_errs_;
}

// -------------------------------------------------------------------

// DeleteResp_DeletedObjectResult_OperationStatus

// .usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
inline bool DeleteResp_DeletedObjectResult_OperationStatus::_internal_has_oper_failure() const {
  return oper_status_case() == kOperFailure;
}
inline bool DeleteResp_DeletedObjectResult_OperationStatus::has_oper_failure() const {
  return _internal_has_oper_failure();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::set_has_oper_failure() {
  _oneof_case_[0] = kOperFailure;
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::clear_oper_failure() {
  if (_internal_has_oper_failure()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_failure_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* DeleteResp_DeletedObjectResult_OperationStatus::release_oper_failure() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
      ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& DeleteResp_DeletedObjectResult_OperationStatus::_internal_oper_failure() const {
  return _internal_has_oper_failure()
      ? *oper_status_.oper_failure_
      : *reinterpret_cast< ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure*>(&::usp::_DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure_default_instance_);
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure& DeleteResp_DeletedObjectResult_OperationStatus::oper_failure() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_failure)
  return _internal_oper_failure();
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* DeleteResp_DeletedObjectResult_OperationStatus::unsafe_arena_release_oper_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
    ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_failure(::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* oper_failure) {
  clear_oper_status();
  if (oper_failure) {
    set_has_oper_failure();
    oper_status_.oper_failure_ = oper_failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_failure)
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* DeleteResp_DeletedObjectResult_OperationStatus::_internal_mutable_oper_failure() {
  if (!_internal_has_oper_failure()) {
    clear_oper_status();
    set_has_oper_failure();
    oper_status_.oper_failure_ = CreateMaybeMessage< ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure >(GetArena());
  }
  return oper_status_.oper_failure_;
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationFailure* DeleteResp_DeletedObjectResult_OperationStatus::mutable_oper_failure() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_failure)
  return _internal_mutable_oper_failure();
}

// .usp.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
inline bool DeleteResp_DeletedObjectResult_OperationStatus::_internal_has_oper_success() const {
  return oper_status_case() == kOperSuccess;
}
inline bool DeleteResp_DeletedObjectResult_OperationStatus::has_oper_success() const {
  return _internal_has_oper_success();
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::set_has_oper_success() {
  _oneof_case_[0] = kOperSuccess;
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::clear_oper_success() {
  if (_internal_has_oper_success()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_success_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* DeleteResp_DeletedObjectResult_OperationStatus::release_oper_success() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
      ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& DeleteResp_DeletedObjectResult_OperationStatus::_internal_oper_success() const {
  return _internal_has_oper_success()
      ? *oper_status_.oper_success_
      : *reinterpret_cast< ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess*>(&::usp::_DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess_default_instance_);
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess& DeleteResp_DeletedObjectResult_OperationStatus::oper_success() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_success)
  return _internal_oper_success();
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* DeleteResp_DeletedObjectResult_OperationStatus::unsafe_arena_release_oper_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
    ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_success(::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* oper_success) {
  clear_oper_status();
  if (oper_success) {
    set_has_oper_success();
    oper_status_.oper_success_ = oper_success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_success)
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* DeleteResp_DeletedObjectResult_OperationStatus::_internal_mutable_oper_success() {
  if (!_internal_has_oper_success()) {
    clear_oper_status();
    set_has_oper_success();
    oper_status_.oper_success_ = CreateMaybeMessage< ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess >(GetArena());
  }
  return oper_status_.oper_success_;
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus_OperationSuccess* DeleteResp_DeletedObjectResult_OperationStatus::mutable_oper_success() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.OperationStatus.oper_success)
  return _internal_mutable_oper_success();
}

inline bool DeleteResp_DeletedObjectResult_OperationStatus::has_oper_status() const {
  return oper_status_case() != OPER_STATUS_NOT_SET;
}
inline void DeleteResp_DeletedObjectResult_OperationStatus::clear_has_oper_status() {
  _oneof_case_[0] = OPER_STATUS_NOT_SET;
}
inline DeleteResp_DeletedObjectResult_OperationStatus::OperStatusCase DeleteResp_DeletedObjectResult_OperationStatus::oper_status_case() const {
  return DeleteResp_DeletedObjectResult_OperationStatus::OperStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteResp_DeletedObjectResult

// string requested_path = 1;
inline void DeleteResp_DeletedObjectResult::clear_requested_path() {
  requested_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResp_DeletedObjectResult::requested_path() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.requested_path)
  return _internal_requested_path();
}
inline void DeleteResp_DeletedObjectResult::set_requested_path(const std::string& value) {
  _internal_set_requested_path(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.DeletedObjectResult.requested_path)
}
inline std::string* DeleteResp_DeletedObjectResult::mutable_requested_path() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.requested_path)
  return _internal_mutable_requested_path();
}
inline const std::string& DeleteResp_DeletedObjectResult::_internal_requested_path() const {
  return requested_path_.Get();
}
inline void DeleteResp_DeletedObjectResult::_internal_set_requested_path(const std::string& value) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResp_DeletedObjectResult::set_requested_path(std::string&& value) {
  
  requested_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.DeleteResp.DeletedObjectResult.requested_path)
}
inline void DeleteResp_DeletedObjectResult::set_requested_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.DeleteResp.DeletedObjectResult.requested_path)
}
inline void DeleteResp_DeletedObjectResult::set_requested_path(const char* value,
    size_t size) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.DeleteResp.DeletedObjectResult.requested_path)
}
inline std::string* DeleteResp_DeletedObjectResult::_internal_mutable_requested_path() {
  
  return requested_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResp_DeletedObjectResult::release_requested_path() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.DeletedObjectResult.requested_path)
  return requested_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResp_DeletedObjectResult::set_allocated_requested_path(std::string* requested_path) {
  if (requested_path != nullptr) {
    
  } else {
    
  }
  requested_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.DeleteResp.DeletedObjectResult.requested_path)
}

// .usp.DeleteResp.DeletedObjectResult.OperationStatus oper_status = 2;
inline bool DeleteResp_DeletedObjectResult::_internal_has_oper_status() const {
  return this != internal_default_instance() && oper_status_ != nullptr;
}
inline bool DeleteResp_DeletedObjectResult::has_oper_status() const {
  return _internal_has_oper_status();
}
inline void DeleteResp_DeletedObjectResult::clear_oper_status() {
  if (GetArena() == nullptr && oper_status_ != nullptr) {
    delete oper_status_;
  }
  oper_status_ = nullptr;
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus& DeleteResp_DeletedObjectResult::_internal_oper_status() const {
  const ::usp::DeleteResp_DeletedObjectResult_OperationStatus* p = oper_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::usp::DeleteResp_DeletedObjectResult_OperationStatus*>(
      &::usp::_DeleteResp_DeletedObjectResult_OperationStatus_default_instance_);
}
inline const ::usp::DeleteResp_DeletedObjectResult_OperationStatus& DeleteResp_DeletedObjectResult::oper_status() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.DeletedObjectResult.oper_status)
  return _internal_oper_status();
}
inline void DeleteResp_DeletedObjectResult::unsafe_arena_set_allocated_oper_status(
    ::usp::DeleteResp_DeletedObjectResult_OperationStatus* oper_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oper_status_);
  }
  oper_status_ = oper_status;
  if (oper_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.DeleteResp.DeletedObjectResult.oper_status)
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus* DeleteResp_DeletedObjectResult::release_oper_status() {
  
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus* DeleteResp_DeletedObjectResult::unsafe_arena_release_oper_status() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.DeletedObjectResult.oper_status)
  
  ::usp::DeleteResp_DeletedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  return temp;
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus* DeleteResp_DeletedObjectResult::_internal_mutable_oper_status() {
  
  if (oper_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::usp::DeleteResp_DeletedObjectResult_OperationStatus>(GetArena());
    oper_status_ = p;
  }
  return oper_status_;
}
inline ::usp::DeleteResp_DeletedObjectResult_OperationStatus* DeleteResp_DeletedObjectResult::mutable_oper_status() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.DeletedObjectResult.oper_status)
  return _internal_mutable_oper_status();
}
inline void DeleteResp_DeletedObjectResult::set_allocated_oper_status(::usp::DeleteResp_DeletedObjectResult_OperationStatus* oper_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oper_status_;
  }
  if (oper_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oper_status);
    if (message_arena != submessage_arena) {
      oper_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oper_status, submessage_arena);
    }
    
  } else {
    
  }
  oper_status_ = oper_status;
  // @@protoc_insertion_point(field_set_allocated:usp.DeleteResp.DeletedObjectResult.oper_status)
}

// -------------------------------------------------------------------

// DeleteResp_UnaffectedPathError

// string unaffected_path = 1;
inline void DeleteResp_UnaffectedPathError::clear_unaffected_path() {
  unaffected_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResp_UnaffectedPathError::unaffected_path() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.UnaffectedPathError.unaffected_path)
  return _internal_unaffected_path();
}
inline void DeleteResp_UnaffectedPathError::set_unaffected_path(const std::string& value) {
  _internal_set_unaffected_path(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.UnaffectedPathError.unaffected_path)
}
inline std::string* DeleteResp_UnaffectedPathError::mutable_unaffected_path() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.UnaffectedPathError.unaffected_path)
  return _internal_mutable_unaffected_path();
}
inline const std::string& DeleteResp_UnaffectedPathError::_internal_unaffected_path() const {
  return unaffected_path_.Get();
}
inline void DeleteResp_UnaffectedPathError::_internal_set_unaffected_path(const std::string& value) {
  
  unaffected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResp_UnaffectedPathError::set_unaffected_path(std::string&& value) {
  
  unaffected_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.DeleteResp.UnaffectedPathError.unaffected_path)
}
inline void DeleteResp_UnaffectedPathError::set_unaffected_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unaffected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.DeleteResp.UnaffectedPathError.unaffected_path)
}
inline void DeleteResp_UnaffectedPathError::set_unaffected_path(const char* value,
    size_t size) {
  
  unaffected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.DeleteResp.UnaffectedPathError.unaffected_path)
}
inline std::string* DeleteResp_UnaffectedPathError::_internal_mutable_unaffected_path() {
  
  return unaffected_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResp_UnaffectedPathError::release_unaffected_path() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.UnaffectedPathError.unaffected_path)
  return unaffected_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResp_UnaffectedPathError::set_allocated_unaffected_path(std::string* unaffected_path) {
  if (unaffected_path != nullptr) {
    
  } else {
    
  }
  unaffected_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unaffected_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.DeleteResp.UnaffectedPathError.unaffected_path)
}

// fixed32 err_code = 2;
inline void DeleteResp_UnaffectedPathError::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResp_UnaffectedPathError::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResp_UnaffectedPathError::err_code() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.UnaffectedPathError.err_code)
  return _internal_err_code();
}
inline void DeleteResp_UnaffectedPathError::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void DeleteResp_UnaffectedPathError::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.UnaffectedPathError.err_code)
}

// string err_msg = 3;
inline void DeleteResp_UnaffectedPathError::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResp_UnaffectedPathError::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.UnaffectedPathError.err_msg)
  return _internal_err_msg();
}
inline void DeleteResp_UnaffectedPathError::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.DeleteResp.UnaffectedPathError.err_msg)
}
inline std::string* DeleteResp_UnaffectedPathError::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.UnaffectedPathError.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& DeleteResp_UnaffectedPathError::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void DeleteResp_UnaffectedPathError::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResp_UnaffectedPathError::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.DeleteResp.UnaffectedPathError.err_msg)
}
inline void DeleteResp_UnaffectedPathError::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.DeleteResp.UnaffectedPathError.err_msg)
}
inline void DeleteResp_UnaffectedPathError::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.DeleteResp.UnaffectedPathError.err_msg)
}
inline std::string* DeleteResp_UnaffectedPathError::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResp_UnaffectedPathError::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.DeleteResp.UnaffectedPathError.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResp_UnaffectedPathError::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.DeleteResp.UnaffectedPathError.err_msg)
}

// -------------------------------------------------------------------

// DeleteResp

// repeated .usp.DeleteResp.DeletedObjectResult deleted_obj_results = 1;
inline int DeleteResp::_internal_deleted_obj_results_size() const {
  return deleted_obj_results_.size();
}
inline int DeleteResp::deleted_obj_results_size() const {
  return _internal_deleted_obj_results_size();
}
inline void DeleteResp::clear_deleted_obj_results() {
  deleted_obj_results_.Clear();
}
inline ::usp::DeleteResp_DeletedObjectResult* DeleteResp::mutable_deleted_obj_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.DeleteResp.deleted_obj_results)
  return deleted_obj_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_DeletedObjectResult >*
DeleteResp::mutable_deleted_obj_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.DeleteResp.deleted_obj_results)
  return &deleted_obj_results_;
}
inline const ::usp::DeleteResp_DeletedObjectResult& DeleteResp::_internal_deleted_obj_results(int index) const {
  return deleted_obj_results_.Get(index);
}
inline const ::usp::DeleteResp_DeletedObjectResult& DeleteResp::deleted_obj_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.DeleteResp.deleted_obj_results)
  return _internal_deleted_obj_results(index);
}
inline ::usp::DeleteResp_DeletedObjectResult* DeleteResp::_internal_add_deleted_obj_results() {
  return deleted_obj_results_.Add();
}
inline ::usp::DeleteResp_DeletedObjectResult* DeleteResp::add_deleted_obj_results() {
  // @@protoc_insertion_point(field_add:usp.DeleteResp.deleted_obj_results)
  return _internal_add_deleted_obj_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::DeleteResp_DeletedObjectResult >&
DeleteResp::deleted_obj_results() const {
  // @@protoc_insertion_point(field_list:usp.DeleteResp.deleted_obj_results)
  return deleted_obj_results_;
}

// -------------------------------------------------------------------

// Set_UpdateObject

// string obj_path = 1;
inline void Set_UpdateObject::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Set_UpdateObject::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Set.UpdateObject.obj_path)
  return _internal_obj_path();
}
inline void Set_UpdateObject::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Set.UpdateObject.obj_path)
}
inline std::string* Set_UpdateObject::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Set.UpdateObject.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Set_UpdateObject::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Set_UpdateObject::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Set_UpdateObject::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Set.UpdateObject.obj_path)
}
inline void Set_UpdateObject::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Set.UpdateObject.obj_path)
}
inline void Set_UpdateObject::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Set.UpdateObject.obj_path)
}
inline std::string* Set_UpdateObject::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Set_UpdateObject::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Set.UpdateObject.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Set_UpdateObject::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Set.UpdateObject.obj_path)
}

// repeated .usp.Set.UpdateParamSetting param_settings = 2;
inline int Set_UpdateObject::_internal_param_settings_size() const {
  return param_settings_.size();
}
inline int Set_UpdateObject::param_settings_size() const {
  return _internal_param_settings_size();
}
inline void Set_UpdateObject::clear_param_settings() {
  param_settings_.Clear();
}
inline ::usp::Set_UpdateParamSetting* Set_UpdateObject::mutable_param_settings(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Set.UpdateObject.param_settings)
  return param_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateParamSetting >*
Set_UpdateObject::mutable_param_settings() {
  // @@protoc_insertion_point(field_mutable_list:usp.Set.UpdateObject.param_settings)
  return &param_settings_;
}
inline const ::usp::Set_UpdateParamSetting& Set_UpdateObject::_internal_param_settings(int index) const {
  return param_settings_.Get(index);
}
inline const ::usp::Set_UpdateParamSetting& Set_UpdateObject::param_settings(int index) const {
  // @@protoc_insertion_point(field_get:usp.Set.UpdateObject.param_settings)
  return _internal_param_settings(index);
}
inline ::usp::Set_UpdateParamSetting* Set_UpdateObject::_internal_add_param_settings() {
  return param_settings_.Add();
}
inline ::usp::Set_UpdateParamSetting* Set_UpdateObject::add_param_settings() {
  // @@protoc_insertion_point(field_add:usp.Set.UpdateObject.param_settings)
  return _internal_add_param_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateParamSetting >&
Set_UpdateObject::param_settings() const {
  // @@protoc_insertion_point(field_list:usp.Set.UpdateObject.param_settings)
  return param_settings_;
}

// -------------------------------------------------------------------

// Set_UpdateParamSetting

// string param = 1;
inline void Set_UpdateParamSetting::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Set_UpdateParamSetting::param() const {
  // @@protoc_insertion_point(field_get:usp.Set.UpdateParamSetting.param)
  return _internal_param();
}
inline void Set_UpdateParamSetting::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:usp.Set.UpdateParamSetting.param)
}
inline std::string* Set_UpdateParamSetting::mutable_param() {
  // @@protoc_insertion_point(field_mutable:usp.Set.UpdateParamSetting.param)
  return _internal_mutable_param();
}
inline const std::string& Set_UpdateParamSetting::_internal_param() const {
  return param_.Get();
}
inline void Set_UpdateParamSetting::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Set_UpdateParamSetting::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Set.UpdateParamSetting.param)
}
inline void Set_UpdateParamSetting::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Set.UpdateParamSetting.param)
}
inline void Set_UpdateParamSetting::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Set.UpdateParamSetting.param)
}
inline std::string* Set_UpdateParamSetting::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Set_UpdateParamSetting::release_param() {
  // @@protoc_insertion_point(field_release:usp.Set.UpdateParamSetting.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Set_UpdateParamSetting::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Set.UpdateParamSetting.param)
}

// string value = 2;
inline void Set_UpdateParamSetting::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Set_UpdateParamSetting::value() const {
  // @@protoc_insertion_point(field_get:usp.Set.UpdateParamSetting.value)
  return _internal_value();
}
inline void Set_UpdateParamSetting::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:usp.Set.UpdateParamSetting.value)
}
inline std::string* Set_UpdateParamSetting::mutable_value() {
  // @@protoc_insertion_point(field_mutable:usp.Set.UpdateParamSetting.value)
  return _internal_mutable_value();
}
inline const std::string& Set_UpdateParamSetting::_internal_value() const {
  return value_.Get();
}
inline void Set_UpdateParamSetting::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Set_UpdateParamSetting::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Set.UpdateParamSetting.value)
}
inline void Set_UpdateParamSetting::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Set.UpdateParamSetting.value)
}
inline void Set_UpdateParamSetting::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Set.UpdateParamSetting.value)
}
inline std::string* Set_UpdateParamSetting::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Set_UpdateParamSetting::release_value() {
  // @@protoc_insertion_point(field_release:usp.Set.UpdateParamSetting.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Set_UpdateParamSetting::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Set.UpdateParamSetting.value)
}

// bool required = 3;
inline void Set_UpdateParamSetting::clear_required() {
  required_ = false;
}
inline bool Set_UpdateParamSetting::_internal_required() const {
  return required_;
}
inline bool Set_UpdateParamSetting::required() const {
  // @@protoc_insertion_point(field_get:usp.Set.UpdateParamSetting.required)
  return _internal_required();
}
inline void Set_UpdateParamSetting::_internal_set_required(bool value) {
  
  required_ = value;
}
inline void Set_UpdateParamSetting::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:usp.Set.UpdateParamSetting.required)
}

// -------------------------------------------------------------------

// Set

// bool allow_partial = 1;
inline void Set::clear_allow_partial() {
  allow_partial_ = false;
}
inline bool Set::_internal_allow_partial() const {
  return allow_partial_;
}
inline bool Set::allow_partial() const {
  // @@protoc_insertion_point(field_get:usp.Set.allow_partial)
  return _internal_allow_partial();
}
inline void Set::_internal_set_allow_partial(bool value) {
  
  allow_partial_ = value;
}
inline void Set::set_allow_partial(bool value) {
  _internal_set_allow_partial(value);
  // @@protoc_insertion_point(field_set:usp.Set.allow_partial)
}

// repeated .usp.Set.UpdateObject update_objs = 2;
inline int Set::_internal_update_objs_size() const {
  return update_objs_.size();
}
inline int Set::update_objs_size() const {
  return _internal_update_objs_size();
}
inline void Set::clear_update_objs() {
  update_objs_.Clear();
}
inline ::usp::Set_UpdateObject* Set::mutable_update_objs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.Set.update_objs)
  return update_objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateObject >*
Set::mutable_update_objs() {
  // @@protoc_insertion_point(field_mutable_list:usp.Set.update_objs)
  return &update_objs_;
}
inline const ::usp::Set_UpdateObject& Set::_internal_update_objs(int index) const {
  return update_objs_.Get(index);
}
inline const ::usp::Set_UpdateObject& Set::update_objs(int index) const {
  // @@protoc_insertion_point(field_get:usp.Set.update_objs)
  return _internal_update_objs(index);
}
inline ::usp::Set_UpdateObject* Set::_internal_add_update_objs() {
  return update_objs_.Add();
}
inline ::usp::Set_UpdateObject* Set::add_update_objs() {
  // @@protoc_insertion_point(field_add:usp.Set.update_objs)
  return _internal_add_update_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::Set_UpdateObject >&
Set::update_objs() const {
  // @@protoc_insertion_point(field_list:usp.Set.update_objs)
  return update_objs_;
}

// -------------------------------------------------------------------

// SetResp_UpdatedObjectResult_OperationStatus_OperationFailure

// fixed32 err_code = 1;
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::err_code() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_code)
  return _internal_err_code();
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_code)
}

// string err_msg = 2;
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_err_msg();
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
}
inline std::string* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.err_msg)
}

// repeated .usp.SetResp.UpdatedInstanceFailure updated_inst_failures = 3;
inline int SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_updated_inst_failures_size() const {
  return updated_inst_failures_.size();
}
inline int SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::updated_inst_failures_size() const {
  return _internal_updated_inst_failures_size();
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::clear_updated_inst_failures() {
  updated_inst_failures_.Clear();
}
inline ::usp::SetResp_UpdatedInstanceFailure* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::mutable_updated_inst_failures(int index) {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.updated_inst_failures)
  return updated_inst_failures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceFailure >*
SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::mutable_updated_inst_failures() {
  // @@protoc_insertion_point(field_mutable_list:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.updated_inst_failures)
  return &updated_inst_failures_;
}
inline const ::usp::SetResp_UpdatedInstanceFailure& SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_updated_inst_failures(int index) const {
  return updated_inst_failures_.Get(index);
}
inline const ::usp::SetResp_UpdatedInstanceFailure& SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::updated_inst_failures(int index) const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.updated_inst_failures)
  return _internal_updated_inst_failures(index);
}
inline ::usp::SetResp_UpdatedInstanceFailure* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::_internal_add_updated_inst_failures() {
  return updated_inst_failures_.Add();
}
inline ::usp::SetResp_UpdatedInstanceFailure* SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::add_updated_inst_failures() {
  // @@protoc_insertion_point(field_add:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.updated_inst_failures)
  return _internal_add_updated_inst_failures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceFailure >&
SetResp_UpdatedObjectResult_OperationStatus_OperationFailure::updated_inst_failures() const {
  // @@protoc_insertion_point(field_list:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure.updated_inst_failures)
  return updated_inst_failures_;
}

// -------------------------------------------------------------------

// SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess

// repeated .usp.SetResp.UpdatedInstanceResult updated_inst_results = 1;
inline int SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::_internal_updated_inst_results_size() const {
  return updated_inst_results_.size();
}
inline int SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::updated_inst_results_size() const {
  return _internal_updated_inst_results_size();
}
inline void SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::clear_updated_inst_results() {
  updated_inst_results_.Clear();
}
inline ::usp::SetResp_UpdatedInstanceResult* SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::mutable_updated_inst_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess.updated_inst_results)
  return updated_inst_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceResult >*
SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::mutable_updated_inst_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess.updated_inst_results)
  return &updated_inst_results_;
}
inline const ::usp::SetResp_UpdatedInstanceResult& SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::_internal_updated_inst_results(int index) const {
  return updated_inst_results_.Get(index);
}
inline const ::usp::SetResp_UpdatedInstanceResult& SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::updated_inst_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess.updated_inst_results)
  return _internal_updated_inst_results(index);
}
inline ::usp::SetResp_UpdatedInstanceResult* SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::_internal_add_updated_inst_results() {
  return updated_inst_results_.Add();
}
inline ::usp::SetResp_UpdatedInstanceResult* SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::add_updated_inst_results() {
  // @@protoc_insertion_point(field_add:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess.updated_inst_results)
  return _internal_add_updated_inst_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedInstanceResult >&
SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess::updated_inst_results() const {
  // @@protoc_insertion_point(field_list:usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess.updated_inst_results)
  return updated_inst_results_;
}

// -------------------------------------------------------------------

// SetResp_UpdatedObjectResult_OperationStatus

// .usp.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure oper_failure = 1;
inline bool SetResp_UpdatedObjectResult_OperationStatus::_internal_has_oper_failure() const {
  return oper_status_case() == kOperFailure;
}
inline bool SetResp_UpdatedObjectResult_OperationStatus::has_oper_failure() const {
  return _internal_has_oper_failure();
}
inline void SetResp_UpdatedObjectResult_OperationStatus::set_has_oper_failure() {
  _oneof_case_[0] = kOperFailure;
}
inline void SetResp_UpdatedObjectResult_OperationStatus::clear_oper_failure() {
  if (_internal_has_oper_failure()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_failure_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* SetResp_UpdatedObjectResult_OperationStatus::release_oper_failure() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
      ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& SetResp_UpdatedObjectResult_OperationStatus::_internal_oper_failure() const {
  return _internal_has_oper_failure()
      ? *oper_status_.oper_failure_
      : *reinterpret_cast< ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure*>(&::usp::_SetResp_UpdatedObjectResult_OperationStatus_OperationFailure_default_instance_);
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure& SetResp_UpdatedObjectResult_OperationStatus::oper_failure() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_failure)
  return _internal_oper_failure();
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* SetResp_UpdatedObjectResult_OperationStatus::unsafe_arena_release_oper_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_failure)
  if (_internal_has_oper_failure()) {
    clear_has_oper_status();
    ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* temp = oper_status_.oper_failure_;
    oper_status_.oper_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SetResp_UpdatedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_failure(::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* oper_failure) {
  clear_oper_status();
  if (oper_failure) {
    set_has_oper_failure();
    oper_status_.oper_failure_ = oper_failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_failure)
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* SetResp_UpdatedObjectResult_OperationStatus::_internal_mutable_oper_failure() {
  if (!_internal_has_oper_failure()) {
    clear_oper_status();
    set_has_oper_failure();
    oper_status_.oper_failure_ = CreateMaybeMessage< ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure >(GetArena());
  }
  return oper_status_.oper_failure_;
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationFailure* SetResp_UpdatedObjectResult_OperationStatus::mutable_oper_failure() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_failure)
  return _internal_mutable_oper_failure();
}

// .usp.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess oper_success = 2;
inline bool SetResp_UpdatedObjectResult_OperationStatus::_internal_has_oper_success() const {
  return oper_status_case() == kOperSuccess;
}
inline bool SetResp_UpdatedObjectResult_OperationStatus::has_oper_success() const {
  return _internal_has_oper_success();
}
inline void SetResp_UpdatedObjectResult_OperationStatus::set_has_oper_success() {
  _oneof_case_[0] = kOperSuccess;
}
inline void SetResp_UpdatedObjectResult_OperationStatus::clear_oper_success() {
  if (_internal_has_oper_success()) {
    if (GetArena() == nullptr) {
      delete oper_status_.oper_success_;
    }
    clear_has_oper_status();
  }
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* SetResp_UpdatedObjectResult_OperationStatus::release_oper_success() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
      ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& SetResp_UpdatedObjectResult_OperationStatus::_internal_oper_success() const {
  return _internal_has_oper_success()
      ? *oper_status_.oper_success_
      : *reinterpret_cast< ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess*>(&::usp::_SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess_default_instance_);
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess& SetResp_UpdatedObjectResult_OperationStatus::oper_success() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_success)
  return _internal_oper_success();
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* SetResp_UpdatedObjectResult_OperationStatus::unsafe_arena_release_oper_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_success)
  if (_internal_has_oper_success()) {
    clear_has_oper_status();
    ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* temp = oper_status_.oper_success_;
    oper_status_.oper_success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SetResp_UpdatedObjectResult_OperationStatus::unsafe_arena_set_allocated_oper_success(::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* oper_success) {
  clear_oper_status();
  if (oper_success) {
    set_has_oper_success();
    oper_status_.oper_success_ = oper_success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_success)
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* SetResp_UpdatedObjectResult_OperationStatus::_internal_mutable_oper_success() {
  if (!_internal_has_oper_success()) {
    clear_oper_status();
    set_has_oper_success();
    oper_status_.oper_success_ = CreateMaybeMessage< ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess >(GetArena());
  }
  return oper_status_.oper_success_;
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus_OperationSuccess* SetResp_UpdatedObjectResult_OperationStatus::mutable_oper_success() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.OperationStatus.oper_success)
  return _internal_mutable_oper_success();
}

inline bool SetResp_UpdatedObjectResult_OperationStatus::has_oper_status() const {
  return oper_status_case() != OPER_STATUS_NOT_SET;
}
inline void SetResp_UpdatedObjectResult_OperationStatus::clear_has_oper_status() {
  _oneof_case_[0] = OPER_STATUS_NOT_SET;
}
inline SetResp_UpdatedObjectResult_OperationStatus::OperStatusCase SetResp_UpdatedObjectResult_OperationStatus::oper_status_case() const {
  return SetResp_UpdatedObjectResult_OperationStatus::OperStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetResp_UpdatedObjectResult

// string requested_path = 1;
inline void SetResp_UpdatedObjectResult::clear_requested_path() {
  requested_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_UpdatedObjectResult::requested_path() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.requested_path)
  return _internal_requested_path();
}
inline void SetResp_UpdatedObjectResult::set_requested_path(const std::string& value) {
  _internal_set_requested_path(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.UpdatedObjectResult.requested_path)
}
inline std::string* SetResp_UpdatedObjectResult::mutable_requested_path() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.requested_path)
  return _internal_mutable_requested_path();
}
inline const std::string& SetResp_UpdatedObjectResult::_internal_requested_path() const {
  return requested_path_.Get();
}
inline void SetResp_UpdatedObjectResult::_internal_set_requested_path(const std::string& value) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_UpdatedObjectResult::set_requested_path(std::string&& value) {
  
  requested_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.UpdatedObjectResult.requested_path)
}
inline void SetResp_UpdatedObjectResult::set_requested_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.UpdatedObjectResult.requested_path)
}
inline void SetResp_UpdatedObjectResult::set_requested_path(const char* value,
    size_t size) {
  
  requested_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.UpdatedObjectResult.requested_path)
}
inline std::string* SetResp_UpdatedObjectResult::_internal_mutable_requested_path() {
  
  return requested_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_UpdatedObjectResult::release_requested_path() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedObjectResult.requested_path)
  return requested_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_UpdatedObjectResult::set_allocated_requested_path(std::string* requested_path) {
  if (requested_path != nullptr) {
    
  } else {
    
  }
  requested_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.UpdatedObjectResult.requested_path)
}

// .usp.SetResp.UpdatedObjectResult.OperationStatus oper_status = 2;
inline bool SetResp_UpdatedObjectResult::_internal_has_oper_status() const {
  return this != internal_default_instance() && oper_status_ != nullptr;
}
inline bool SetResp_UpdatedObjectResult::has_oper_status() const {
  return _internal_has_oper_status();
}
inline void SetResp_UpdatedObjectResult::clear_oper_status() {
  if (GetArena() == nullptr && oper_status_ != nullptr) {
    delete oper_status_;
  }
  oper_status_ = nullptr;
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus& SetResp_UpdatedObjectResult::_internal_oper_status() const {
  const ::usp::SetResp_UpdatedObjectResult_OperationStatus* p = oper_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::usp::SetResp_UpdatedObjectResult_OperationStatus*>(
      &::usp::_SetResp_UpdatedObjectResult_OperationStatus_default_instance_);
}
inline const ::usp::SetResp_UpdatedObjectResult_OperationStatus& SetResp_UpdatedObjectResult::oper_status() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedObjectResult.oper_status)
  return _internal_oper_status();
}
inline void SetResp_UpdatedObjectResult::unsafe_arena_set_allocated_oper_status(
    ::usp::SetResp_UpdatedObjectResult_OperationStatus* oper_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oper_status_);
  }
  oper_status_ = oper_status;
  if (oper_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.SetResp.UpdatedObjectResult.oper_status)
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus* SetResp_UpdatedObjectResult::release_oper_status() {
  
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus* SetResp_UpdatedObjectResult::unsafe_arena_release_oper_status() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedObjectResult.oper_status)
  
  ::usp::SetResp_UpdatedObjectResult_OperationStatus* temp = oper_status_;
  oper_status_ = nullptr;
  return temp;
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus* SetResp_UpdatedObjectResult::_internal_mutable_oper_status() {
  
  if (oper_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::usp::SetResp_UpdatedObjectResult_OperationStatus>(GetArena());
    oper_status_ = p;
  }
  return oper_status_;
}
inline ::usp::SetResp_UpdatedObjectResult_OperationStatus* SetResp_UpdatedObjectResult::mutable_oper_status() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedObjectResult.oper_status)
  return _internal_mutable_oper_status();
}
inline void SetResp_UpdatedObjectResult::set_allocated_oper_status(::usp::SetResp_UpdatedObjectResult_OperationStatus* oper_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oper_status_;
  }
  if (oper_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oper_status);
    if (message_arena != submessage_arena) {
      oper_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oper_status, submessage_arena);
    }
    
  } else {
    
  }
  oper_status_ = oper_status;
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.UpdatedObjectResult.oper_status)
}

// -------------------------------------------------------------------

// SetResp_UpdatedInstanceFailure

// string affected_path = 1;
inline void SetResp_UpdatedInstanceFailure::clear_affected_path() {
  affected_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_UpdatedInstanceFailure::affected_path() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedInstanceFailure.affected_path)
  return _internal_affected_path();
}
inline void SetResp_UpdatedInstanceFailure::set_affected_path(const std::string& value) {
  _internal_set_affected_path(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.UpdatedInstanceFailure.affected_path)
}
inline std::string* SetResp_UpdatedInstanceFailure::mutable_affected_path() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedInstanceFailure.affected_path)
  return _internal_mutable_affected_path();
}
inline const std::string& SetResp_UpdatedInstanceFailure::_internal_affected_path() const {
  return affected_path_.Get();
}
inline void SetResp_UpdatedInstanceFailure::_internal_set_affected_path(const std::string& value) {
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_UpdatedInstanceFailure::set_affected_path(std::string&& value) {
  
  affected_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.UpdatedInstanceFailure.affected_path)
}
inline void SetResp_UpdatedInstanceFailure::set_affected_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.UpdatedInstanceFailure.affected_path)
}
inline void SetResp_UpdatedInstanceFailure::set_affected_path(const char* value,
    size_t size) {
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.UpdatedInstanceFailure.affected_path)
}
inline std::string* SetResp_UpdatedInstanceFailure::_internal_mutable_affected_path() {
  
  return affected_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_UpdatedInstanceFailure::release_affected_path() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedInstanceFailure.affected_path)
  return affected_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_UpdatedInstanceFailure::set_allocated_affected_path(std::string* affected_path) {
  if (affected_path != nullptr) {
    
  } else {
    
  }
  affected_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affected_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.UpdatedInstanceFailure.affected_path)
}

// repeated .usp.SetResp.ParameterError param_errs = 2;
inline int SetResp_UpdatedInstanceFailure::_internal_param_errs_size() const {
  return param_errs_.size();
}
inline int SetResp_UpdatedInstanceFailure::param_errs_size() const {
  return _internal_param_errs_size();
}
inline void SetResp_UpdatedInstanceFailure::clear_param_errs() {
  param_errs_.Clear();
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceFailure::mutable_param_errs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedInstanceFailure.param_errs)
  return param_errs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >*
SetResp_UpdatedInstanceFailure::mutable_param_errs() {
  // @@protoc_insertion_point(field_mutable_list:usp.SetResp.UpdatedInstanceFailure.param_errs)
  return &param_errs_;
}
inline const ::usp::SetResp_ParameterError& SetResp_UpdatedInstanceFailure::_internal_param_errs(int index) const {
  return param_errs_.Get(index);
}
inline const ::usp::SetResp_ParameterError& SetResp_UpdatedInstanceFailure::param_errs(int index) const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedInstanceFailure.param_errs)
  return _internal_param_errs(index);
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceFailure::_internal_add_param_errs() {
  return param_errs_.Add();
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceFailure::add_param_errs() {
  // @@protoc_insertion_point(field_add:usp.SetResp.UpdatedInstanceFailure.param_errs)
  return _internal_add_param_errs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >&
SetResp_UpdatedInstanceFailure::param_errs() const {
  // @@protoc_insertion_point(field_list:usp.SetResp.UpdatedInstanceFailure.param_errs)
  return param_errs_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetResp_UpdatedInstanceResult

// string affected_path = 1;
inline void SetResp_UpdatedInstanceResult::clear_affected_path() {
  affected_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_UpdatedInstanceResult::affected_path() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedInstanceResult.affected_path)
  return _internal_affected_path();
}
inline void SetResp_UpdatedInstanceResult::set_affected_path(const std::string& value) {
  _internal_set_affected_path(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.UpdatedInstanceResult.affected_path)
}
inline std::string* SetResp_UpdatedInstanceResult::mutable_affected_path() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedInstanceResult.affected_path)
  return _internal_mutable_affected_path();
}
inline const std::string& SetResp_UpdatedInstanceResult::_internal_affected_path() const {
  return affected_path_.Get();
}
inline void SetResp_UpdatedInstanceResult::_internal_set_affected_path(const std::string& value) {
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_UpdatedInstanceResult::set_affected_path(std::string&& value) {
  
  affected_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.UpdatedInstanceResult.affected_path)
}
inline void SetResp_UpdatedInstanceResult::set_affected_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.UpdatedInstanceResult.affected_path)
}
inline void SetResp_UpdatedInstanceResult::set_affected_path(const char* value,
    size_t size) {
  
  affected_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.UpdatedInstanceResult.affected_path)
}
inline std::string* SetResp_UpdatedInstanceResult::_internal_mutable_affected_path() {
  
  return affected_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_UpdatedInstanceResult::release_affected_path() {
  // @@protoc_insertion_point(field_release:usp.SetResp.UpdatedInstanceResult.affected_path)
  return affected_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_UpdatedInstanceResult::set_allocated_affected_path(std::string* affected_path) {
  if (affected_path != nullptr) {
    
  } else {
    
  }
  affected_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affected_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.UpdatedInstanceResult.affected_path)
}

// repeated .usp.SetResp.ParameterError param_errs = 2;
inline int SetResp_UpdatedInstanceResult::_internal_param_errs_size() const {
  return param_errs_.size();
}
inline int SetResp_UpdatedInstanceResult::param_errs_size() const {
  return _internal_param_errs_size();
}
inline void SetResp_UpdatedInstanceResult::clear_param_errs() {
  param_errs_.Clear();
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceResult::mutable_param_errs(int index) {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.UpdatedInstanceResult.param_errs)
  return param_errs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >*
SetResp_UpdatedInstanceResult::mutable_param_errs() {
  // @@protoc_insertion_point(field_mutable_list:usp.SetResp.UpdatedInstanceResult.param_errs)
  return &param_errs_;
}
inline const ::usp::SetResp_ParameterError& SetResp_UpdatedInstanceResult::_internal_param_errs(int index) const {
  return param_errs_.Get(index);
}
inline const ::usp::SetResp_ParameterError& SetResp_UpdatedInstanceResult::param_errs(int index) const {
  // @@protoc_insertion_point(field_get:usp.SetResp.UpdatedInstanceResult.param_errs)
  return _internal_param_errs(index);
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceResult::_internal_add_param_errs() {
  return param_errs_.Add();
}
inline ::usp::SetResp_ParameterError* SetResp_UpdatedInstanceResult::add_param_errs() {
  // @@protoc_insertion_point(field_add:usp.SetResp.UpdatedInstanceResult.param_errs)
  return _internal_add_param_errs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_ParameterError >&
SetResp_UpdatedInstanceResult::param_errs() const {
  // @@protoc_insertion_point(field_list:usp.SetResp.UpdatedInstanceResult.param_errs)
  return param_errs_;
}

// map<string, string> updated_params = 3;
inline int SetResp_UpdatedInstanceResult::_internal_updated_params_size() const {
  return updated_params_.size();
}
inline int SetResp_UpdatedInstanceResult::updated_params_size() const {
  return _internal_updated_params_size();
}
inline void SetResp_UpdatedInstanceResult::clear_updated_params() {
  updated_params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SetResp_UpdatedInstanceResult::_internal_updated_params() const {
  return updated_params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SetResp_UpdatedInstanceResult::updated_params() const {
  // @@protoc_insertion_point(field_map:usp.SetResp.UpdatedInstanceResult.updated_params)
  return _internal_updated_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SetResp_UpdatedInstanceResult::_internal_mutable_updated_params() {
  return updated_params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SetResp_UpdatedInstanceResult::mutable_updated_params() {
  // @@protoc_insertion_point(field_mutable_map:usp.SetResp.UpdatedInstanceResult.updated_params)
  return _internal_mutable_updated_params();
}

// -------------------------------------------------------------------

// SetResp_ParameterError

// string param = 1;
inline void SetResp_ParameterError::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_ParameterError::param() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.ParameterError.param)
  return _internal_param();
}
inline void SetResp_ParameterError::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.ParameterError.param)
}
inline std::string* SetResp_ParameterError::mutable_param() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.ParameterError.param)
  return _internal_mutable_param();
}
inline const std::string& SetResp_ParameterError::_internal_param() const {
  return param_.Get();
}
inline void SetResp_ParameterError::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_ParameterError::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.ParameterError.param)
}
inline void SetResp_ParameterError::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.ParameterError.param)
}
inline void SetResp_ParameterError::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.ParameterError.param)
}
inline std::string* SetResp_ParameterError::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_ParameterError::release_param() {
  // @@protoc_insertion_point(field_release:usp.SetResp.ParameterError.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_ParameterError::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.ParameterError.param)
}

// fixed32 err_code = 2;
inline void SetResp_ParameterError::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResp_ParameterError::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResp_ParameterError::err_code() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.ParameterError.err_code)
  return _internal_err_code();
}
inline void SetResp_ParameterError::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void SetResp_ParameterError::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.ParameterError.err_code)
}

// string err_msg = 3;
inline void SetResp_ParameterError::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResp_ParameterError::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.SetResp.ParameterError.err_msg)
  return _internal_err_msg();
}
inline void SetResp_ParameterError::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.SetResp.ParameterError.err_msg)
}
inline std::string* SetResp_ParameterError::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.ParameterError.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& SetResp_ParameterError::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void SetResp_ParameterError::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResp_ParameterError::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.SetResp.ParameterError.err_msg)
}
inline void SetResp_ParameterError::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.SetResp.ParameterError.err_msg)
}
inline void SetResp_ParameterError::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.SetResp.ParameterError.err_msg)
}
inline std::string* SetResp_ParameterError::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResp_ParameterError::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.SetResp.ParameterError.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResp_ParameterError::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.SetResp.ParameterError.err_msg)
}

// -------------------------------------------------------------------

// SetResp

// repeated .usp.SetResp.UpdatedObjectResult updated_obj_results = 1;
inline int SetResp::_internal_updated_obj_results_size() const {
  return updated_obj_results_.size();
}
inline int SetResp::updated_obj_results_size() const {
  return _internal_updated_obj_results_size();
}
inline void SetResp::clear_updated_obj_results() {
  updated_obj_results_.Clear();
}
inline ::usp::SetResp_UpdatedObjectResult* SetResp::mutable_updated_obj_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.SetResp.updated_obj_results)
  return updated_obj_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedObjectResult >*
SetResp::mutable_updated_obj_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.SetResp.updated_obj_results)
  return &updated_obj_results_;
}
inline const ::usp::SetResp_UpdatedObjectResult& SetResp::_internal_updated_obj_results(int index) const {
  return updated_obj_results_.Get(index);
}
inline const ::usp::SetResp_UpdatedObjectResult& SetResp::updated_obj_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.SetResp.updated_obj_results)
  return _internal_updated_obj_results(index);
}
inline ::usp::SetResp_UpdatedObjectResult* SetResp::_internal_add_updated_obj_results() {
  return updated_obj_results_.Add();
}
inline ::usp::SetResp_UpdatedObjectResult* SetResp::add_updated_obj_results() {
  // @@protoc_insertion_point(field_add:usp.SetResp.updated_obj_results)
  return _internal_add_updated_obj_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::SetResp_UpdatedObjectResult >&
SetResp::updated_obj_results() const {
  // @@protoc_insertion_point(field_list:usp.SetResp.updated_obj_results)
  return updated_obj_results_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Operate

// string command = 1;
inline void Operate::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operate::command() const {
  // @@protoc_insertion_point(field_get:usp.Operate.command)
  return _internal_command();
}
inline void Operate::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:usp.Operate.command)
}
inline std::string* Operate::mutable_command() {
  // @@protoc_insertion_point(field_mutable:usp.Operate.command)
  return _internal_mutable_command();
}
inline const std::string& Operate::_internal_command() const {
  return command_.Get();
}
inline void Operate::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operate::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Operate.command)
}
inline void Operate::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Operate.command)
}
inline void Operate::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Operate.command)
}
inline std::string* Operate::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operate::release_command() {
  // @@protoc_insertion_point(field_release:usp.Operate.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operate::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Operate.command)
}

// string command_key = 2;
inline void Operate::clear_command_key() {
  command_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operate::command_key() const {
  // @@protoc_insertion_point(field_get:usp.Operate.command_key)
  return _internal_command_key();
}
inline void Operate::set_command_key(const std::string& value) {
  _internal_set_command_key(value);
  // @@protoc_insertion_point(field_set:usp.Operate.command_key)
}
inline std::string* Operate::mutable_command_key() {
  // @@protoc_insertion_point(field_mutable:usp.Operate.command_key)
  return _internal_mutable_command_key();
}
inline const std::string& Operate::_internal_command_key() const {
  return command_key_.Get();
}
inline void Operate::_internal_set_command_key(const std::string& value) {
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operate::set_command_key(std::string&& value) {
  
  command_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Operate.command_key)
}
inline void Operate::set_command_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Operate.command_key)
}
inline void Operate::set_command_key(const char* value,
    size_t size) {
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Operate.command_key)
}
inline std::string* Operate::_internal_mutable_command_key() {
  
  return command_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operate::release_command_key() {
  // @@protoc_insertion_point(field_release:usp.Operate.command_key)
  return command_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operate::set_allocated_command_key(std::string* command_key) {
  if (command_key != nullptr) {
    
  } else {
    
  }
  command_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Operate.command_key)
}

// bool send_resp = 3;
inline void Operate::clear_send_resp() {
  send_resp_ = false;
}
inline bool Operate::_internal_send_resp() const {
  return send_resp_;
}
inline bool Operate::send_resp() const {
  // @@protoc_insertion_point(field_get:usp.Operate.send_resp)
  return _internal_send_resp();
}
inline void Operate::_internal_set_send_resp(bool value) {
  
  send_resp_ = value;
}
inline void Operate::set_send_resp(bool value) {
  _internal_set_send_resp(value);
  // @@protoc_insertion_point(field_set:usp.Operate.send_resp)
}

// map<string, string> input_args = 4;
inline int Operate::_internal_input_args_size() const {
  return input_args_.size();
}
inline int Operate::input_args_size() const {
  return _internal_input_args_size();
}
inline void Operate::clear_input_args() {
  input_args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Operate::_internal_input_args() const {
  return input_args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Operate::input_args() const {
  // @@protoc_insertion_point(field_map:usp.Operate.input_args)
  return _internal_input_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Operate::_internal_mutable_input_args() {
  return input_args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Operate::mutable_input_args() {
  // @@protoc_insertion_point(field_mutable_map:usp.Operate.input_args)
  return _internal_mutable_input_args();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OperateResp_OperationResult_OutputArgs

// map<string, string> output_args = 1;
inline int OperateResp_OperationResult_OutputArgs::_internal_output_args_size() const {
  return output_args_.size();
}
inline int OperateResp_OperationResult_OutputArgs::output_args_size() const {
  return _internal_output_args_size();
}
inline void OperateResp_OperationResult_OutputArgs::clear_output_args() {
  output_args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OperateResp_OperationResult_OutputArgs::_internal_output_args() const {
  return output_args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OperateResp_OperationResult_OutputArgs::output_args() const {
  // @@protoc_insertion_point(field_map:usp.OperateResp.OperationResult.OutputArgs.output_args)
  return _internal_output_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OperateResp_OperationResult_OutputArgs::_internal_mutable_output_args() {
  return output_args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OperateResp_OperationResult_OutputArgs::mutable_output_args() {
  // @@protoc_insertion_point(field_mutable_map:usp.OperateResp.OperationResult.OutputArgs.output_args)
  return _internal_mutable_output_args();
}

// -------------------------------------------------------------------

// OperateResp_OperationResult_CommandFailure

// fixed32 err_code = 1;
inline void OperateResp_OperationResult_CommandFailure::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperateResp_OperationResult_CommandFailure::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperateResp_OperationResult_CommandFailure::err_code() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.CommandFailure.err_code)
  return _internal_err_code();
}
inline void OperateResp_OperationResult_CommandFailure::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void OperateResp_OperationResult_CommandFailure::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.OperateResp.OperationResult.CommandFailure.err_code)
}

// string err_msg = 2;
inline void OperateResp_OperationResult_CommandFailure::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OperateResp_OperationResult_CommandFailure::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.CommandFailure.err_msg)
  return _internal_err_msg();
}
inline void OperateResp_OperationResult_CommandFailure::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.OperateResp.OperationResult.CommandFailure.err_msg)
}
inline std::string* OperateResp_OperationResult_CommandFailure::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.OperationResult.CommandFailure.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& OperateResp_OperationResult_CommandFailure::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void OperateResp_OperationResult_CommandFailure::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperateResp_OperationResult_CommandFailure::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.OperateResp.OperationResult.CommandFailure.err_msg)
}
inline void OperateResp_OperationResult_CommandFailure::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.OperateResp.OperationResult.CommandFailure.err_msg)
}
inline void OperateResp_OperationResult_CommandFailure::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.OperateResp.OperationResult.CommandFailure.err_msg)
}
inline std::string* OperateResp_OperationResult_CommandFailure::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperateResp_OperationResult_CommandFailure::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.OperateResp.OperationResult.CommandFailure.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperateResp_OperationResult_CommandFailure::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.OperateResp.OperationResult.CommandFailure.err_msg)
}

// -------------------------------------------------------------------

// OperateResp_OperationResult

// string executed_command = 1;
inline void OperateResp_OperationResult::clear_executed_command() {
  executed_command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OperateResp_OperationResult::executed_command() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.executed_command)
  return _internal_executed_command();
}
inline void OperateResp_OperationResult::set_executed_command(const std::string& value) {
  _internal_set_executed_command(value);
  // @@protoc_insertion_point(field_set:usp.OperateResp.OperationResult.executed_command)
}
inline std::string* OperateResp_OperationResult::mutable_executed_command() {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.OperationResult.executed_command)
  return _internal_mutable_executed_command();
}
inline const std::string& OperateResp_OperationResult::_internal_executed_command() const {
  return executed_command_.Get();
}
inline void OperateResp_OperationResult::_internal_set_executed_command(const std::string& value) {
  
  executed_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperateResp_OperationResult::set_executed_command(std::string&& value) {
  
  executed_command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.OperateResp.OperationResult.executed_command)
}
inline void OperateResp_OperationResult::set_executed_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  executed_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.OperateResp.OperationResult.executed_command)
}
inline void OperateResp_OperationResult::set_executed_command(const char* value,
    size_t size) {
  
  executed_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.OperateResp.OperationResult.executed_command)
}
inline std::string* OperateResp_OperationResult::_internal_mutable_executed_command() {
  
  return executed_command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperateResp_OperationResult::release_executed_command() {
  // @@protoc_insertion_point(field_release:usp.OperateResp.OperationResult.executed_command)
  return executed_command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperateResp_OperationResult::set_allocated_executed_command(std::string* executed_command) {
  if (executed_command != nullptr) {
    
  } else {
    
  }
  executed_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executed_command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.OperateResp.OperationResult.executed_command)
}

// string req_obj_path = 2;
inline bool OperateResp_OperationResult::_internal_has_req_obj_path() const {
  return operation_resp_case() == kReqObjPath;
}
inline void OperateResp_OperationResult::set_has_req_obj_path() {
  _oneof_case_[0] = kReqObjPath;
}
inline void OperateResp_OperationResult::clear_req_obj_path() {
  if (_internal_has_req_obj_path()) {
    operation_resp_.req_obj_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_operation_resp();
  }
}
inline const std::string& OperateResp_OperationResult::req_obj_path() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.req_obj_path)
  return _internal_req_obj_path();
}
inline void OperateResp_OperationResult::set_req_obj_path(const std::string& value) {
  _internal_set_req_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.OperateResp.OperationResult.req_obj_path)
}
inline std::string* OperateResp_OperationResult::mutable_req_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.OperationResult.req_obj_path)
  return _internal_mutable_req_obj_path();
}
inline const std::string& OperateResp_OperationResult::_internal_req_obj_path() const {
  if (_internal_has_req_obj_path()) {
    return operation_resp_.req_obj_path_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OperateResp_OperationResult::_internal_set_req_obj_path(const std::string& value) {
  if (!_internal_has_req_obj_path()) {
    clear_operation_resp();
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  operation_resp_.req_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperateResp_OperationResult::set_req_obj_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:usp.OperateResp.OperationResult.req_obj_path)
  if (!_internal_has_req_obj_path()) {
    clear_operation_resp();
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  operation_resp_.req_obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.OperateResp.OperationResult.req_obj_path)
}
inline void OperateResp_OperationResult::set_req_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_req_obj_path()) {
    clear_operation_resp();
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  operation_resp_.req_obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:usp.OperateResp.OperationResult.req_obj_path)
}
inline void OperateResp_OperationResult::set_req_obj_path(const char* value,
                             size_t size) {
  if (!_internal_has_req_obj_path()) {
    clear_operation_resp();
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  operation_resp_.req_obj_path_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.OperateResp.OperationResult.req_obj_path)
}
inline std::string* OperateResp_OperationResult::_internal_mutable_req_obj_path() {
  if (!_internal_has_req_obj_path()) {
    clear_operation_resp();
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return operation_resp_.req_obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperateResp_OperationResult::release_req_obj_path() {
  // @@protoc_insertion_point(field_release:usp.OperateResp.OperationResult.req_obj_path)
  if (_internal_has_req_obj_path()) {
    clear_has_operation_resp();
    return operation_resp_.req_obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void OperateResp_OperationResult::set_allocated_req_obj_path(std::string* req_obj_path) {
  if (has_operation_resp()) {
    clear_operation_resp();
  }
  if (req_obj_path != nullptr) {
    set_has_req_obj_path();
    operation_resp_.req_obj_path_.UnsafeSetDefault(req_obj_path);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(req_obj_path);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:usp.OperateResp.OperationResult.req_obj_path)
}

// .usp.OperateResp.OperationResult.OutputArgs req_output_args = 3;
inline bool OperateResp_OperationResult::_internal_has_req_output_args() const {
  return operation_resp_case() == kReqOutputArgs;
}
inline bool OperateResp_OperationResult::has_req_output_args() const {
  return _internal_has_req_output_args();
}
inline void OperateResp_OperationResult::set_has_req_output_args() {
  _oneof_case_[0] = kReqOutputArgs;
}
inline void OperateResp_OperationResult::clear_req_output_args() {
  if (_internal_has_req_output_args()) {
    if (GetArena() == nullptr) {
      delete operation_resp_.req_output_args_;
    }
    clear_has_operation_resp();
  }
}
inline ::usp::OperateResp_OperationResult_OutputArgs* OperateResp_OperationResult::release_req_output_args() {
  // @@protoc_insertion_point(field_release:usp.OperateResp.OperationResult.req_output_args)
  if (_internal_has_req_output_args()) {
    clear_has_operation_resp();
      ::usp::OperateResp_OperationResult_OutputArgs* temp = operation_resp_.req_output_args_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_resp_.req_output_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::OperateResp_OperationResult_OutputArgs& OperateResp_OperationResult::_internal_req_output_args() const {
  return _internal_has_req_output_args()
      ? *operation_resp_.req_output_args_
      : *reinterpret_cast< ::usp::OperateResp_OperationResult_OutputArgs*>(&::usp::_OperateResp_OperationResult_OutputArgs_default_instance_);
}
inline const ::usp::OperateResp_OperationResult_OutputArgs& OperateResp_OperationResult::req_output_args() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.req_output_args)
  return _internal_req_output_args();
}
inline ::usp::OperateResp_OperationResult_OutputArgs* OperateResp_OperationResult::unsafe_arena_release_req_output_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.OperateResp.OperationResult.req_output_args)
  if (_internal_has_req_output_args()) {
    clear_has_operation_resp();
    ::usp::OperateResp_OperationResult_OutputArgs* temp = operation_resp_.req_output_args_;
    operation_resp_.req_output_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperateResp_OperationResult::unsafe_arena_set_allocated_req_output_args(::usp::OperateResp_OperationResult_OutputArgs* req_output_args) {
  clear_operation_resp();
  if (req_output_args) {
    set_has_req_output_args();
    operation_resp_.req_output_args_ = req_output_args;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.OperateResp.OperationResult.req_output_args)
}
inline ::usp::OperateResp_OperationResult_OutputArgs* OperateResp_OperationResult::_internal_mutable_req_output_args() {
  if (!_internal_has_req_output_args()) {
    clear_operation_resp();
    set_has_req_output_args();
    operation_resp_.req_output_args_ = CreateMaybeMessage< ::usp::OperateResp_OperationResult_OutputArgs >(GetArena());
  }
  return operation_resp_.req_output_args_;
}
inline ::usp::OperateResp_OperationResult_OutputArgs* OperateResp_OperationResult::mutable_req_output_args() {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.OperationResult.req_output_args)
  return _internal_mutable_req_output_args();
}

// .usp.OperateResp.OperationResult.CommandFailure cmd_failure = 4;
inline bool OperateResp_OperationResult::_internal_has_cmd_failure() const {
  return operation_resp_case() == kCmdFailure;
}
inline bool OperateResp_OperationResult::has_cmd_failure() const {
  return _internal_has_cmd_failure();
}
inline void OperateResp_OperationResult::set_has_cmd_failure() {
  _oneof_case_[0] = kCmdFailure;
}
inline void OperateResp_OperationResult::clear_cmd_failure() {
  if (_internal_has_cmd_failure()) {
    if (GetArena() == nullptr) {
      delete operation_resp_.cmd_failure_;
    }
    clear_has_operation_resp();
  }
}
inline ::usp::OperateResp_OperationResult_CommandFailure* OperateResp_OperationResult::release_cmd_failure() {
  // @@protoc_insertion_point(field_release:usp.OperateResp.OperationResult.cmd_failure)
  if (_internal_has_cmd_failure()) {
    clear_has_operation_resp();
      ::usp::OperateResp_OperationResult_CommandFailure* temp = operation_resp_.cmd_failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_resp_.cmd_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::OperateResp_OperationResult_CommandFailure& OperateResp_OperationResult::_internal_cmd_failure() const {
  return _internal_has_cmd_failure()
      ? *operation_resp_.cmd_failure_
      : *reinterpret_cast< ::usp::OperateResp_OperationResult_CommandFailure*>(&::usp::_OperateResp_OperationResult_CommandFailure_default_instance_);
}
inline const ::usp::OperateResp_OperationResult_CommandFailure& OperateResp_OperationResult::cmd_failure() const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.OperationResult.cmd_failure)
  return _internal_cmd_failure();
}
inline ::usp::OperateResp_OperationResult_CommandFailure* OperateResp_OperationResult::unsafe_arena_release_cmd_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.OperateResp.OperationResult.cmd_failure)
  if (_internal_has_cmd_failure()) {
    clear_has_operation_resp();
    ::usp::OperateResp_OperationResult_CommandFailure* temp = operation_resp_.cmd_failure_;
    operation_resp_.cmd_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperateResp_OperationResult::unsafe_arena_set_allocated_cmd_failure(::usp::OperateResp_OperationResult_CommandFailure* cmd_failure) {
  clear_operation_resp();
  if (cmd_failure) {
    set_has_cmd_failure();
    operation_resp_.cmd_failure_ = cmd_failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.OperateResp.OperationResult.cmd_failure)
}
inline ::usp::OperateResp_OperationResult_CommandFailure* OperateResp_OperationResult::_internal_mutable_cmd_failure() {
  if (!_internal_has_cmd_failure()) {
    clear_operation_resp();
    set_has_cmd_failure();
    operation_resp_.cmd_failure_ = CreateMaybeMessage< ::usp::OperateResp_OperationResult_CommandFailure >(GetArena());
  }
  return operation_resp_.cmd_failure_;
}
inline ::usp::OperateResp_OperationResult_CommandFailure* OperateResp_OperationResult::mutable_cmd_failure() {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.OperationResult.cmd_failure)
  return _internal_mutable_cmd_failure();
}

inline bool OperateResp_OperationResult::has_operation_resp() const {
  return operation_resp_case() != OPERATION_RESP_NOT_SET;
}
inline void OperateResp_OperationResult::clear_has_operation_resp() {
  _oneof_case_[0] = OPERATION_RESP_NOT_SET;
}
inline OperateResp_OperationResult::OperationRespCase OperateResp_OperationResult::operation_resp_case() const {
  return OperateResp_OperationResult::OperationRespCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OperateResp

// repeated .usp.OperateResp.OperationResult operation_results = 1;
inline int OperateResp::_internal_operation_results_size() const {
  return operation_results_.size();
}
inline int OperateResp::operation_results_size() const {
  return _internal_operation_results_size();
}
inline void OperateResp::clear_operation_results() {
  operation_results_.Clear();
}
inline ::usp::OperateResp_OperationResult* OperateResp::mutable_operation_results(int index) {
  // @@protoc_insertion_point(field_mutable:usp.OperateResp.operation_results)
  return operation_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::OperateResp_OperationResult >*
OperateResp::mutable_operation_results() {
  // @@protoc_insertion_point(field_mutable_list:usp.OperateResp.operation_results)
  return &operation_results_;
}
inline const ::usp::OperateResp_OperationResult& OperateResp::_internal_operation_results(int index) const {
  return operation_results_.Get(index);
}
inline const ::usp::OperateResp_OperationResult& OperateResp::operation_results(int index) const {
  // @@protoc_insertion_point(field_get:usp.OperateResp.operation_results)
  return _internal_operation_results(index);
}
inline ::usp::OperateResp_OperationResult* OperateResp::_internal_add_operation_results() {
  return operation_results_.Add();
}
inline ::usp::OperateResp_OperationResult* OperateResp::add_operation_results() {
  // @@protoc_insertion_point(field_add:usp.OperateResp.operation_results)
  return _internal_add_operation_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usp::OperateResp_OperationResult >&
OperateResp::operation_results() const {
  // @@protoc_insertion_point(field_list:usp.OperateResp.operation_results)
  return operation_results_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Notify_Event

// string obj_path = 1;
inline void Notify_Event::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_Event::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Notify.Event.obj_path)
  return _internal_obj_path();
}
inline void Notify_Event::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Notify.Event.obj_path)
}
inline std::string* Notify_Event::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.Event.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Notify_Event::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Notify_Event::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_Event::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.Event.obj_path)
}
inline void Notify_Event::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.Event.obj_path)
}
inline void Notify_Event::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.Event.obj_path)
}
inline std::string* Notify_Event::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_Event::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Notify.Event.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_Event::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.Event.obj_path)
}

// string event_name = 2;
inline void Notify_Event::clear_event_name() {
  event_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_Event::event_name() const {
  // @@protoc_insertion_point(field_get:usp.Notify.Event.event_name)
  return _internal_event_name();
}
inline void Notify_Event::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:usp.Notify.Event.event_name)
}
inline std::string* Notify_Event::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.Event.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& Notify_Event::_internal_event_name() const {
  return event_name_.Get();
}
inline void Notify_Event::_internal_set_event_name(const std::string& value) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_Event::set_event_name(std::string&& value) {
  
  event_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.Event.event_name)
}
inline void Notify_Event::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.Event.event_name)
}
inline void Notify_Event::set_event_name(const char* value,
    size_t size) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.Event.event_name)
}
inline std::string* Notify_Event::_internal_mutable_event_name() {
  
  return event_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_Event::release_event_name() {
  // @@protoc_insertion_point(field_release:usp.Notify.Event.event_name)
  return event_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_Event::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.Event.event_name)
}

// map<string, string> params = 3;
inline int Notify_Event::_internal_params_size() const {
  return params_.size();
}
inline int Notify_Event::params_size() const {
  return _internal_params_size();
}
inline void Notify_Event::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_Event::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_Event::params() const {
  // @@protoc_insertion_point(field_map:usp.Notify.Event.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_Event::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_Event::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:usp.Notify.Event.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// Notify_ValueChange

// string param_path = 1;
inline void Notify_ValueChange::clear_param_path() {
  param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_ValueChange::param_path() const {
  // @@protoc_insertion_point(field_get:usp.Notify.ValueChange.param_path)
  return _internal_param_path();
}
inline void Notify_ValueChange::set_param_path(const std::string& value) {
  _internal_set_param_path(value);
  // @@protoc_insertion_point(field_set:usp.Notify.ValueChange.param_path)
}
inline std::string* Notify_ValueChange::mutable_param_path() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.ValueChange.param_path)
  return _internal_mutable_param_path();
}
inline const std::string& Notify_ValueChange::_internal_param_path() const {
  return param_path_.Get();
}
inline void Notify_ValueChange::_internal_set_param_path(const std::string& value) {
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_ValueChange::set_param_path(std::string&& value) {
  
  param_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.ValueChange.param_path)
}
inline void Notify_ValueChange::set_param_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.ValueChange.param_path)
}
inline void Notify_ValueChange::set_param_path(const char* value,
    size_t size) {
  
  param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.ValueChange.param_path)
}
inline std::string* Notify_ValueChange::_internal_mutable_param_path() {
  
  return param_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_ValueChange::release_param_path() {
  // @@protoc_insertion_point(field_release:usp.Notify.ValueChange.param_path)
  return param_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_ValueChange::set_allocated_param_path(std::string* param_path) {
  if (param_path != nullptr) {
    
  } else {
    
  }
  param_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.ValueChange.param_path)
}

// string param_value = 2;
inline void Notify_ValueChange::clear_param_value() {
  param_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_ValueChange::param_value() const {
  // @@protoc_insertion_point(field_get:usp.Notify.ValueChange.param_value)
  return _internal_param_value();
}
inline void Notify_ValueChange::set_param_value(const std::string& value) {
  _internal_set_param_value(value);
  // @@protoc_insertion_point(field_set:usp.Notify.ValueChange.param_value)
}
inline std::string* Notify_ValueChange::mutable_param_value() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.ValueChange.param_value)
  return _internal_mutable_param_value();
}
inline const std::string& Notify_ValueChange::_internal_param_value() const {
  return param_value_.Get();
}
inline void Notify_ValueChange::_internal_set_param_value(const std::string& value) {
  
  param_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_ValueChange::set_param_value(std::string&& value) {
  
  param_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.ValueChange.param_value)
}
inline void Notify_ValueChange::set_param_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.ValueChange.param_value)
}
inline void Notify_ValueChange::set_param_value(const char* value,
    size_t size) {
  
  param_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.ValueChange.param_value)
}
inline std::string* Notify_ValueChange::_internal_mutable_param_value() {
  
  return param_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_ValueChange::release_param_value() {
  // @@protoc_insertion_point(field_release:usp.Notify.ValueChange.param_value)
  return param_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_ValueChange::set_allocated_param_value(std::string* param_value) {
  if (param_value != nullptr) {
    
  } else {
    
  }
  param_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.ValueChange.param_value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Notify_ObjectCreation

// string obj_path = 1;
inline void Notify_ObjectCreation::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_ObjectCreation::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Notify.ObjectCreation.obj_path)
  return _internal_obj_path();
}
inline void Notify_ObjectCreation::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Notify.ObjectCreation.obj_path)
}
inline std::string* Notify_ObjectCreation::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.ObjectCreation.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Notify_ObjectCreation::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Notify_ObjectCreation::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_ObjectCreation::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.ObjectCreation.obj_path)
}
inline void Notify_ObjectCreation::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.ObjectCreation.obj_path)
}
inline void Notify_ObjectCreation::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.ObjectCreation.obj_path)
}
inline std::string* Notify_ObjectCreation::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_ObjectCreation::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Notify.ObjectCreation.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_ObjectCreation::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.ObjectCreation.obj_path)
}

// map<string, string> unique_keys = 2;
inline int Notify_ObjectCreation::_internal_unique_keys_size() const {
  return unique_keys_.size();
}
inline int Notify_ObjectCreation::unique_keys_size() const {
  return _internal_unique_keys_size();
}
inline void Notify_ObjectCreation::clear_unique_keys() {
  unique_keys_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_ObjectCreation::_internal_unique_keys() const {
  return unique_keys_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_ObjectCreation::unique_keys() const {
  // @@protoc_insertion_point(field_map:usp.Notify.ObjectCreation.unique_keys)
  return _internal_unique_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_ObjectCreation::_internal_mutable_unique_keys() {
  return unique_keys_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_ObjectCreation::mutable_unique_keys() {
  // @@protoc_insertion_point(field_mutable_map:usp.Notify.ObjectCreation.unique_keys)
  return _internal_mutable_unique_keys();
}

// -------------------------------------------------------------------

// Notify_ObjectDeletion

// string obj_path = 1;
inline void Notify_ObjectDeletion::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_ObjectDeletion::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Notify.ObjectDeletion.obj_path)
  return _internal_obj_path();
}
inline void Notify_ObjectDeletion::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Notify.ObjectDeletion.obj_path)
}
inline std::string* Notify_ObjectDeletion::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.ObjectDeletion.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Notify_ObjectDeletion::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Notify_ObjectDeletion::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_ObjectDeletion::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.ObjectDeletion.obj_path)
}
inline void Notify_ObjectDeletion::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.ObjectDeletion.obj_path)
}
inline void Notify_ObjectDeletion::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.ObjectDeletion.obj_path)
}
inline std::string* Notify_ObjectDeletion::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_ObjectDeletion::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Notify.ObjectDeletion.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_ObjectDeletion::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.ObjectDeletion.obj_path)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Notify_OperationComplete_OutputArgs

// map<string, string> output_args = 1;
inline int Notify_OperationComplete_OutputArgs::_internal_output_args_size() const {
  return output_args_.size();
}
inline int Notify_OperationComplete_OutputArgs::output_args_size() const {
  return _internal_output_args_size();
}
inline void Notify_OperationComplete_OutputArgs::clear_output_args() {
  output_args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_OperationComplete_OutputArgs::_internal_output_args() const {
  return output_args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Notify_OperationComplete_OutputArgs::output_args() const {
  // @@protoc_insertion_point(field_map:usp.Notify.OperationComplete.OutputArgs.output_args)
  return _internal_output_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_OperationComplete_OutputArgs::_internal_mutable_output_args() {
  return output_args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Notify_OperationComplete_OutputArgs::mutable_output_args() {
  // @@protoc_insertion_point(field_mutable_map:usp.Notify.OperationComplete.OutputArgs.output_args)
  return _internal_mutable_output_args();
}

// -------------------------------------------------------------------

// Notify_OperationComplete_CommandFailure

// fixed32 err_code = 1;
inline void Notify_OperationComplete_CommandFailure::clear_err_code() {
  err_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Notify_OperationComplete_CommandFailure::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Notify_OperationComplete_CommandFailure::err_code() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.CommandFailure.err_code)
  return _internal_err_code();
}
inline void Notify_OperationComplete_CommandFailure::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_code_ = value;
}
inline void Notify_OperationComplete_CommandFailure::set_err_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OperationComplete.CommandFailure.err_code)
}

// string err_msg = 2;
inline void Notify_OperationComplete_CommandFailure::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OperationComplete_CommandFailure::err_msg() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.CommandFailure.err_msg)
  return _internal_err_msg();
}
inline void Notify_OperationComplete_CommandFailure::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OperationComplete.CommandFailure.err_msg)
}
inline std::string* Notify_OperationComplete_CommandFailure::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.CommandFailure.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& Notify_OperationComplete_CommandFailure::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void Notify_OperationComplete_CommandFailure::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OperationComplete_CommandFailure::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OperationComplete.CommandFailure.err_msg)
}
inline void Notify_OperationComplete_CommandFailure::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OperationComplete.CommandFailure.err_msg)
}
inline void Notify_OperationComplete_CommandFailure::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OperationComplete.CommandFailure.err_msg)
}
inline std::string* Notify_OperationComplete_CommandFailure::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OperationComplete_CommandFailure::release_err_msg() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.CommandFailure.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OperationComplete_CommandFailure::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OperationComplete.CommandFailure.err_msg)
}

// -------------------------------------------------------------------

// Notify_OperationComplete

// string obj_path = 1;
inline void Notify_OperationComplete::clear_obj_path() {
  obj_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OperationComplete::obj_path() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.obj_path)
  return _internal_obj_path();
}
inline void Notify_OperationComplete::set_obj_path(const std::string& value) {
  _internal_set_obj_path(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OperationComplete.obj_path)
}
inline std::string* Notify_OperationComplete::mutable_obj_path() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.obj_path)
  return _internal_mutable_obj_path();
}
inline const std::string& Notify_OperationComplete::_internal_obj_path() const {
  return obj_path_.Get();
}
inline void Notify_OperationComplete::_internal_set_obj_path(const std::string& value) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OperationComplete::set_obj_path(std::string&& value) {
  
  obj_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OperationComplete.obj_path)
}
inline void Notify_OperationComplete::set_obj_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OperationComplete.obj_path)
}
inline void Notify_OperationComplete::set_obj_path(const char* value,
    size_t size) {
  
  obj_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OperationComplete.obj_path)
}
inline std::string* Notify_OperationComplete::_internal_mutable_obj_path() {
  
  return obj_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OperationComplete::release_obj_path() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.obj_path)
  return obj_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OperationComplete::set_allocated_obj_path(std::string* obj_path) {
  if (obj_path != nullptr) {
    
  } else {
    
  }
  obj_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OperationComplete.obj_path)
}

// string command_name = 2;
inline void Notify_OperationComplete::clear_command_name() {
  command_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OperationComplete::command_name() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.command_name)
  return _internal_command_name();
}
inline void Notify_OperationComplete::set_command_name(const std::string& value) {
  _internal_set_command_name(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OperationComplete.command_name)
}
inline std::string* Notify_OperationComplete::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.command_name)
  return _internal_mutable_command_name();
}
inline const std::string& Notify_OperationComplete::_internal_command_name() const {
  return command_name_.Get();
}
inline void Notify_OperationComplete::_internal_set_command_name(const std::string& value) {
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OperationComplete::set_command_name(std::string&& value) {
  
  command_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OperationComplete.command_name)
}
inline void Notify_OperationComplete::set_command_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OperationComplete.command_name)
}
inline void Notify_OperationComplete::set_command_name(const char* value,
    size_t size) {
  
  command_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OperationComplete.command_name)
}
inline std::string* Notify_OperationComplete::_internal_mutable_command_name() {
  
  return command_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OperationComplete::release_command_name() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.command_name)
  return command_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OperationComplete::set_allocated_command_name(std::string* command_name) {
  if (command_name != nullptr) {
    
  } else {
    
  }
  command_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OperationComplete.command_name)
}

// string command_key = 3;
inline void Notify_OperationComplete::clear_command_key() {
  command_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OperationComplete::command_key() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.command_key)
  return _internal_command_key();
}
inline void Notify_OperationComplete::set_command_key(const std::string& value) {
  _internal_set_command_key(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OperationComplete.command_key)
}
inline std::string* Notify_OperationComplete::mutable_command_key() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.command_key)
  return _internal_mutable_command_key();
}
inline const std::string& Notify_OperationComplete::_internal_command_key() const {
  return command_key_.Get();
}
inline void Notify_OperationComplete::_internal_set_command_key(const std::string& value) {
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OperationComplete::set_command_key(std::string&& value) {
  
  command_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OperationComplete.command_key)
}
inline void Notify_OperationComplete::set_command_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OperationComplete.command_key)
}
inline void Notify_OperationComplete::set_command_key(const char* value,
    size_t size) {
  
  command_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OperationComplete.command_key)
}
inline std::string* Notify_OperationComplete::_internal_mutable_command_key() {
  
  return command_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OperationComplete::release_command_key() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.command_key)
  return command_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OperationComplete::set_allocated_command_key(std::string* command_key) {
  if (command_key != nullptr) {
    
  } else {
    
  }
  command_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OperationComplete.command_key)
}

// .usp.Notify.OperationComplete.OutputArgs req_output_args = 4;
inline bool Notify_OperationComplete::_internal_has_req_output_args() const {
  return operation_resp_case() == kReqOutputArgs;
}
inline bool Notify_OperationComplete::has_req_output_args() const {
  return _internal_has_req_output_args();
}
inline void Notify_OperationComplete::set_has_req_output_args() {
  _oneof_case_[0] = kReqOutputArgs;
}
inline void Notify_OperationComplete::clear_req_output_args() {
  if (_internal_has_req_output_args()) {
    if (GetArena() == nullptr) {
      delete operation_resp_.req_output_args_;
    }
    clear_has_operation_resp();
  }
}
inline ::usp::Notify_OperationComplete_OutputArgs* Notify_OperationComplete::release_req_output_args() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.req_output_args)
  if (_internal_has_req_output_args()) {
    clear_has_operation_resp();
      ::usp::Notify_OperationComplete_OutputArgs* temp = operation_resp_.req_output_args_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_resp_.req_output_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_OperationComplete_OutputArgs& Notify_OperationComplete::_internal_req_output_args() const {
  return _internal_has_req_output_args()
      ? *operation_resp_.req_output_args_
      : *reinterpret_cast< ::usp::Notify_OperationComplete_OutputArgs*>(&::usp::_Notify_OperationComplete_OutputArgs_default_instance_);
}
inline const ::usp::Notify_OperationComplete_OutputArgs& Notify_OperationComplete::req_output_args() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.req_output_args)
  return _internal_req_output_args();
}
inline ::usp::Notify_OperationComplete_OutputArgs* Notify_OperationComplete::unsafe_arena_release_req_output_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.OperationComplete.req_output_args)
  if (_internal_has_req_output_args()) {
    clear_has_operation_resp();
    ::usp::Notify_OperationComplete_OutputArgs* temp = operation_resp_.req_output_args_;
    operation_resp_.req_output_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify_OperationComplete::unsafe_arena_set_allocated_req_output_args(::usp::Notify_OperationComplete_OutputArgs* req_output_args) {
  clear_operation_resp();
  if (req_output_args) {
    set_has_req_output_args();
    operation_resp_.req_output_args_ = req_output_args;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.OperationComplete.req_output_args)
}
inline ::usp::Notify_OperationComplete_OutputArgs* Notify_OperationComplete::_internal_mutable_req_output_args() {
  if (!_internal_has_req_output_args()) {
    clear_operation_resp();
    set_has_req_output_args();
    operation_resp_.req_output_args_ = CreateMaybeMessage< ::usp::Notify_OperationComplete_OutputArgs >(GetArena());
  }
  return operation_resp_.req_output_args_;
}
inline ::usp::Notify_OperationComplete_OutputArgs* Notify_OperationComplete::mutable_req_output_args() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.req_output_args)
  return _internal_mutable_req_output_args();
}

// .usp.Notify.OperationComplete.CommandFailure cmd_failure = 5;
inline bool Notify_OperationComplete::_internal_has_cmd_failure() const {
  return operation_resp_case() == kCmdFailure;
}
inline bool Notify_OperationComplete::has_cmd_failure() const {
  return _internal_has_cmd_failure();
}
inline void Notify_OperationComplete::set_has_cmd_failure() {
  _oneof_case_[0] = kCmdFailure;
}
inline void Notify_OperationComplete::clear_cmd_failure() {
  if (_internal_has_cmd_failure()) {
    if (GetArena() == nullptr) {
      delete operation_resp_.cmd_failure_;
    }
    clear_has_operation_resp();
  }
}
inline ::usp::Notify_OperationComplete_CommandFailure* Notify_OperationComplete::release_cmd_failure() {
  // @@protoc_insertion_point(field_release:usp.Notify.OperationComplete.cmd_failure)
  if (_internal_has_cmd_failure()) {
    clear_has_operation_resp();
      ::usp::Notify_OperationComplete_CommandFailure* temp = operation_resp_.cmd_failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_resp_.cmd_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_OperationComplete_CommandFailure& Notify_OperationComplete::_internal_cmd_failure() const {
  return _internal_has_cmd_failure()
      ? *operation_resp_.cmd_failure_
      : *reinterpret_cast< ::usp::Notify_OperationComplete_CommandFailure*>(&::usp::_Notify_OperationComplete_CommandFailure_default_instance_);
}
inline const ::usp::Notify_OperationComplete_CommandFailure& Notify_OperationComplete::cmd_failure() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OperationComplete.cmd_failure)
  return _internal_cmd_failure();
}
inline ::usp::Notify_OperationComplete_CommandFailure* Notify_OperationComplete::unsafe_arena_release_cmd_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.OperationComplete.cmd_failure)
  if (_internal_has_cmd_failure()) {
    clear_has_operation_resp();
    ::usp::Notify_OperationComplete_CommandFailure* temp = operation_resp_.cmd_failure_;
    operation_resp_.cmd_failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify_OperationComplete::unsafe_arena_set_allocated_cmd_failure(::usp::Notify_OperationComplete_CommandFailure* cmd_failure) {
  clear_operation_resp();
  if (cmd_failure) {
    set_has_cmd_failure();
    operation_resp_.cmd_failure_ = cmd_failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.OperationComplete.cmd_failure)
}
inline ::usp::Notify_OperationComplete_CommandFailure* Notify_OperationComplete::_internal_mutable_cmd_failure() {
  if (!_internal_has_cmd_failure()) {
    clear_operation_resp();
    set_has_cmd_failure();
    operation_resp_.cmd_failure_ = CreateMaybeMessage< ::usp::Notify_OperationComplete_CommandFailure >(GetArena());
  }
  return operation_resp_.cmd_failure_;
}
inline ::usp::Notify_OperationComplete_CommandFailure* Notify_OperationComplete::mutable_cmd_failure() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OperationComplete.cmd_failure)
  return _internal_mutable_cmd_failure();
}

inline bool Notify_OperationComplete::has_operation_resp() const {
  return operation_resp_case() != OPERATION_RESP_NOT_SET;
}
inline void Notify_OperationComplete::clear_has_operation_resp() {
  _oneof_case_[0] = OPERATION_RESP_NOT_SET;
}
inline Notify_OperationComplete::OperationRespCase Notify_OperationComplete::operation_resp_case() const {
  return Notify_OperationComplete::OperationRespCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Notify_OnBoardRequest

// string oui = 1;
inline void Notify_OnBoardRequest::clear_oui() {
  oui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OnBoardRequest::oui() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OnBoardRequest.oui)
  return _internal_oui();
}
inline void Notify_OnBoardRequest::set_oui(const std::string& value) {
  _internal_set_oui(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OnBoardRequest.oui)
}
inline std::string* Notify_OnBoardRequest::mutable_oui() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OnBoardRequest.oui)
  return _internal_mutable_oui();
}
inline const std::string& Notify_OnBoardRequest::_internal_oui() const {
  return oui_.Get();
}
inline void Notify_OnBoardRequest::_internal_set_oui(const std::string& value) {
  
  oui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OnBoardRequest::set_oui(std::string&& value) {
  
  oui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OnBoardRequest.oui)
}
inline void Notify_OnBoardRequest::set_oui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OnBoardRequest.oui)
}
inline void Notify_OnBoardRequest::set_oui(const char* value,
    size_t size) {
  
  oui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OnBoardRequest.oui)
}
inline std::string* Notify_OnBoardRequest::_internal_mutable_oui() {
  
  return oui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OnBoardRequest::release_oui() {
  // @@protoc_insertion_point(field_release:usp.Notify.OnBoardRequest.oui)
  return oui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OnBoardRequest::set_allocated_oui(std::string* oui) {
  if (oui != nullptr) {
    
  } else {
    
  }
  oui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OnBoardRequest.oui)
}

// string product_class = 2;
inline void Notify_OnBoardRequest::clear_product_class() {
  product_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OnBoardRequest::product_class() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OnBoardRequest.product_class)
  return _internal_product_class();
}
inline void Notify_OnBoardRequest::set_product_class(const std::string& value) {
  _internal_set_product_class(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OnBoardRequest.product_class)
}
inline std::string* Notify_OnBoardRequest::mutable_product_class() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OnBoardRequest.product_class)
  return _internal_mutable_product_class();
}
inline const std::string& Notify_OnBoardRequest::_internal_product_class() const {
  return product_class_.Get();
}
inline void Notify_OnBoardRequest::_internal_set_product_class(const std::string& value) {
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OnBoardRequest::set_product_class(std::string&& value) {
  
  product_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OnBoardRequest.product_class)
}
inline void Notify_OnBoardRequest::set_product_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OnBoardRequest.product_class)
}
inline void Notify_OnBoardRequest::set_product_class(const char* value,
    size_t size) {
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OnBoardRequest.product_class)
}
inline std::string* Notify_OnBoardRequest::_internal_mutable_product_class() {
  
  return product_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OnBoardRequest::release_product_class() {
  // @@protoc_insertion_point(field_release:usp.Notify.OnBoardRequest.product_class)
  return product_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OnBoardRequest::set_allocated_product_class(std::string* product_class) {
  if (product_class != nullptr) {
    
  } else {
    
  }
  product_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OnBoardRequest.product_class)
}

// string serial_number = 3;
inline void Notify_OnBoardRequest::clear_serial_number() {
  serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OnBoardRequest::serial_number() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OnBoardRequest.serial_number)
  return _internal_serial_number();
}
inline void Notify_OnBoardRequest::set_serial_number(const std::string& value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OnBoardRequest.serial_number)
}
inline std::string* Notify_OnBoardRequest::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OnBoardRequest.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& Notify_OnBoardRequest::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void Notify_OnBoardRequest::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OnBoardRequest::set_serial_number(std::string&& value) {
  
  serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OnBoardRequest.serial_number)
}
inline void Notify_OnBoardRequest::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OnBoardRequest.serial_number)
}
inline void Notify_OnBoardRequest::set_serial_number(const char* value,
    size_t size) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OnBoardRequest.serial_number)
}
inline std::string* Notify_OnBoardRequest::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OnBoardRequest::release_serial_number() {
  // @@protoc_insertion_point(field_release:usp.Notify.OnBoardRequest.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OnBoardRequest::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OnBoardRequest.serial_number)
}

// string agent_supported_protocol_versions = 4;
inline void Notify_OnBoardRequest::clear_agent_supported_protocol_versions() {
  agent_supported_protocol_versions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify_OnBoardRequest::agent_supported_protocol_versions() const {
  // @@protoc_insertion_point(field_get:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
  return _internal_agent_supported_protocol_versions();
}
inline void Notify_OnBoardRequest::set_agent_supported_protocol_versions(const std::string& value) {
  _internal_set_agent_supported_protocol_versions(value);
  // @@protoc_insertion_point(field_set:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
}
inline std::string* Notify_OnBoardRequest::mutable_agent_supported_protocol_versions() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
  return _internal_mutable_agent_supported_protocol_versions();
}
inline const std::string& Notify_OnBoardRequest::_internal_agent_supported_protocol_versions() const {
  return agent_supported_protocol_versions_.Get();
}
inline void Notify_OnBoardRequest::_internal_set_agent_supported_protocol_versions(const std::string& value) {
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify_OnBoardRequest::set_agent_supported_protocol_versions(std::string&& value) {
  
  agent_supported_protocol_versions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
}
inline void Notify_OnBoardRequest::set_agent_supported_protocol_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
}
inline void Notify_OnBoardRequest::set_agent_supported_protocol_versions(const char* value,
    size_t size) {
  
  agent_supported_protocol_versions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
}
inline std::string* Notify_OnBoardRequest::_internal_mutable_agent_supported_protocol_versions() {
  
  return agent_supported_protocol_versions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify_OnBoardRequest::release_agent_supported_protocol_versions() {
  // @@protoc_insertion_point(field_release:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
  return agent_supported_protocol_versions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify_OnBoardRequest::set_allocated_agent_supported_protocol_versions(std::string* agent_supported_protocol_versions) {
  if (agent_supported_protocol_versions != nullptr) {
    
  } else {
    
  }
  agent_supported_protocol_versions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_supported_protocol_versions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.OnBoardRequest.agent_supported_protocol_versions)
}

// -------------------------------------------------------------------

// Notify

// string subscription_id = 1;
inline void Notify::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notify::subscription_id() const {
  // @@protoc_insertion_point(field_get:usp.Notify.subscription_id)
  return _internal_subscription_id();
}
inline void Notify::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:usp.Notify.subscription_id)
}
inline std::string* Notify::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& Notify::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void Notify::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notify::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.Notify.subscription_id)
}
inline void Notify::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.Notify.subscription_id)
}
inline void Notify::set_subscription_id(const char* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.Notify.subscription_id)
}
inline std::string* Notify::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notify::release_subscription_id() {
  // @@protoc_insertion_point(field_release:usp.Notify.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notify::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.Notify.subscription_id)
}

// bool send_resp = 2;
inline void Notify::clear_send_resp() {
  send_resp_ = false;
}
inline bool Notify::_internal_send_resp() const {
  return send_resp_;
}
inline bool Notify::send_resp() const {
  // @@protoc_insertion_point(field_get:usp.Notify.send_resp)
  return _internal_send_resp();
}
inline void Notify::_internal_set_send_resp(bool value) {
  
  send_resp_ = value;
}
inline void Notify::set_send_resp(bool value) {
  _internal_set_send_resp(value);
  // @@protoc_insertion_point(field_set:usp.Notify.send_resp)
}

// .usp.Notify.Event event = 3;
inline bool Notify::_internal_has_event() const {
  return notification_case() == kEvent;
}
inline bool Notify::has_event() const {
  return _internal_has_event();
}
inline void Notify::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void Notify::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete notification_.event_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_Event* Notify::release_event() {
  // @@protoc_insertion_point(field_release:usp.Notify.event)
  if (_internal_has_event()) {
    clear_has_notification();
      ::usp::Notify_Event* temp = notification_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_Event& Notify::_internal_event() const {
  return _internal_has_event()
      ? *notification_.event_
      : *reinterpret_cast< ::usp::Notify_Event*>(&::usp::_Notify_Event_default_instance_);
}
inline const ::usp::Notify_Event& Notify::event() const {
  // @@protoc_insertion_point(field_get:usp.Notify.event)
  return _internal_event();
}
inline ::usp::Notify_Event* Notify::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.event)
  if (_internal_has_event()) {
    clear_has_notification();
    ::usp::Notify_Event* temp = notification_.event_;
    notification_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_event(::usp::Notify_Event* event) {
  clear_notification();
  if (event) {
    set_has_event();
    notification_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.event)
}
inline ::usp::Notify_Event* Notify::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_notification();
    set_has_event();
    notification_.event_ = CreateMaybeMessage< ::usp::Notify_Event >(GetArena());
  }
  return notification_.event_;
}
inline ::usp::Notify_Event* Notify::mutable_event() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.event)
  return _internal_mutable_event();
}

// .usp.Notify.ValueChange value_change = 4;
inline bool Notify::_internal_has_value_change() const {
  return notification_case() == kValueChange;
}
inline bool Notify::has_value_change() const {
  return _internal_has_value_change();
}
inline void Notify::set_has_value_change() {
  _oneof_case_[0] = kValueChange;
}
inline void Notify::clear_value_change() {
  if (_internal_has_value_change()) {
    if (GetArena() == nullptr) {
      delete notification_.value_change_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_ValueChange* Notify::release_value_change() {
  // @@protoc_insertion_point(field_release:usp.Notify.value_change)
  if (_internal_has_value_change()) {
    clear_has_notification();
      ::usp::Notify_ValueChange* temp = notification_.value_change_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.value_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_ValueChange& Notify::_internal_value_change() const {
  return _internal_has_value_change()
      ? *notification_.value_change_
      : *reinterpret_cast< ::usp::Notify_ValueChange*>(&::usp::_Notify_ValueChange_default_instance_);
}
inline const ::usp::Notify_ValueChange& Notify::value_change() const {
  // @@protoc_insertion_point(field_get:usp.Notify.value_change)
  return _internal_value_change();
}
inline ::usp::Notify_ValueChange* Notify::unsafe_arena_release_value_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.value_change)
  if (_internal_has_value_change()) {
    clear_has_notification();
    ::usp::Notify_ValueChange* temp = notification_.value_change_;
    notification_.value_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_value_change(::usp::Notify_ValueChange* value_change) {
  clear_notification();
  if (value_change) {
    set_has_value_change();
    notification_.value_change_ = value_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.value_change)
}
inline ::usp::Notify_ValueChange* Notify::_internal_mutable_value_change() {
  if (!_internal_has_value_change()) {
    clear_notification();
    set_has_value_change();
    notification_.value_change_ = CreateMaybeMessage< ::usp::Notify_ValueChange >(GetArena());
  }
  return notification_.value_change_;
}
inline ::usp::Notify_ValueChange* Notify::mutable_value_change() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.value_change)
  return _internal_mutable_value_change();
}

// .usp.Notify.ObjectCreation obj_creation = 5;
inline bool Notify::_internal_has_obj_creation() const {
  return notification_case() == kObjCreation;
}
inline bool Notify::has_obj_creation() const {
  return _internal_has_obj_creation();
}
inline void Notify::set_has_obj_creation() {
  _oneof_case_[0] = kObjCreation;
}
inline void Notify::clear_obj_creation() {
  if (_internal_has_obj_creation()) {
    if (GetArena() == nullptr) {
      delete notification_.obj_creation_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_ObjectCreation* Notify::release_obj_creation() {
  // @@protoc_insertion_point(field_release:usp.Notify.obj_creation)
  if (_internal_has_obj_creation()) {
    clear_has_notification();
      ::usp::Notify_ObjectCreation* temp = notification_.obj_creation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.obj_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_ObjectCreation& Notify::_internal_obj_creation() const {
  return _internal_has_obj_creation()
      ? *notification_.obj_creation_
      : *reinterpret_cast< ::usp::Notify_ObjectCreation*>(&::usp::_Notify_ObjectCreation_default_instance_);
}
inline const ::usp::Notify_ObjectCreation& Notify::obj_creation() const {
  // @@protoc_insertion_point(field_get:usp.Notify.obj_creation)
  return _internal_obj_creation();
}
inline ::usp::Notify_ObjectCreation* Notify::unsafe_arena_release_obj_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.obj_creation)
  if (_internal_has_obj_creation()) {
    clear_has_notification();
    ::usp::Notify_ObjectCreation* temp = notification_.obj_creation_;
    notification_.obj_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_obj_creation(::usp::Notify_ObjectCreation* obj_creation) {
  clear_notification();
  if (obj_creation) {
    set_has_obj_creation();
    notification_.obj_creation_ = obj_creation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.obj_creation)
}
inline ::usp::Notify_ObjectCreation* Notify::_internal_mutable_obj_creation() {
  if (!_internal_has_obj_creation()) {
    clear_notification();
    set_has_obj_creation();
    notification_.obj_creation_ = CreateMaybeMessage< ::usp::Notify_ObjectCreation >(GetArena());
  }
  return notification_.obj_creation_;
}
inline ::usp::Notify_ObjectCreation* Notify::mutable_obj_creation() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.obj_creation)
  return _internal_mutable_obj_creation();
}

// .usp.Notify.ObjectDeletion obj_deletion = 6;
inline bool Notify::_internal_has_obj_deletion() const {
  return notification_case() == kObjDeletion;
}
inline bool Notify::has_obj_deletion() const {
  return _internal_has_obj_deletion();
}
inline void Notify::set_has_obj_deletion() {
  _oneof_case_[0] = kObjDeletion;
}
inline void Notify::clear_obj_deletion() {
  if (_internal_has_obj_deletion()) {
    if (GetArena() == nullptr) {
      delete notification_.obj_deletion_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_ObjectDeletion* Notify::release_obj_deletion() {
  // @@protoc_insertion_point(field_release:usp.Notify.obj_deletion)
  if (_internal_has_obj_deletion()) {
    clear_has_notification();
      ::usp::Notify_ObjectDeletion* temp = notification_.obj_deletion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.obj_deletion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_ObjectDeletion& Notify::_internal_obj_deletion() const {
  return _internal_has_obj_deletion()
      ? *notification_.obj_deletion_
      : *reinterpret_cast< ::usp::Notify_ObjectDeletion*>(&::usp::_Notify_ObjectDeletion_default_instance_);
}
inline const ::usp::Notify_ObjectDeletion& Notify::obj_deletion() const {
  // @@protoc_insertion_point(field_get:usp.Notify.obj_deletion)
  return _internal_obj_deletion();
}
inline ::usp::Notify_ObjectDeletion* Notify::unsafe_arena_release_obj_deletion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.obj_deletion)
  if (_internal_has_obj_deletion()) {
    clear_has_notification();
    ::usp::Notify_ObjectDeletion* temp = notification_.obj_deletion_;
    notification_.obj_deletion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_obj_deletion(::usp::Notify_ObjectDeletion* obj_deletion) {
  clear_notification();
  if (obj_deletion) {
    set_has_obj_deletion();
    notification_.obj_deletion_ = obj_deletion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.obj_deletion)
}
inline ::usp::Notify_ObjectDeletion* Notify::_internal_mutable_obj_deletion() {
  if (!_internal_has_obj_deletion()) {
    clear_notification();
    set_has_obj_deletion();
    notification_.obj_deletion_ = CreateMaybeMessage< ::usp::Notify_ObjectDeletion >(GetArena());
  }
  return notification_.obj_deletion_;
}
inline ::usp::Notify_ObjectDeletion* Notify::mutable_obj_deletion() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.obj_deletion)
  return _internal_mutable_obj_deletion();
}

// .usp.Notify.OperationComplete oper_complete = 7;
inline bool Notify::_internal_has_oper_complete() const {
  return notification_case() == kOperComplete;
}
inline bool Notify::has_oper_complete() const {
  return _internal_has_oper_complete();
}
inline void Notify::set_has_oper_complete() {
  _oneof_case_[0] = kOperComplete;
}
inline void Notify::clear_oper_complete() {
  if (_internal_has_oper_complete()) {
    if (GetArena() == nullptr) {
      delete notification_.oper_complete_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_OperationComplete* Notify::release_oper_complete() {
  // @@protoc_insertion_point(field_release:usp.Notify.oper_complete)
  if (_internal_has_oper_complete()) {
    clear_has_notification();
      ::usp::Notify_OperationComplete* temp = notification_.oper_complete_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.oper_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_OperationComplete& Notify::_internal_oper_complete() const {
  return _internal_has_oper_complete()
      ? *notification_.oper_complete_
      : *reinterpret_cast< ::usp::Notify_OperationComplete*>(&::usp::_Notify_OperationComplete_default_instance_);
}
inline const ::usp::Notify_OperationComplete& Notify::oper_complete() const {
  // @@protoc_insertion_point(field_get:usp.Notify.oper_complete)
  return _internal_oper_complete();
}
inline ::usp::Notify_OperationComplete* Notify::unsafe_arena_release_oper_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.oper_complete)
  if (_internal_has_oper_complete()) {
    clear_has_notification();
    ::usp::Notify_OperationComplete* temp = notification_.oper_complete_;
    notification_.oper_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_oper_complete(::usp::Notify_OperationComplete* oper_complete) {
  clear_notification();
  if (oper_complete) {
    set_has_oper_complete();
    notification_.oper_complete_ = oper_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.oper_complete)
}
inline ::usp::Notify_OperationComplete* Notify::_internal_mutable_oper_complete() {
  if (!_internal_has_oper_complete()) {
    clear_notification();
    set_has_oper_complete();
    notification_.oper_complete_ = CreateMaybeMessage< ::usp::Notify_OperationComplete >(GetArena());
  }
  return notification_.oper_complete_;
}
inline ::usp::Notify_OperationComplete* Notify::mutable_oper_complete() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.oper_complete)
  return _internal_mutable_oper_complete();
}

// .usp.Notify.OnBoardRequest on_board_req = 8;
inline bool Notify::_internal_has_on_board_req() const {
  return notification_case() == kOnBoardReq;
}
inline bool Notify::has_on_board_req() const {
  return _internal_has_on_board_req();
}
inline void Notify::set_has_on_board_req() {
  _oneof_case_[0] = kOnBoardReq;
}
inline void Notify::clear_on_board_req() {
  if (_internal_has_on_board_req()) {
    if (GetArena() == nullptr) {
      delete notification_.on_board_req_;
    }
    clear_has_notification();
  }
}
inline ::usp::Notify_OnBoardRequest* Notify::release_on_board_req() {
  // @@protoc_insertion_point(field_release:usp.Notify.on_board_req)
  if (_internal_has_on_board_req()) {
    clear_has_notification();
      ::usp::Notify_OnBoardRequest* temp = notification_.on_board_req_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    notification_.on_board_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp::Notify_OnBoardRequest& Notify::_internal_on_board_req() const {
  return _internal_has_on_board_req()
      ? *notification_.on_board_req_
      : *reinterpret_cast< ::usp::Notify_OnBoardRequest*>(&::usp::_Notify_OnBoardRequest_default_instance_);
}
inline const ::usp::Notify_OnBoardRequest& Notify::on_board_req() const {
  // @@protoc_insertion_point(field_get:usp.Notify.on_board_req)
  return _internal_on_board_req();
}
inline ::usp::Notify_OnBoardRequest* Notify::unsafe_arena_release_on_board_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp.Notify.on_board_req)
  if (_internal_has_on_board_req()) {
    clear_has_notification();
    ::usp::Notify_OnBoardRequest* temp = notification_.on_board_req_;
    notification_.on_board_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Notify::unsafe_arena_set_allocated_on_board_req(::usp::Notify_OnBoardRequest* on_board_req) {
  clear_notification();
  if (on_board_req) {
    set_has_on_board_req();
    notification_.on_board_req_ = on_board_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp.Notify.on_board_req)
}
inline ::usp::Notify_OnBoardRequest* Notify::_internal_mutable_on_board_req() {
  if (!_internal_has_on_board_req()) {
    clear_notification();
    set_has_on_board_req();
    notification_.on_board_req_ = CreateMaybeMessage< ::usp::Notify_OnBoardRequest >(GetArena());
  }
  return notification_.on_board_req_;
}
inline ::usp::Notify_OnBoardRequest* Notify::mutable_on_board_req() {
  // @@protoc_insertion_point(field_mutable:usp.Notify.on_board_req)
  return _internal_mutable_on_board_req();
}

inline bool Notify::has_notification() const {
  return notification_case() != NOTIFICATION_NOT_SET;
}
inline void Notify::clear_has_notification() {
  _oneof_case_[0] = NOTIFICATION_NOT_SET;
}
inline Notify::NotificationCase Notify::notification_case() const {
  return Notify::NotificationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NotifyResp

// string subscription_id = 1;
inline void NotifyResp::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NotifyResp::subscription_id() const {
  // @@protoc_insertion_point(field_get:usp.NotifyResp.subscription_id)
  return _internal_subscription_id();
}
inline void NotifyResp::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:usp.NotifyResp.subscription_id)
}
inline std::string* NotifyResp::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:usp.NotifyResp.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& NotifyResp::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void NotifyResp::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NotifyResp::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp.NotifyResp.subscription_id)
}
inline void NotifyResp::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp.NotifyResp.subscription_id)
}
inline void NotifyResp::set_subscription_id(const char* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp.NotifyResp.subscription_id)
}
inline std::string* NotifyResp::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NotifyResp::release_subscription_id() {
  // @@protoc_insertion_point(field_release:usp.NotifyResp.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotifyResp::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp.NotifyResp.subscription_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::usp::Header_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usp::Header_MsgType>() {
  return ::usp::Header_MsgType_descriptor();
}
template <> struct is_proto_enum< ::usp::GetSupportedDMResp_ParamAccessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usp::GetSupportedDMResp_ParamAccessType>() {
  return ::usp::GetSupportedDMResp_ParamAccessType_descriptor();
}
template <> struct is_proto_enum< ::usp::GetSupportedDMResp_ObjAccessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usp::GetSupportedDMResp_ObjAccessType>() {
  return ::usp::GetSupportedDMResp_ObjAccessType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_usp_2dmsg_2d1_2d1_2eproto
