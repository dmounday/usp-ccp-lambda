// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usp-record-1-1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_usp_2drecord_2d1_2d1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_usp_2drecord_2d1_2d1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_usp_2drecord_2d1_2d1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_usp_2drecord_2d1_2d1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usp_2drecord_2d1_2d1_2eproto;
namespace usp_record {
class NoSessionContextRecord;
class NoSessionContextRecordDefaultTypeInternal;
extern NoSessionContextRecordDefaultTypeInternal _NoSessionContextRecord_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class SessionContextRecord;
class SessionContextRecordDefaultTypeInternal;
extern SessionContextRecordDefaultTypeInternal _SessionContextRecord_default_instance_;
}  // namespace usp_record
PROTOBUF_NAMESPACE_OPEN
template<> ::usp_record::NoSessionContextRecord* Arena::CreateMaybeMessage<::usp_record::NoSessionContextRecord>(Arena*);
template<> ::usp_record::Record* Arena::CreateMaybeMessage<::usp_record::Record>(Arena*);
template<> ::usp_record::SessionContextRecord* Arena::CreateMaybeMessage<::usp_record::SessionContextRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace usp_record {

enum Record_PayloadSecurity : int {
  Record_PayloadSecurity_PLAINTEXT = 0,
  Record_PayloadSecurity_TLS12 = 1,
  Record_PayloadSecurity_Record_PayloadSecurity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Record_PayloadSecurity_Record_PayloadSecurity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Record_PayloadSecurity_IsValid(int value);
constexpr Record_PayloadSecurity Record_PayloadSecurity_PayloadSecurity_MIN = Record_PayloadSecurity_PLAINTEXT;
constexpr Record_PayloadSecurity Record_PayloadSecurity_PayloadSecurity_MAX = Record_PayloadSecurity_TLS12;
constexpr int Record_PayloadSecurity_PayloadSecurity_ARRAYSIZE = Record_PayloadSecurity_PayloadSecurity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Record_PayloadSecurity_descriptor();
template<typename T>
inline const std::string& Record_PayloadSecurity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Record_PayloadSecurity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Record_PayloadSecurity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Record_PayloadSecurity_descriptor(), enum_t_value);
}
inline bool Record_PayloadSecurity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Record_PayloadSecurity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Record_PayloadSecurity>(
    Record_PayloadSecurity_descriptor(), name, value);
}
enum SessionContextRecord_PayloadSARState : int {
  SessionContextRecord_PayloadSARState_NONE = 0,
  SessionContextRecord_PayloadSARState_BEGIN = 1,
  SessionContextRecord_PayloadSARState_INPROCESS = 2,
  SessionContextRecord_PayloadSARState_COMPLETE = 3,
  SessionContextRecord_PayloadSARState_SessionContextRecord_PayloadSARState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionContextRecord_PayloadSARState_SessionContextRecord_PayloadSARState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionContextRecord_PayloadSARState_IsValid(int value);
constexpr SessionContextRecord_PayloadSARState SessionContextRecord_PayloadSARState_PayloadSARState_MIN = SessionContextRecord_PayloadSARState_NONE;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord_PayloadSARState_PayloadSARState_MAX = SessionContextRecord_PayloadSARState_COMPLETE;
constexpr int SessionContextRecord_PayloadSARState_PayloadSARState_ARRAYSIZE = SessionContextRecord_PayloadSARState_PayloadSARState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionContextRecord_PayloadSARState_descriptor();
template<typename T>
inline const std::string& SessionContextRecord_PayloadSARState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionContextRecord_PayloadSARState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionContextRecord_PayloadSARState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionContextRecord_PayloadSARState_descriptor(), enum_t_value);
}
inline bool SessionContextRecord_PayloadSARState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionContextRecord_PayloadSARState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionContextRecord_PayloadSARState>(
    SessionContextRecord_PayloadSARState_descriptor(), name, value);
}
// ===================================================================

class Record PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp_record.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance();

  enum RecordTypeCase {
    kNoSessionContext = 7,
    kSessionContext = 8,
    RECORD_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp_record.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2drecord_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2drecord_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Record_PayloadSecurity PayloadSecurity;
  static constexpr PayloadSecurity PLAINTEXT =
    Record_PayloadSecurity_PLAINTEXT;
  static constexpr PayloadSecurity TLS12 =
    Record_PayloadSecurity_TLS12;
  static inline bool PayloadSecurity_IsValid(int value) {
    return Record_PayloadSecurity_IsValid(value);
  }
  static constexpr PayloadSecurity PayloadSecurity_MIN =
    Record_PayloadSecurity_PayloadSecurity_MIN;
  static constexpr PayloadSecurity PayloadSecurity_MAX =
    Record_PayloadSecurity_PayloadSecurity_MAX;
  static constexpr int PayloadSecurity_ARRAYSIZE =
    Record_PayloadSecurity_PayloadSecurity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PayloadSecurity_descriptor() {
    return Record_PayloadSecurity_descriptor();
  }
  template<typename T>
  static inline const std::string& PayloadSecurity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PayloadSecurity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PayloadSecurity_Name.");
    return Record_PayloadSecurity_Name(enum_t_value);
  }
  static inline bool PayloadSecurity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PayloadSecurity* value) {
    return Record_PayloadSecurity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kToIdFieldNumber = 2,
    kFromIdFieldNumber = 3,
    kMacSignatureFieldNumber = 5,
    kSenderCertFieldNumber = 6,
    kPayloadSecurityFieldNumber = 4,
    kNoSessionContextFieldNumber = 7,
    kSessionContextFieldNumber = 8,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string to_id = 2;
  void clear_to_id();
  const std::string& to_id() const;
  void set_to_id(const std::string& value);
  void set_to_id(std::string&& value);
  void set_to_id(const char* value);
  void set_to_id(const char* value, size_t size);
  std::string* mutable_to_id();
  std::string* release_to_id();
  void set_allocated_to_id(std::string* to_id);
  private:
  const std::string& _internal_to_id() const;
  void _internal_set_to_id(const std::string& value);
  std::string* _internal_mutable_to_id();
  public:

  // string from_id = 3;
  void clear_from_id();
  const std::string& from_id() const;
  void set_from_id(const std::string& value);
  void set_from_id(std::string&& value);
  void set_from_id(const char* value);
  void set_from_id(const char* value, size_t size);
  std::string* mutable_from_id();
  std::string* release_from_id();
  void set_allocated_from_id(std::string* from_id);
  private:
  const std::string& _internal_from_id() const;
  void _internal_set_from_id(const std::string& value);
  std::string* _internal_mutable_from_id();
  public:

  // bytes mac_signature = 5;
  void clear_mac_signature();
  const std::string& mac_signature() const;
  void set_mac_signature(const std::string& value);
  void set_mac_signature(std::string&& value);
  void set_mac_signature(const char* value);
  void set_mac_signature(const void* value, size_t size);
  std::string* mutable_mac_signature();
  std::string* release_mac_signature();
  void set_allocated_mac_signature(std::string* mac_signature);
  private:
  const std::string& _internal_mac_signature() const;
  void _internal_set_mac_signature(const std::string& value);
  std::string* _internal_mutable_mac_signature();
  public:

  // bytes sender_cert = 6;
  void clear_sender_cert();
  const std::string& sender_cert() const;
  void set_sender_cert(const std::string& value);
  void set_sender_cert(std::string&& value);
  void set_sender_cert(const char* value);
  void set_sender_cert(const void* value, size_t size);
  std::string* mutable_sender_cert();
  std::string* release_sender_cert();
  void set_allocated_sender_cert(std::string* sender_cert);
  private:
  const std::string& _internal_sender_cert() const;
  void _internal_set_sender_cert(const std::string& value);
  std::string* _internal_mutable_sender_cert();
  public:

  // .usp_record.Record.PayloadSecurity payload_security = 4;
  void clear_payload_security();
  ::usp_record::Record_PayloadSecurity payload_security() const;
  void set_payload_security(::usp_record::Record_PayloadSecurity value);
  private:
  ::usp_record::Record_PayloadSecurity _internal_payload_security() const;
  void _internal_set_payload_security(::usp_record::Record_PayloadSecurity value);
  public:

  // .usp_record.NoSessionContextRecord no_session_context = 7;
  bool has_no_session_context() const;
  private:
  bool _internal_has_no_session_context() const;
  public:
  void clear_no_session_context();
  const ::usp_record::NoSessionContextRecord& no_session_context() const;
  ::usp_record::NoSessionContextRecord* release_no_session_context();
  ::usp_record::NoSessionContextRecord* mutable_no_session_context();
  void set_allocated_no_session_context(::usp_record::NoSessionContextRecord* no_session_context);
  private:
  const ::usp_record::NoSessionContextRecord& _internal_no_session_context() const;
  ::usp_record::NoSessionContextRecord* _internal_mutable_no_session_context();
  public:
  void unsafe_arena_set_allocated_no_session_context(
      ::usp_record::NoSessionContextRecord* no_session_context);
  ::usp_record::NoSessionContextRecord* unsafe_arena_release_no_session_context();

  // .usp_record.SessionContextRecord session_context = 8;
  bool has_session_context() const;
  private:
  bool _internal_has_session_context() const;
  public:
  void clear_session_context();
  const ::usp_record::SessionContextRecord& session_context() const;
  ::usp_record::SessionContextRecord* release_session_context();
  ::usp_record::SessionContextRecord* mutable_session_context();
  void set_allocated_session_context(::usp_record::SessionContextRecord* session_context);
  private:
  const ::usp_record::SessionContextRecord& _internal_session_context() const;
  ::usp_record::SessionContextRecord* _internal_mutable_session_context();
  public:
  void unsafe_arena_set_allocated_session_context(
      ::usp_record::SessionContextRecord* session_context);
  ::usp_record::SessionContextRecord* unsafe_arena_release_session_context();

  void clear_record_type();
  RecordTypeCase record_type_case() const;
  // @@protoc_insertion_point(class_scope:usp_record.Record)
 private:
  class _Internal;
  void set_has_no_session_context();
  void set_has_session_context();

  inline bool has_record_type() const;
  inline void clear_has_record_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_cert_;
  int payload_security_;
  union RecordTypeUnion {
    RecordTypeUnion() {}
    ::usp_record::NoSessionContextRecord* no_session_context_;
    ::usp_record::SessionContextRecord* session_context_;
  } record_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_usp_2drecord_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class NoSessionContextRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp_record.NoSessionContextRecord) */ {
 public:
  inline NoSessionContextRecord() : NoSessionContextRecord(nullptr) {}
  virtual ~NoSessionContextRecord();

  NoSessionContextRecord(const NoSessionContextRecord& from);
  NoSessionContextRecord(NoSessionContextRecord&& from) noexcept
    : NoSessionContextRecord() {
    *this = ::std::move(from);
  }

  inline NoSessionContextRecord& operator=(const NoSessionContextRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoSessionContextRecord& operator=(NoSessionContextRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoSessionContextRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoSessionContextRecord* internal_default_instance() {
    return reinterpret_cast<const NoSessionContextRecord*>(
               &_NoSessionContextRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NoSessionContextRecord& a, NoSessionContextRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(NoSessionContextRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoSessionContextRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoSessionContextRecord* New() const final {
    return CreateMaybeMessage<NoSessionContextRecord>(nullptr);
  }

  NoSessionContextRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoSessionContextRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoSessionContextRecord& from);
  void MergeFrom(const NoSessionContextRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoSessionContextRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp_record.NoSessionContextRecord";
  }
  protected:
  explicit NoSessionContextRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2drecord_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2drecord_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:usp_record.NoSessionContextRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2drecord_2d1_2d1_2eproto;
};
// -------------------------------------------------------------------

class SessionContextRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usp_record.SessionContextRecord) */ {
 public:
  inline SessionContextRecord() : SessionContextRecord(nullptr) {}
  virtual ~SessionContextRecord();

  SessionContextRecord(const SessionContextRecord& from);
  SessionContextRecord(SessionContextRecord&& from) noexcept
    : SessionContextRecord() {
    *this = ::std::move(from);
  }

  inline SessionContextRecord& operator=(const SessionContextRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionContextRecord& operator=(SessionContextRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionContextRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionContextRecord* internal_default_instance() {
    return reinterpret_cast<const SessionContextRecord*>(
               &_SessionContextRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionContextRecord& a, SessionContextRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionContextRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionContextRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionContextRecord* New() const final {
    return CreateMaybeMessage<SessionContextRecord>(nullptr);
  }

  SessionContextRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionContextRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionContextRecord& from);
  void MergeFrom(const SessionContextRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionContextRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usp_record.SessionContextRecord";
  }
  protected:
  explicit SessionContextRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_usp_2drecord_2d1_2d1_2eproto);
    return ::descriptor_table_usp_2drecord_2d1_2d1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SessionContextRecord_PayloadSARState PayloadSARState;
  static constexpr PayloadSARState NONE =
    SessionContextRecord_PayloadSARState_NONE;
  static constexpr PayloadSARState BEGIN =
    SessionContextRecord_PayloadSARState_BEGIN;
  static constexpr PayloadSARState INPROCESS =
    SessionContextRecord_PayloadSARState_INPROCESS;
  static constexpr PayloadSARState COMPLETE =
    SessionContextRecord_PayloadSARState_COMPLETE;
  static inline bool PayloadSARState_IsValid(int value) {
    return SessionContextRecord_PayloadSARState_IsValid(value);
  }
  static constexpr PayloadSARState PayloadSARState_MIN =
    SessionContextRecord_PayloadSARState_PayloadSARState_MIN;
  static constexpr PayloadSARState PayloadSARState_MAX =
    SessionContextRecord_PayloadSARState_PayloadSARState_MAX;
  static constexpr int PayloadSARState_ARRAYSIZE =
    SessionContextRecord_PayloadSARState_PayloadSARState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PayloadSARState_descriptor() {
    return SessionContextRecord_PayloadSARState_descriptor();
  }
  template<typename T>
  static inline const std::string& PayloadSARState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PayloadSARState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PayloadSARState_Name.");
    return SessionContextRecord_PayloadSARState_Name(enum_t_value);
  }
  static inline bool PayloadSARState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PayloadSARState* value) {
    return SessionContextRecord_PayloadSARState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 7,
    kSessionIdFieldNumber = 1,
    kSequenceIdFieldNumber = 2,
    kExpectedIdFieldNumber = 3,
    kRetransmitIdFieldNumber = 4,
    kPayloadSarStateFieldNumber = 5,
    kPayloadrecSarStateFieldNumber = 6,
  };
  // repeated bytes payload = 7;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  const std::string& payload(int index) const;
  std::string* mutable_payload(int index);
  void set_payload(int index, const std::string& value);
  void set_payload(int index, std::string&& value);
  void set_payload(int index, const char* value);
  void set_payload(int index, const void* value, size_t size);
  std::string* add_payload();
  void add_payload(const std::string& value);
  void add_payload(std::string&& value);
  void add_payload(const char* value);
  void add_payload(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payload();
  private:
  const std::string& _internal_payload(int index) const;
  std::string* _internal_add_payload();
  public:

  // uint64 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sequence_id = 2;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 expected_id = 3;
  void clear_expected_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_id() const;
  void set_expected_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_id() const;
  void _internal_set_expected_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 retransmit_id = 4;
  void clear_retransmit_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 retransmit_id() const;
  void set_retransmit_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_retransmit_id() const;
  void _internal_set_retransmit_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .usp_record.SessionContextRecord.PayloadSARState payload_sar_state = 5;
  void clear_payload_sar_state();
  ::usp_record::SessionContextRecord_PayloadSARState payload_sar_state() const;
  void set_payload_sar_state(::usp_record::SessionContextRecord_PayloadSARState value);
  private:
  ::usp_record::SessionContextRecord_PayloadSARState _internal_payload_sar_state() const;
  void _internal_set_payload_sar_state(::usp_record::SessionContextRecord_PayloadSARState value);
  public:

  // .usp_record.SessionContextRecord.PayloadSARState payloadrec_sar_state = 6;
  void clear_payloadrec_sar_state();
  ::usp_record::SessionContextRecord_PayloadSARState payloadrec_sar_state() const;
  void set_payloadrec_sar_state(::usp_record::SessionContextRecord_PayloadSARState value);
  private:
  ::usp_record::SessionContextRecord_PayloadSARState _internal_payloadrec_sar_state() const;
  void _internal_set_payloadrec_sar_state(::usp_record::SessionContextRecord_PayloadSARState value);
  public:

  // @@protoc_insertion_point(class_scope:usp_record.SessionContextRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 retransmit_id_;
  int payload_sar_state_;
  int payloadrec_sar_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_usp_2drecord_2d1_2d1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// string version = 1;
inline void Record::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Record::version() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.version)
  return _internal_version();
}
inline void Record::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.version)
}
inline std::string* Record::mutable_version() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.version)
  return _internal_mutable_version();
}
inline const std::string& Record::_internal_version() const {
  return version_.Get();
}
inline void Record::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Record::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.Record.version)
}
inline void Record::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.Record.version)
}
inline void Record::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.Record.version)
}
inline std::string* Record::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Record::release_version() {
  // @@protoc_insertion_point(field_release:usp_record.Record.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Record::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.version)
}

// string to_id = 2;
inline void Record::clear_to_id() {
  to_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Record::to_id() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.to_id)
  return _internal_to_id();
}
inline void Record::set_to_id(const std::string& value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.to_id)
}
inline std::string* Record::mutable_to_id() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.to_id)
  return _internal_mutable_to_id();
}
inline const std::string& Record::_internal_to_id() const {
  return to_id_.Get();
}
inline void Record::_internal_set_to_id(const std::string& value) {
  
  to_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Record::set_to_id(std::string&& value) {
  
  to_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.Record.to_id)
}
inline void Record::set_to_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.Record.to_id)
}
inline void Record::set_to_id(const char* value,
    size_t size) {
  
  to_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.Record.to_id)
}
inline std::string* Record::_internal_mutable_to_id() {
  
  return to_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Record::release_to_id() {
  // @@protoc_insertion_point(field_release:usp_record.Record.to_id)
  return to_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Record::set_allocated_to_id(std::string* to_id) {
  if (to_id != nullptr) {
    
  } else {
    
  }
  to_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.to_id)
}

// string from_id = 3;
inline void Record::clear_from_id() {
  from_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Record::from_id() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.from_id)
  return _internal_from_id();
}
inline void Record::set_from_id(const std::string& value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.from_id)
}
inline std::string* Record::mutable_from_id() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.from_id)
  return _internal_mutable_from_id();
}
inline const std::string& Record::_internal_from_id() const {
  return from_id_.Get();
}
inline void Record::_internal_set_from_id(const std::string& value) {
  
  from_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Record::set_from_id(std::string&& value) {
  
  from_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.Record.from_id)
}
inline void Record::set_from_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.Record.from_id)
}
inline void Record::set_from_id(const char* value,
    size_t size) {
  
  from_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.Record.from_id)
}
inline std::string* Record::_internal_mutable_from_id() {
  
  return from_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Record::release_from_id() {
  // @@protoc_insertion_point(field_release:usp_record.Record.from_id)
  return from_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Record::set_allocated_from_id(std::string* from_id) {
  if (from_id != nullptr) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.from_id)
}

// .usp_record.Record.PayloadSecurity payload_security = 4;
inline void Record::clear_payload_security() {
  payload_security_ = 0;
}
inline ::usp_record::Record_PayloadSecurity Record::_internal_payload_security() const {
  return static_cast< ::usp_record::Record_PayloadSecurity >(payload_security_);
}
inline ::usp_record::Record_PayloadSecurity Record::payload_security() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.payload_security)
  return _internal_payload_security();
}
inline void Record::_internal_set_payload_security(::usp_record::Record_PayloadSecurity value) {
  
  payload_security_ = value;
}
inline void Record::set_payload_security(::usp_record::Record_PayloadSecurity value) {
  _internal_set_payload_security(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.payload_security)
}

// bytes mac_signature = 5;
inline void Record::clear_mac_signature() {
  mac_signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Record::mac_signature() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.mac_signature)
  return _internal_mac_signature();
}
inline void Record::set_mac_signature(const std::string& value) {
  _internal_set_mac_signature(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.mac_signature)
}
inline std::string* Record::mutable_mac_signature() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.mac_signature)
  return _internal_mutable_mac_signature();
}
inline const std::string& Record::_internal_mac_signature() const {
  return mac_signature_.Get();
}
inline void Record::_internal_set_mac_signature(const std::string& value) {
  
  mac_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Record::set_mac_signature(std::string&& value) {
  
  mac_signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.Record.mac_signature)
}
inline void Record::set_mac_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.Record.mac_signature)
}
inline void Record::set_mac_signature(const void* value,
    size_t size) {
  
  mac_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.Record.mac_signature)
}
inline std::string* Record::_internal_mutable_mac_signature() {
  
  return mac_signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Record::release_mac_signature() {
  // @@protoc_insertion_point(field_release:usp_record.Record.mac_signature)
  return mac_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Record::set_allocated_mac_signature(std::string* mac_signature) {
  if (mac_signature != nullptr) {
    
  } else {
    
  }
  mac_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.mac_signature)
}

// bytes sender_cert = 6;
inline void Record::clear_sender_cert() {
  sender_cert_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Record::sender_cert() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.sender_cert)
  return _internal_sender_cert();
}
inline void Record::set_sender_cert(const std::string& value) {
  _internal_set_sender_cert(value);
  // @@protoc_insertion_point(field_set:usp_record.Record.sender_cert)
}
inline std::string* Record::mutable_sender_cert() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.sender_cert)
  return _internal_mutable_sender_cert();
}
inline const std::string& Record::_internal_sender_cert() const {
  return sender_cert_.Get();
}
inline void Record::_internal_set_sender_cert(const std::string& value) {
  
  sender_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Record::set_sender_cert(std::string&& value) {
  
  sender_cert_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.Record.sender_cert)
}
inline void Record::set_sender_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.Record.sender_cert)
}
inline void Record::set_sender_cert(const void* value,
    size_t size) {
  
  sender_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.Record.sender_cert)
}
inline std::string* Record::_internal_mutable_sender_cert() {
  
  return sender_cert_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Record::release_sender_cert() {
  // @@protoc_insertion_point(field_release:usp_record.Record.sender_cert)
  return sender_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Record::set_allocated_sender_cert(std::string* sender_cert) {
  if (sender_cert != nullptr) {
    
  } else {
    
  }
  sender_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_cert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.sender_cert)
}

// .usp_record.NoSessionContextRecord no_session_context = 7;
inline bool Record::_internal_has_no_session_context() const {
  return record_type_case() == kNoSessionContext;
}
inline bool Record::has_no_session_context() const {
  return _internal_has_no_session_context();
}
inline void Record::set_has_no_session_context() {
  _oneof_case_[0] = kNoSessionContext;
}
inline void Record::clear_no_session_context() {
  if (_internal_has_no_session_context()) {
    if (GetArena() == nullptr) {
      delete record_type_.no_session_context_;
    }
    clear_has_record_type();
  }
}
inline ::usp_record::NoSessionContextRecord* Record::release_no_session_context() {
  // @@protoc_insertion_point(field_release:usp_record.Record.no_session_context)
  if (_internal_has_no_session_context()) {
    clear_has_record_type();
      ::usp_record::NoSessionContextRecord* temp = record_type_.no_session_context_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_type_.no_session_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp_record::NoSessionContextRecord& Record::_internal_no_session_context() const {
  return _internal_has_no_session_context()
      ? *record_type_.no_session_context_
      : *reinterpret_cast< ::usp_record::NoSessionContextRecord*>(&::usp_record::_NoSessionContextRecord_default_instance_);
}
inline const ::usp_record::NoSessionContextRecord& Record::no_session_context() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.no_session_context)
  return _internal_no_session_context();
}
inline ::usp_record::NoSessionContextRecord* Record::unsafe_arena_release_no_session_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp_record.Record.no_session_context)
  if (_internal_has_no_session_context()) {
    clear_has_record_type();
    ::usp_record::NoSessionContextRecord* temp = record_type_.no_session_context_;
    record_type_.no_session_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_no_session_context(::usp_record::NoSessionContextRecord* no_session_context) {
  clear_record_type();
  if (no_session_context) {
    set_has_no_session_context();
    record_type_.no_session_context_ = no_session_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp_record.Record.no_session_context)
}
inline ::usp_record::NoSessionContextRecord* Record::_internal_mutable_no_session_context() {
  if (!_internal_has_no_session_context()) {
    clear_record_type();
    set_has_no_session_context();
    record_type_.no_session_context_ = CreateMaybeMessage< ::usp_record::NoSessionContextRecord >(GetArena());
  }
  return record_type_.no_session_context_;
}
inline ::usp_record::NoSessionContextRecord* Record::mutable_no_session_context() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.no_session_context)
  return _internal_mutable_no_session_context();
}

// .usp_record.SessionContextRecord session_context = 8;
inline bool Record::_internal_has_session_context() const {
  return record_type_case() == kSessionContext;
}
inline bool Record::has_session_context() const {
  return _internal_has_session_context();
}
inline void Record::set_has_session_context() {
  _oneof_case_[0] = kSessionContext;
}
inline void Record::clear_session_context() {
  if (_internal_has_session_context()) {
    if (GetArena() == nullptr) {
      delete record_type_.session_context_;
    }
    clear_has_record_type();
  }
}
inline ::usp_record::SessionContextRecord* Record::release_session_context() {
  // @@protoc_insertion_point(field_release:usp_record.Record.session_context)
  if (_internal_has_session_context()) {
    clear_has_record_type();
      ::usp_record::SessionContextRecord* temp = record_type_.session_context_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_type_.session_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::usp_record::SessionContextRecord& Record::_internal_session_context() const {
  return _internal_has_session_context()
      ? *record_type_.session_context_
      : *reinterpret_cast< ::usp_record::SessionContextRecord*>(&::usp_record::_SessionContextRecord_default_instance_);
}
inline const ::usp_record::SessionContextRecord& Record::session_context() const {
  // @@protoc_insertion_point(field_get:usp_record.Record.session_context)
  return _internal_session_context();
}
inline ::usp_record::SessionContextRecord* Record::unsafe_arena_release_session_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:usp_record.Record.session_context)
  if (_internal_has_session_context()) {
    clear_has_record_type();
    ::usp_record::SessionContextRecord* temp = record_type_.session_context_;
    record_type_.session_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_session_context(::usp_record::SessionContextRecord* session_context) {
  clear_record_type();
  if (session_context) {
    set_has_session_context();
    record_type_.session_context_ = session_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:usp_record.Record.session_context)
}
inline ::usp_record::SessionContextRecord* Record::_internal_mutable_session_context() {
  if (!_internal_has_session_context()) {
    clear_record_type();
    set_has_session_context();
    record_type_.session_context_ = CreateMaybeMessage< ::usp_record::SessionContextRecord >(GetArena());
  }
  return record_type_.session_context_;
}
inline ::usp_record::SessionContextRecord* Record::mutable_session_context() {
  // @@protoc_insertion_point(field_mutable:usp_record.Record.session_context)
  return _internal_mutable_session_context();
}

inline bool Record::has_record_type() const {
  return record_type_case() != RECORD_TYPE_NOT_SET;
}
inline void Record::clear_has_record_type() {
  _oneof_case_[0] = RECORD_TYPE_NOT_SET;
}
inline Record::RecordTypeCase Record::record_type_case() const {
  return Record::RecordTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoSessionContextRecord

// bytes payload = 2;
inline void NoSessionContextRecord::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NoSessionContextRecord::payload() const {
  // @@protoc_insertion_point(field_get:usp_record.NoSessionContextRecord.payload)
  return _internal_payload();
}
inline void NoSessionContextRecord::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:usp_record.NoSessionContextRecord.payload)
}
inline std::string* NoSessionContextRecord::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:usp_record.NoSessionContextRecord.payload)
  return _internal_mutable_payload();
}
inline const std::string& NoSessionContextRecord::_internal_payload() const {
  return payload_.Get();
}
inline void NoSessionContextRecord::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NoSessionContextRecord::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:usp_record.NoSessionContextRecord.payload)
}
inline void NoSessionContextRecord::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:usp_record.NoSessionContextRecord.payload)
}
inline void NoSessionContextRecord::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:usp_record.NoSessionContextRecord.payload)
}
inline std::string* NoSessionContextRecord::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NoSessionContextRecord::release_payload() {
  // @@protoc_insertion_point(field_release:usp_record.NoSessionContextRecord.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NoSessionContextRecord::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:usp_record.NoSessionContextRecord.payload)
}

// -------------------------------------------------------------------

// SessionContextRecord

// uint64 session_id = 1;
inline void SessionContextRecord::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::session_id() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.session_id)
  return _internal_session_id();
}
inline void SessionContextRecord::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void SessionContextRecord::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.session_id)
}

// uint64 sequence_id = 2;
inline void SessionContextRecord::clear_sequence_id() {
  sequence_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::sequence_id() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.sequence_id)
  return _internal_sequence_id();
}
inline void SessionContextRecord::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_id_ = value;
}
inline void SessionContextRecord::set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.sequence_id)
}

// uint64 expected_id = 3;
inline void SessionContextRecord::clear_expected_id() {
  expected_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::_internal_expected_id() const {
  return expected_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::expected_id() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.expected_id)
  return _internal_expected_id();
}
inline void SessionContextRecord::_internal_set_expected_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expected_id_ = value;
}
inline void SessionContextRecord::set_expected_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_id(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.expected_id)
}

// uint64 retransmit_id = 4;
inline void SessionContextRecord::clear_retransmit_id() {
  retransmit_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::_internal_retransmit_id() const {
  return retransmit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionContextRecord::retransmit_id() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.retransmit_id)
  return _internal_retransmit_id();
}
inline void SessionContextRecord::_internal_set_retransmit_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  retransmit_id_ = value;
}
inline void SessionContextRecord::set_retransmit_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_retransmit_id(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.retransmit_id)
}

// .usp_record.SessionContextRecord.PayloadSARState payload_sar_state = 5;
inline void SessionContextRecord::clear_payload_sar_state() {
  payload_sar_state_ = 0;
}
inline ::usp_record::SessionContextRecord_PayloadSARState SessionContextRecord::_internal_payload_sar_state() const {
  return static_cast< ::usp_record::SessionContextRecord_PayloadSARState >(payload_sar_state_);
}
inline ::usp_record::SessionContextRecord_PayloadSARState SessionContextRecord::payload_sar_state() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.payload_sar_state)
  return _internal_payload_sar_state();
}
inline void SessionContextRecord::_internal_set_payload_sar_state(::usp_record::SessionContextRecord_PayloadSARState value) {
  
  payload_sar_state_ = value;
}
inline void SessionContextRecord::set_payload_sar_state(::usp_record::SessionContextRecord_PayloadSARState value) {
  _internal_set_payload_sar_state(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.payload_sar_state)
}

// .usp_record.SessionContextRecord.PayloadSARState payloadrec_sar_state = 6;
inline void SessionContextRecord::clear_payloadrec_sar_state() {
  payloadrec_sar_state_ = 0;
}
inline ::usp_record::SessionContextRecord_PayloadSARState SessionContextRecord::_internal_payloadrec_sar_state() const {
  return static_cast< ::usp_record::SessionContextRecord_PayloadSARState >(payloadrec_sar_state_);
}
inline ::usp_record::SessionContextRecord_PayloadSARState SessionContextRecord::payloadrec_sar_state() const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.payloadrec_sar_state)
  return _internal_payloadrec_sar_state();
}
inline void SessionContextRecord::_internal_set_payloadrec_sar_state(::usp_record::SessionContextRecord_PayloadSARState value) {
  
  payloadrec_sar_state_ = value;
}
inline void SessionContextRecord::set_payloadrec_sar_state(::usp_record::SessionContextRecord_PayloadSARState value) {
  _internal_set_payloadrec_sar_state(value);
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.payloadrec_sar_state)
}

// repeated bytes payload = 7;
inline int SessionContextRecord::_internal_payload_size() const {
  return payload_.size();
}
inline int SessionContextRecord::payload_size() const {
  return _internal_payload_size();
}
inline void SessionContextRecord::clear_payload() {
  payload_.Clear();
}
inline std::string* SessionContextRecord::add_payload() {
  // @@protoc_insertion_point(field_add_mutable:usp_record.SessionContextRecord.payload)
  return _internal_add_payload();
}
inline const std::string& SessionContextRecord::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const std::string& SessionContextRecord::payload(int index) const {
  // @@protoc_insertion_point(field_get:usp_record.SessionContextRecord.payload)
  return _internal_payload(index);
}
inline std::string* SessionContextRecord::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:usp_record.SessionContextRecord.payload)
  return payload_.Mutable(index);
}
inline void SessionContextRecord::set_payload(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.payload)
  payload_.Mutable(index)->assign(value);
}
inline void SessionContextRecord::set_payload(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:usp_record.SessionContextRecord.payload)
  payload_.Mutable(index)->assign(std::move(value));
}
inline void SessionContextRecord::set_payload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:usp_record.SessionContextRecord.payload)
}
inline void SessionContextRecord::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:usp_record.SessionContextRecord.payload)
}
inline std::string* SessionContextRecord::_internal_add_payload() {
  return payload_.Add();
}
inline void SessionContextRecord::add_payload(const std::string& value) {
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:usp_record.SessionContextRecord.payload)
}
inline void SessionContextRecord::add_payload(std::string&& value) {
  payload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:usp_record.SessionContextRecord.payload)
}
inline void SessionContextRecord::add_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:usp_record.SessionContextRecord.payload)
}
inline void SessionContextRecord::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:usp_record.SessionContextRecord.payload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionContextRecord::payload() const {
  // @@protoc_insertion_point(field_list:usp_record.SessionContextRecord.payload)
  return payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionContextRecord::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:usp_record.SessionContextRecord.payload)
  return &payload_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usp_record

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::usp_record::Record_PayloadSecurity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usp_record::Record_PayloadSecurity>() {
  return ::usp_record::Record_PayloadSecurity_descriptor();
}
template <> struct is_proto_enum< ::usp_record::SessionContextRecord_PayloadSARState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usp_record::SessionContextRecord_PayloadSARState>() {
  return ::usp_record::SessionContextRecord_PayloadSARState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_usp_2drecord_2d1_2d1_2eproto
