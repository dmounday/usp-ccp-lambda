// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usp-record-1-1.proto

#include "usp-record-1-1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_usp_2drecord_2d1_2d1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usp_2drecord_2d1_2d1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto;
namespace usp_record {
class RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Record> _instance;
  const ::usp_record::NoSessionContextRecord* no_session_context_;
  const ::usp_record::SessionContextRecord* session_context_;
} _Record_default_instance_;
class NoSessionContextRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoSessionContextRecord> _instance;
} _NoSessionContextRecord_default_instance_;
class SessionContextRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionContextRecord> _instance;
} _SessionContextRecord_default_instance_;
}  // namespace usp_record
static void InitDefaultsscc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usp_record::_NoSessionContextRecord_default_instance_;
    new (ptr) ::usp_record::NoSessionContextRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usp_record::NoSessionContextRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto}, {}};

static void InitDefaultsscc_info_Record_usp_2drecord_2d1_2d1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usp_record::_Record_default_instance_;
    new (ptr) ::usp_record::Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usp_record::Record::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Record_usp_2drecord_2d1_2d1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Record_usp_2drecord_2d1_2d1_2eproto}, {
      &scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base,
      &scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base,}};

static void InitDefaultsscc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::usp_record::_SessionContextRecord_default_instance_;
    new (ptr) ::usp_record::SessionContextRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::usp_record::SessionContextRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_usp_2drecord_2d1_2d1_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_usp_2drecord_2d1_2d1_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_usp_2drecord_2d1_2d1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_usp_2drecord_2d1_2d1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, version_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, to_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, from_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, payload_security_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, mac_signature_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, sender_cert_),
  offsetof(::usp_record::RecordDefaultTypeInternal, no_session_context_),
  offsetof(::usp_record::RecordDefaultTypeInternal, session_context_),
  PROTOBUF_FIELD_OFFSET(::usp_record::Record, record_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::usp_record::NoSessionContextRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usp_record::NoSessionContextRecord, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, session_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, expected_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, retransmit_id_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, payload_sar_state_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, payloadrec_sar_state_),
  PROTOBUF_FIELD_OFFSET(::usp_record::SessionContextRecord, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::usp_record::Record)},
  { 14, -1, sizeof(::usp_record::NoSessionContextRecord)},
  { 20, -1, sizeof(::usp_record::SessionContextRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usp_record::_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usp_record::_NoSessionContextRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::usp_record::_SessionContextRecord_default_instance_),
};

const char descriptor_table_protodef_usp_2drecord_2d1_2d1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024usp-record-1-1.proto\022\nusp_record\"\336\002\n\006R"
  "ecord\022\017\n\007version\030\001 \001(\t\022\r\n\005to_id\030\002 \001(\t\022\017\n"
  "\007from_id\030\003 \001(\t\022<\n\020payload_security\030\004 \001(\016"
  "2\".usp_record.Record.PayloadSecurity\022\025\n\r"
  "mac_signature\030\005 \001(\014\022\023\n\013sender_cert\030\006 \001(\014"
  "\022@\n\022no_session_context\030\007 \001(\0132\".usp_recor"
  "d.NoSessionContextRecordH\000\022;\n\017session_co"
  "ntext\030\010 \001(\0132 .usp_record.SessionContextR"
  "ecordH\000\"+\n\017PayloadSecurity\022\r\n\tPLAINTEXT\020"
  "\000\022\t\n\005TLS12\020\001B\r\n\013record_type\")\n\026NoSession"
  "ContextRecord\022\017\n\007payload\030\002 \001(\014\"\336\002\n\024Sessi"
  "onContextRecord\022\022\n\nsession_id\030\001 \001(\004\022\023\n\013s"
  "equence_id\030\002 \001(\004\022\023\n\013expected_id\030\003 \001(\004\022\025\n"
  "\rretransmit_id\030\004 \001(\004\022K\n\021payload_sar_stat"
  "e\030\005 \001(\01620.usp_record.SessionContextRecor"
  "d.PayloadSARState\022N\n\024payloadrec_sar_stat"
  "e\030\006 \001(\01620.usp_record.SessionContextRecor"
  "d.PayloadSARState\022\017\n\007payload\030\007 \003(\014\"C\n\017Pa"
  "yloadSARState\022\010\n\004NONE\020\000\022\t\n\005BEGIN\020\001\022\r\n\tIN"
  "PROCESS\020\002\022\014\n\010COMPLETE\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_usp_2drecord_2d1_2d1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_usp_2drecord_2d1_2d1_2eproto_sccs[3] = {
  &scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base,
  &scc_info_Record_usp_2drecord_2d1_2d1_2eproto.base,
  &scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_usp_2drecord_2d1_2d1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usp_2drecord_2d1_2d1_2eproto = {
  false, false, descriptor_table_protodef_usp_2drecord_2d1_2d1_2eproto, "usp-record-1-1.proto", 791,
  &descriptor_table_usp_2drecord_2d1_2d1_2eproto_once, descriptor_table_usp_2drecord_2d1_2d1_2eproto_sccs, descriptor_table_usp_2drecord_2d1_2d1_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_usp_2drecord_2d1_2d1_2eproto::offsets,
  file_level_metadata_usp_2drecord_2d1_2d1_2eproto, 3, file_level_enum_descriptors_usp_2drecord_2d1_2d1_2eproto, file_level_service_descriptors_usp_2drecord_2d1_2d1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_usp_2drecord_2d1_2d1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_usp_2drecord_2d1_2d1_2eproto)), true);
namespace usp_record {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Record_PayloadSecurity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usp_2drecord_2d1_2d1_2eproto);
  return file_level_enum_descriptors_usp_2drecord_2d1_2d1_2eproto[0];
}
bool Record_PayloadSecurity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Record_PayloadSecurity Record::PLAINTEXT;
constexpr Record_PayloadSecurity Record::TLS12;
constexpr Record_PayloadSecurity Record::PayloadSecurity_MIN;
constexpr Record_PayloadSecurity Record::PayloadSecurity_MAX;
constexpr int Record::PayloadSecurity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionContextRecord_PayloadSARState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usp_2drecord_2d1_2d1_2eproto);
  return file_level_enum_descriptors_usp_2drecord_2d1_2d1_2eproto[1];
}
bool SessionContextRecord_PayloadSARState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::NONE;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::BEGIN;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::INPROCESS;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::COMPLETE;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::PayloadSARState_MIN;
constexpr SessionContextRecord_PayloadSARState SessionContextRecord::PayloadSARState_MAX;
constexpr int SessionContextRecord::PayloadSARState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Record::InitAsDefaultInstance() {
  ::usp_record::_Record_default_instance_.no_session_context_ = const_cast< ::usp_record::NoSessionContextRecord*>(
      ::usp_record::NoSessionContextRecord::internal_default_instance());
  ::usp_record::_Record_default_instance_.session_context_ = const_cast< ::usp_record::SessionContextRecord*>(
      ::usp_record::SessionContextRecord::internal_default_instance());
}
class Record::_Internal {
 public:
  static const ::usp_record::NoSessionContextRecord& no_session_context(const Record* msg);
  static const ::usp_record::SessionContextRecord& session_context(const Record* msg);
};

const ::usp_record::NoSessionContextRecord&
Record::_Internal::no_session_context(const Record* msg) {
  return *msg->record_type_.no_session_context_;
}
const ::usp_record::SessionContextRecord&
Record::_Internal::session_context(const Record* msg) {
  return *msg->record_type_.session_context_;
}
void Record::set_allocated_no_session_context(::usp_record::NoSessionContextRecord* no_session_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_record_type();
  if (no_session_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(no_session_context);
    if (message_arena != submessage_arena) {
      no_session_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_session_context, submessage_arena);
    }
    set_has_no_session_context();
    record_type_.no_session_context_ = no_session_context;
  }
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.no_session_context)
}
void Record::set_allocated_session_context(::usp_record::SessionContextRecord* session_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_record_type();
  if (session_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_context);
    if (message_arena != submessage_arena) {
      session_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_context, submessage_arena);
    }
    set_has_session_context();
    record_type_.session_context_ = session_context;
  }
  // @@protoc_insertion_point(field_set_allocated:usp_record.Record.session_context)
}
Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:usp_record.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  to_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_id().empty()) {
    to_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_id(),
      GetArena());
  }
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_id().empty()) {
    from_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_id(),
      GetArena());
  }
  mac_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_signature().empty()) {
    mac_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_signature(),
      GetArena());
  }
  sender_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_cert().empty()) {
    sender_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_cert(),
      GetArena());
  }
  payload_security_ = from.payload_security_;
  clear_has_record_type();
  switch (from.record_type_case()) {
    case kNoSessionContext: {
      _internal_mutable_no_session_context()->::usp_record::NoSessionContextRecord::MergeFrom(from._internal_no_session_context());
      break;
    }
    case kSessionContext: {
      _internal_mutable_session_context()->::usp_record::SessionContextRecord::MergeFrom(from._internal_session_context());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:usp_record.Record)
}

void Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Record_usp_2drecord_2d1_2d1_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_security_ = 0;
  clear_has_record_type();
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:usp_record.Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_record_type()) {
    clear_record_type();
  }
}

void Record::ArenaDtor(void* object) {
  Record* _this = reinterpret_cast< Record* >(object);
  (void)_this;
}
void Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Record& Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Record_usp_2drecord_2d1_2d1_2eproto.base);
  return *internal_default_instance();
}


void Record::clear_record_type() {
// @@protoc_insertion_point(one_of_clear_start:usp_record.Record)
  switch (record_type_case()) {
    case kNoSessionContext: {
      if (GetArena() == nullptr) {
        delete record_type_.no_session_context_;
      }
      break;
    }
    case kSessionContext: {
      if (GetArena() == nullptr) {
        delete record_type_.session_context_;
      }
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_TYPE_NOT_SET;
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:usp_record.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_cert_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_security_ = 0;
  clear_record_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "usp_record.Record.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "usp_record.Record.to_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_from_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "usp_record.Record.from_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .usp_record.Record.PayloadSecurity payload_security = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payload_security(static_cast<::usp_record::Record_PayloadSecurity>(val));
        } else goto handle_unusual;
        continue;
      // bytes mac_signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mac_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_cert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sender_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .usp_record.NoSessionContextRecord no_session_context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_session_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .usp_record.SessionContextRecord session_context = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usp_record.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "usp_record.Record.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string to_id = 2;
  if (this->to_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_id().data(), static_cast<int>(this->_internal_to_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "usp_record.Record.to_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_id(), target);
  }

  // string from_id = 3;
  if (this->from_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_id().data(), static_cast<int>(this->_internal_from_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "usp_record.Record.from_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_from_id(), target);
  }

  // .usp_record.Record.PayloadSecurity payload_security = 4;
  if (this->payload_security() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_payload_security(), target);
  }

  // bytes mac_signature = 5;
  if (this->mac_signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_mac_signature(), target);
  }

  // bytes sender_cert = 6;
  if (this->sender_cert().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sender_cert(), target);
  }

  // .usp_record.NoSessionContextRecord no_session_context = 7;
  if (_internal_has_no_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::no_session_context(this), target, stream);
  }

  // .usp_record.SessionContextRecord session_context = 8;
  if (_internal_has_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::session_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usp_record.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usp_record.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string to_id = 2;
  if (this->to_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_id());
  }

  // string from_id = 3;
  if (this->from_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_id());
  }

  // bytes mac_signature = 5;
  if (this->mac_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_signature());
  }

  // bytes sender_cert = 6;
  if (this->sender_cert().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_cert());
  }

  // .usp_record.Record.PayloadSecurity payload_security = 4;
  if (this->payload_security() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payload_security());
  }

  switch (record_type_case()) {
    // .usp_record.NoSessionContextRecord no_session_context = 7;
    case kNoSessionContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_type_.no_session_context_);
      break;
    }
    // .usp_record.SessionContextRecord session_context = 8;
    case kSessionContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_type_.session_context_);
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usp_record.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usp_record.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usp_record.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usp_record.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.to_id().size() > 0) {
    _internal_set_to_id(from._internal_to_id());
  }
  if (from.from_id().size() > 0) {
    _internal_set_from_id(from._internal_from_id());
  }
  if (from.mac_signature().size() > 0) {
    _internal_set_mac_signature(from._internal_mac_signature());
  }
  if (from.sender_cert().size() > 0) {
    _internal_set_sender_cert(from._internal_sender_cert());
  }
  if (from.payload_security() != 0) {
    _internal_set_payload_security(from._internal_payload_security());
  }
  switch (from.record_type_case()) {
    case kNoSessionContext: {
      _internal_mutable_no_session_context()->::usp_record::NoSessionContextRecord::MergeFrom(from._internal_no_session_context());
      break;
    }
    case kSessionContext: {
      _internal_mutable_session_context()->::usp_record::SessionContextRecord::MergeFrom(from._internal_session_context());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
}

void Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usp_record.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usp_record.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_id_.Swap(&other->to_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_id_.Swap(&other->from_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_signature_.Swap(&other->mac_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_cert_.Swap(&other->sender_cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(payload_security_, other->payload_security_);
  swap(record_type_, other->record_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoSessionContextRecord::InitAsDefaultInstance() {
}
class NoSessionContextRecord::_Internal {
 public:
};

NoSessionContextRecord::NoSessionContextRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:usp_record.NoSessionContextRecord)
}
NoSessionContextRecord::NoSessionContextRecord(const NoSessionContextRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:usp_record.NoSessionContextRecord)
}

void NoSessionContextRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NoSessionContextRecord::~NoSessionContextRecord() {
  // @@protoc_insertion_point(destructor:usp_record.NoSessionContextRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoSessionContextRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoSessionContextRecord::ArenaDtor(void* object) {
  NoSessionContextRecord* _this = reinterpret_cast< NoSessionContextRecord* >(object);
  (void)_this;
}
void NoSessionContextRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoSessionContextRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoSessionContextRecord& NoSessionContextRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoSessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base);
  return *internal_default_instance();
}


void NoSessionContextRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:usp_record.NoSessionContextRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoSessionContextRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoSessionContextRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usp_record.NoSessionContextRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usp_record.NoSessionContextRecord)
  return target;
}

size_t NoSessionContextRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usp_record.NoSessionContextRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoSessionContextRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usp_record.NoSessionContextRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const NoSessionContextRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoSessionContextRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usp_record.NoSessionContextRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usp_record.NoSessionContextRecord)
    MergeFrom(*source);
  }
}

void NoSessionContextRecord::MergeFrom(const NoSessionContextRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usp_record.NoSessionContextRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void NoSessionContextRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usp_record.NoSessionContextRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoSessionContextRecord::CopyFrom(const NoSessionContextRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usp_record.NoSessionContextRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoSessionContextRecord::IsInitialized() const {
  return true;
}

void NoSessionContextRecord::InternalSwap(NoSessionContextRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NoSessionContextRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionContextRecord::InitAsDefaultInstance() {
}
class SessionContextRecord::_Internal {
 public:
};

SessionContextRecord::SessionContextRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payload_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:usp_record.SessionContextRecord)
}
SessionContextRecord::SessionContextRecord(const SessionContextRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&payloadrec_sar_state_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(payloadrec_sar_state_));
  // @@protoc_insertion_point(copy_constructor:usp_record.SessionContextRecord)
}

void SessionContextRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base);
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payloadrec_sar_state_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(payloadrec_sar_state_));
}

SessionContextRecord::~SessionContextRecord() {
  // @@protoc_insertion_point(destructor:usp_record.SessionContextRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionContextRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionContextRecord::ArenaDtor(void* object) {
  SessionContextRecord* _this = reinterpret_cast< SessionContextRecord* >(object);
  (void)_this;
}
void SessionContextRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContextRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionContextRecord& SessionContextRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionContextRecord_usp_2drecord_2d1_2d1_2eproto.base);
  return *internal_default_instance();
}


void SessionContextRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:usp_record.SessionContextRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payloadrec_sar_state_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(payloadrec_sar_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContextRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expected_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expected_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 retransmit_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retransmit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .usp_record.SessionContextRecord.PayloadSARState payload_sar_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payload_sar_state(static_cast<::usp_record::SessionContextRecord_PayloadSARState>(val));
        } else goto handle_unusual;
        continue;
      // .usp_record.SessionContextRecord.PayloadSARState payloadrec_sar_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payloadrec_sar_state(static_cast<::usp_record::SessionContextRecord_PayloadSARState>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_payload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionContextRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usp_record.SessionContextRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint64 sequence_id = 2;
  if (this->sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sequence_id(), target);
  }

  // uint64 expected_id = 3;
  if (this->expected_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expected_id(), target);
  }

  // uint64 retransmit_id = 4;
  if (this->retransmit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_retransmit_id(), target);
  }

  // .usp_record.SessionContextRecord.PayloadSARState payload_sar_state = 5;
  if (this->payload_sar_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_payload_sar_state(), target);
  }

  // .usp_record.SessionContextRecord.PayloadSARState payloadrec_sar_state = 6;
  if (this->payloadrec_sar_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_payloadrec_sar_state(), target);
  }

  // repeated bytes payload = 7;
  for (int i = 0, n = this->_internal_payload_size(); i < n; i++) {
    const auto& s = this->_internal_payload(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usp_record.SessionContextRecord)
  return target;
}

size_t SessionContextRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usp_record.SessionContextRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes payload = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(payload_.size());
  for (int i = 0, n = payload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      payload_.Get(i));
  }

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 sequence_id = 2;
  if (this->sequence_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_id());
  }

  // uint64 expected_id = 3;
  if (this->expected_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expected_id());
  }

  // uint64 retransmit_id = 4;
  if (this->retransmit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_retransmit_id());
  }

  // .usp_record.SessionContextRecord.PayloadSARState payload_sar_state = 5;
  if (this->payload_sar_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payload_sar_state());
  }

  // .usp_record.SessionContextRecord.PayloadSARState payloadrec_sar_state = 6;
  if (this->payloadrec_sar_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payloadrec_sar_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionContextRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usp_record.SessionContextRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionContextRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionContextRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usp_record.SessionContextRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usp_record.SessionContextRecord)
    MergeFrom(*source);
  }
}

void SessionContextRecord::MergeFrom(const SessionContextRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usp_record.SessionContextRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.sequence_id() != 0) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  if (from.expected_id() != 0) {
    _internal_set_expected_id(from._internal_expected_id());
  }
  if (from.retransmit_id() != 0) {
    _internal_set_retransmit_id(from._internal_retransmit_id());
  }
  if (from.payload_sar_state() != 0) {
    _internal_set_payload_sar_state(from._internal_payload_sar_state());
  }
  if (from.payloadrec_sar_state() != 0) {
    _internal_set_payloadrec_sar_state(from._internal_payloadrec_sar_state());
  }
}

void SessionContextRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usp_record.SessionContextRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionContextRecord::CopyFrom(const SessionContextRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usp_record.SessionContextRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContextRecord::IsInitialized() const {
  return true;
}

void SessionContextRecord::InternalSwap(SessionContextRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.InternalSwap(&other->payload_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionContextRecord, payloadrec_sar_state_)
      + sizeof(SessionContextRecord::payloadrec_sar_state_)
      - PROTOBUF_FIELD_OFFSET(SessionContextRecord, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContextRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usp_record
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::usp_record::Record* Arena::CreateMaybeMessage< ::usp_record::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::usp_record::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::usp_record::NoSessionContextRecord* Arena::CreateMaybeMessage< ::usp_record::NoSessionContextRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::usp_record::NoSessionContextRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::usp_record::SessionContextRecord* Arena::CreateMaybeMessage< ::usp_record::SessionContextRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::usp_record::SessionContextRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
